{"ast":null,"code":"import _Loading2 from \"element-ui/lib/theme-chalk/loading.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Loading from \"element-ui/lib/loading\";\nimport _Message2 from \"element-ui/lib/theme-chalk/message.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Message from \"element-ui/lib/message\";\nimport _MessageBox2 from \"element-ui/lib/theme-chalk/message-box.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _MessageBox from \"element-ui/lib/message-box\";\nimport _Select2 from \"element-ui/lib/theme-chalk/select.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Select from \"element-ui/lib/select\";\nimport _Option2 from \"element-ui/lib/theme-chalk/option.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Option from \"element-ui/lib/option\";\nimport _Input2 from \"element-ui/lib/theme-chalk/input.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Input from \"element-ui/lib/input\";\nimport _Tag2 from \"element-ui/lib/theme-chalk/tag.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Tag from \"element-ui/lib/tag\";\nimport _Slider2 from \"element-ui/lib/theme-chalk/slider.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Slider from \"element-ui/lib/slider\";\nimport _TimeSelect2 from \"element-ui/lib/theme-chalk/time-select.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _TimeSelect from \"element-ui/lib/time-select\";\nimport _DatePicker2 from \"element-ui/lib/theme-chalk/date-picker.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _DatePicker from \"element-ui/lib/date-picker\";\nimport _Button2 from \"element-ui/lib/theme-chalk/button.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Button from \"element-ui/lib/button\";\nimport _Popconfirm2 from \"element-ui/lib/theme-chalk/popconfirm.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Popconfirm from \"element-ui/lib/popconfirm\";\nimport _TableColumn2 from \"element-ui/lib/theme-chalk/table-column.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _TableColumn from \"element-ui/lib/table-column\";\nimport _Table2 from \"element-ui/lib/theme-chalk/table.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Table from \"element-ui/lib/table\";\nimport { Collapse, CollapseItem, Tabs, TabPane, Card } from \"src/components/UIComponents\";\nimport PProgress from \"src/components/UIComponents/Progress.vue\";\nimport PSwitch from \"src/components/UIComponents/Switch.vue\";\nimport PButton from \"src/components/UIComponents/Button.vue\";\nimport Vue from \"vue\";\nimport NotificationTemplate from \"../Components/NotificationTemplate\";\nimport NotifAddBoxLabel from \"../Components/Notification/NotifSuccessAddBoxLabel.vue\";\nimport NotifAddItem from \"../Components/Notification/NotifSuccessAddItem.vue\";\nimport NotifDeleteBoxLabel from \"../Components/Notification/NotifSuccessDeleteBoxLabel.vue\";\nimport NotifDeleteItem from \"../Components/Notification/NotifSuccessDeleteItem.vue\";\nimport NotifDraftSave from \"../Components/Notification/NotifSuccessDraftSave.vue\";\nimport NotifItemChangeBoxLabel from \"../Components/Notification/NotifSuccessItemChangeBoxLabel.vue\";\nimport NotifItemQuantity from \"../Components/Notification/NotifSuccessItemQuantity.vue\";\nimport NotifRenameBoxLabel from \"../Components/Notification/NotifSuccessRenameBoxLabel.vue\";\nimport NotifSubmitTransaction from \"../Components/Notification/NotifSuccessSubmitTransaction.vue\";\nimport SubmitEditAuthorizedDateModal from \"./PullOutRequests/ModalPullOut/SubmitEditAuthorizedDateModal.vue\";\nimport Swal from \"sweetalert2\";\nimport axiosClient from \"../../../../axios\";\nimport EditBoxLabelModal from \"./PullOutRequests/ModalPullOut/EditBoxLabelModal.vue\";\nimport TransactionReceiptModal from \"./PullOutRequests/ModalPullOut/TransactionReceiptModal.vue\";\nimport EditSubmitTransactionReceiptModal from \"./PullOutRequests/ModalPullOut/EditSubmitTransactionReceiptModal.vue\";\nimport DraftModal from \"./PullOutRequests/ModalPullOut/DraftModal.vue\";\nimport linkName from \"../../../../linkName\";\nimport ConfirmationSubmitPullOutModal from \"./PullOutRequests/ModalPullOut/ConfirmationSubmitPullOutModal.vue\";\nimport ConfirmationDraftPullOutModal from \"./PullOutRequests/ModalPullOut/ConfirmationDraftPullOutModal.vue\";\nimport * as XLSX from \"xlsx\";\nimport axios from \"axios\";\nVue.use(_Table);\nVue.use(_TableColumn);\nVue.use(_Popconfirm);\nVue.use(_Button);\nexport default {\n  components: {\n    [_DatePicker.name]: _DatePicker,\n    [_TimeSelect.name]: _TimeSelect,\n    [_Slider.name]: _Slider,\n    [_Tag.name]: _Tag,\n    [_Input.name]: _Input,\n    [_Option.name]: _Option,\n    [_Select.name]: _Select,\n    PButton,\n    PSwitch,\n    PProgress,\n    TabPane,\n    Tabs,\n    CollapseItem,\n    Collapse,\n    Card,\n    NotificationTemplate,\n    NotifAddBoxLabel,\n    NotifAddItem,\n    NotifDeleteBoxLabel,\n    NotifDeleteItem,\n    NotifDraftSave,\n    NotifItemChangeBoxLabel,\n    NotifItemQuantity,\n    NotifRenameBoxLabel,\n    NotifSubmitTransaction,\n    EditBoxLabelModal,\n    TransactionReceiptModal,\n    EditSubmitTransactionReceiptModal,\n    DraftModal,\n    ConfirmationSubmitPullOutModal,\n    ConfirmationDraftPullOutModal,\n    EditSubmitTransactionReceiptModal,\n    SubmitEditAuthorizedDateModal\n  },\n  data() {\n    return {\n      isDisabledDraft: true,\n      showCategoryBrand: true,\n      showUploadImage: true,\n      transferredData: \"\",\n      isCompany: false,\n      isChainCode: true,\n      isBranchName: true,\n      isTransactionType: true,\n      isShowButton: false,\n      itemCodeList: [],\n      isEditBLDisabled: false,\n      isBoxLabel: false,\n      isItem: false,\n      isAddItem: true,\n      isDisabledSubmit: true,\n      showItemInput: \"\",\n      companyList: [],\n      chainCodeList: [],\n      branchNameList: [],\n      newTransaction: {\n        company: \"\",\n        chainCode: \"\",\n        branchName: \"\",\n        transactionType: \"\",\n        boxLabels: [],\n        items: []\n      },\n      newItemInputBox: [],\n      isValid: {\n        company: false,\n        chainCode: false,\n        branchName: false,\n        transactionType: false,\n        boxLabel: false,\n        item: false\n      },\n      isApproved: false,\n      isCancel: false,\n      isSubmit: true,\n      hoveredRow: null,\n      uploadImageFileName: \"Choose an Image\",\n      uploadExcelFileName: \"Choose a File\",\n      transactionTypeList: [{\n        value: \"CPO Item for Disposal in the Store c/o Supervisor\",\n        label: \"CPO Item for Disposal in the Store c/o Supervisor\",\n        company: \"NBFI\"\n      }, {\n        value: \"CPO for Transfer to Another Store\",\n        label: \"CPO for Transfer to Another Store\",\n        company: \"NBFI\"\n      }, {\n        value: \"CPO Back to WH via In-House Delivery Service\",\n        label: \"CPO Back to WH via In-House Delivery Service\",\n        company: \"NBFI\"\n      }, {\n        value: \"CPO Back to WH via Chain Distribution Center\",\n        label: \"CPO Back to WH via Chain Distribution Center\",\n        company: \"NBFI\"\n      }, {\n        value: \"CPO Back to WH via 3rd Party Trucking\",\n        label: \"CPO Back to WH via 3rd Party Trucking\",\n        company: \"NBFI\"\n      }, {\n        value: \"CPO Back to WH c/o Supervisor\",\n        label: \"CPO Back to WH c/o Supervisor\",\n        company: \"NBFI\"\n      }],\n      newBoxLabel: \"\",\n      newItemInput: \"\",\n      newBrand: \"\",\n      newItemDescription: \"\",\n      newStyleCode: \"\",\n      newItemCode: \"\",\n      notifications: {\n        topCenter: false\n      },\n      modals: {\n        classic: false,\n        notice: false,\n        mini: false\n      },\n      isNewBoxLabel: false,\n      isNewItem: false,\n      isRightCode: false,\n      transferTransactionID: \"\",\n      uniqueItemss: [],\n      duplicateItemss: [],\n      isDenied: true,\n      dataArray: [],\n      myData: [],\n      counter: 0,\n      remarksList: [\"CLOSED STORE/BRANCH - GOOD ITEMS\", \"CLOSED STORE/BRANCH - DAMAGED/DIRTY ITEMS\", \"CLOSED STORE/BRANCH - DISPOSAL/CONTAINS BROKEN GLASS ITEMS\", \"REGULAR PULL-OUT - GOOD ITEMS\", \"REGULAR PULL-OUT - DAMAGED/DIRTY ITEMS\", \"REGULAR PULL-OUT - DISPOSAL/CONTAINS BROKEN GLASS ITEMS\", \"STORE TO STORE/BRANCH TO BRANCH - GOOD ITEMS\", \"STORE TO STORE/BRANCH TO BRANCH - DAMAGED/DIRTY ITEMS\", \"STORE TO STORE/BRANCH TO BRANCH - DISPOSAL/CONTAINS BROKEN GLASS ITEMS\"],\n      images: [],\n      files: [],\n      img_counter: 0,\n      strCategory: {\n        boxNumber: 0,\n        label: \"\"\n      },\n      isDraft: false,\n      barcode: \"item_16\",\n      saving_counter: null,\n      isMobile: null,\n      headerCellStyle: {\n        color: \"black\"\n      },\n      cellStyle: {\n        color: \"black\",\n        fontWeight: \"normal\"\n      },\n      tableData: [],\n      multipleSelection: [],\n      deleteItemBtn: null,\n      isNBFI: false,\n      promoName: \"\",\n      promoEmail: \"\",\n      pullOutStartDate: \"\",\n      pullOutEndDate: \"\",\n      transactionDetails: {},\n      tempRemoveItems: [],\n      toSubmit: \"\"\n    };\n  },\n  computed: {\n    filteredRemarks() {\n      return this.remarksList.filter(newBoxLabel => {\n        return newBoxLabel.toLowerCase().includes(this.newBoxLabel.toLowerCase());\n      });\n    },\n    sortedBoxes() {\n      return this.newTransaction.boxLabels.sort((a, b) => a.boxNumber - b.boxNumber);\n    },\n    getItemBoxLabel() {\n      return boxNumber => {\n        const boxLabel = this.newTransaction.boxLabels.find(label => label.boxNumber === boxNumber);\n        return boxLabel ? boxLabel.boxLabel : \"\";\n      };\n    }\n  },\n  mounted() {\n    const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n    const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));\n    let tooltipExcel = bootstrap.Tooltip.getInstance(\"#excelBtn\");\n    tooltipExcel._config.title = \"Only XLSX file with a standard Template (Column A: Box Number, Column B: Box Label, Column C: Item Code, Column D: Quantity)\";\n    tooltipExcel.update();\n    this.fetchEdit();\n    this.fetchCompany();\n    if (window.resolveRouteChange) {\n      window.resolveRouteChange();\n      window.resolveRouteChange = null;\n    }\n    linkName.val = \"Pull-Out Requisition Form\";\n    this.isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n  },\n  watch: {\n    newTransaction: {\n      handler(val) {\n        this.validateSubmit();\n      },\n      deep: true\n    },\n    \"newTransaction.items\": function (val, oldVal) {\n      this.addCategoryBoxLabel();\n      this.createTableData();\n    },\n    \"newTransaction.boxLabels\": function (val, oldVal) {\n      this.enableDropDowns();\n      this.createTableData();\n    },\n    \"newTransaction.company\": function (val, oldVal) {\n      this.showButtons();\n    },\n    \"newTransaction.chainCode\": function (val, oldVal) {\n      this.showButtons();\n    },\n    \"newTransaction.branchName\": function (val, oldVal) {\n      this.showButtons();\n    },\n    \"newTransaction.transactionType\": function (val, oldVal) {\n      this.showButtons();\n    },\n    barcode: function (val, oldVal) {\n      this.clearItemInput();\n    },\n    sortedBoxes(newSortedBoxes) {\n      Vue.set(this, \"newTransaction.boxLabels\", newSortedBoxes);\n    }\n  },\n  methods: {\n    handleLimitQuantity(row) {\n      if (row.quantity > 150) row.quantity = 150;\n    },\n    incrementQuantity(row) {\n      if (row.quantity < 150) {\n        row.quantity++;\n      } else {\n        console.log(\"Quantity limit reached (150).\");\n      }\n    },\n    tableRowClassName({\n      row,\n      rowIndex\n    }) {\n      if (row.quantity == 0) return \"warning-row\";else return \"\";\n    },\n    handleSelectAll(val) {\n      if (val.length == 0) {\n        this.multipleSelection = [];\n        this.deleteItemBtn = null;\n      } else this.deleteItemBtn = val[0].boxNumber - 1;\n      val.forEach(row => {\n        let temp = true;\n        for (let [index, mul] of this.multipleSelection.entries()) if (row.boxNumber == mul.boxNumber && row.code == mul.code) {\n          temp = false;\n          break;\n        }\n        if (temp) this.multipleSelection.push(row);\n        if (this.multipleSelection.length > 0) {\n          const selectedItemsOther = this.multipleSelection.filter(mul => mul.boxNumber !== val[0].boxNumber);\n          selectedItemsOther.forEach(rowSel => {\n            this.$refs.itemsDataTable[parseInt(rowSel.boxNumber - 1)].toggleRowSelection(rowSel);\n          });\n          const selectedItems = this.multipleSelection.filter(mul => mul.boxNumber === val[0].boxNumber);\n          if (selectedItems.length > 0) this.multipleSelection = selectedItems;\n        }\n      });\n    },\n    handleSelect(val, row) {\n      if (val.length == 0) this.deleteItemBtn = null;else this.deleteItemBtn = row.boxNumber - 1;\n      let temp = true;\n      for (let [index, mul] of this.multipleSelection.entries()) if (row.boxNumber == mul.boxNumber && row.code == mul.code) {\n        this.multipleSelection.splice(index, 1);\n        temp = false;\n        break;\n      }\n      if (temp) this.multipleSelection.push(row);\n      if (this.multipleSelection.length > 0) {\n        const selectedItemsOther = this.multipleSelection.filter(mul => mul.boxNumber !== val[0].boxNumber);\n        selectedItemsOther.forEach(rowSel => {\n          this.$refs.itemsDataTable[parseInt(rowSel.boxNumber - 1)].toggleRowSelection(rowSel);\n        });\n        const selectedItems = this.multipleSelection.filter(mul => mul.boxNumber === val[0].boxNumber);\n        if (selectedItems.length > 0) this.multipleSelection = selectedItems;\n      }\n    },\n    deleteSelectedItems() {\n      _MessageBox.confirm(\"The item/s you have selected will be remove. Continue?\", \"Removing of Items\", {\n        confirmButtonText: \"Confirm\",\n        cancelButtonText: \"Cancel\",\n        type: \"warning\"\n      }).then(() => {\n        this.multipleSelection.forEach(selected => {\n          this.removeItem(selected.code, selected.boxNumber);\n        });\n        this.deleteItemBtn = null;\n      }).catch(() => {\n        _Message({\n          type: \"info\",\n          message: \"Removing of Items canceled.\"\n        });\n      });\n    },\n    createTableData() {\n      this.tableData = [];\n      this.multipleSelection = [];\n      this.newTransaction.boxLabels.forEach((box, key) => {\n        this.tableData.push([]);\n        this.newTransaction.items.forEach(item => {\n          if (box.boxNumber == item.boxNumber) this.tableData[key].push(item);\n        });\n      });\n    },\n    reArrangeItems(deletedBoxNumber) {\n      this.newTransaction.items.forEach(temp => {\n        if (deletedBoxNumber < temp.boxNumber) temp.boxNumber--;\n      });\n    },\n    reArrangeBoxNumber(transfer) {\n      this.newTransaction.boxLabels = transfer;\n      this.newItemInputBox = [];\n      this.newTransaction.boxLabels.forEach(boxLabel => {\n        var tempIdBox = {\n          id: boxLabel.id\n        };\n        this.newItemInputBox.push(tempIdBox);\n      });\n    },\n    clearItemInput() {\n      this.newItemInput = \"\";\n      this.itemCodeList = [];\n    },\n    restrictChar($event) {\n      let keyCode = $event.keyCode ? $event.keyCode : $event.which;\n      if (keyCode == 91 || keyCode == 93) {\n        $event.preventDefault();\n      }\n    },\n    addCategoryBoxLabel() {\n      if (this.isDraft == false) {\n        this.newTransaction.boxLabels.forEach(box => {\n          var filteredItems = this.newTransaction.items.filter(item => item.boxNumber === box.boxNumber);\n          var uniqueCategory = [...new Set(filteredItems.map(item => item.categorybrand))];\n          let strCategory = \"\";\n          for (let i = 0; i < uniqueCategory.length; i++) {\n            if (i == 0) strCategory = \" [ \" + uniqueCategory[i];else strCategory = strCategory + \", \" + uniqueCategory[i];\n            if (i == uniqueCategory.length - 1) strCategory = strCategory + \" ]\";\n          }\n          let tempIndex = box.boxLabel.indexOf(\"[\");\n          if (tempIndex > 0) box.boxLabel = box.boxLabel.substr(0, tempIndex).trim();\n          box.boxLabel = box.boxLabel + strCategory;\n        });\n      }\n    },\n    filterRemarks() {\n      this.filteredRemarks = this.remarksList.filter(newBoxLabel => {\n        return newBoxLabel.toLowerCase().includes(this.newBoxLabel.toLowerCase());\n      });\n    },\n    onFileChange(e) {\n      var files = e.target.files || e.dataTransfer.files;\n      var file = e.target.files[0];\n      const maxSizeInBytes = 2 * 1024 * 1024;\n      if (file && file.size > maxSizeInBytes) {\n        _Message.error(\"Please select an image file smaller than 2MB.\");\n        e.target.value = \"\";\n        return;\n      } else {\n        this.files.push(e.target.files[0]);\n        if (!files.length) return;\n        this.createImage(files);\n        this.uploadImageFileName = e.target.files[0].name;\n      }\n    },\n    createImage(files) {\n      var vm = this;\n      for (var index = 0; index < files.length; index++) {\n        var reader = new FileReader();\n        reader.onload = function (event) {\n          const imageUrl = event.target.result;\n          vm.images.push(imageUrl);\n        };\n        reader.readAsDataURL(files[index]);\n      }\n    },\n    removeImage(confirm, index) {\n      if (confirm) {\n        if (typeof this.images[index] == \"string\") {\n          let tempPath = this.images[index].split(\"/\");\n          let removePath = tempPath[tempPath.length - 1];\n          axiosClient.post(\"/deleteImage\", {\n            company: this.newTransaction.company,\n            path: removePath\n          }).then(response => {\n            console.log(response.data);\n          }).catch(error => {\n            console.error(error);\n          });\n        }\n        this.images.splice(index, 1);\n        this.uploadImageFileName = \"Choose an Image\";\n        _Message({\n          type: \"success\",\n          message: \"Image has been removed.\"\n        });\n      }\n    },\n    clearImage() {\n      document.getElementById(\"formFile\").value = null;\n      frame.src = \"\";\n    },\n    handleFileUploadImage() {\n      const config = {\n        headers: {\n          \"content-type\": \"multipart/form-data\"\n        }\n      };\n      if (this.img_counter < this.files.length) {\n        axiosClient.post(\"/upload\", {\n          image: this.files[this.img_counter],\n          company: this.newTransaction.company,\n          branchName: this.newTransaction.branchName,\n          transactionID: this.transferTransactionID\n        }, config).then(response => {\n          this.img_counter++;\n          setTimeout(this.handleFileUploadImage, 2000);\n        }).catch(error => {\n          console.error(error);\n        });\n      }\n    },\n    handleFileUpload(event) {\n      if (event.target.files.length != 0) {\n        this.uploadExcelFileName = event.target.files[0].name;\n        const file = event.target.files[0];\n        const reader = new FileReader();\n        reader.onload = e => {\n          const data = new Uint8Array(e.target.result);\n          const workbook = XLSX.read(data, {\n            type: \"array\"\n          });\n          const worksheetName = workbook.SheetNames[0];\n          const worksheet = workbook.Sheets[worksheetName];\n          const jsonData = XLSX.utils.sheet_to_json(worksheet, {\n            header: 1\n          });\n          this.myData = jsonData;\n          let arrayBox = [];\n          for (var x = 0; x < this.myData.length; x++) {\n            this.dataArray.push(this.myData[x]);\n            arrayBox.push(this.myData[x][1]);\n          }\n          const filteredArray = arrayBox.filter((value, index, self) => {\n            return self.indexOf(value) === index;\n          });\n          let tempBoxLabel = [];\n          for (var x = 0; x < filteredArray.length; x++) {\n            tempBoxLabel = {\n              id: x + 1,\n              boxNumber: x + 1,\n              boxLabel: filteredArray[x]\n            };\n            this.newTransaction.boxLabels.push(tempBoxLabel);\n            let tempItem = [];\n            if (this.newTransaction.boxLabels.length == 0) {\n              tempItem = {\n                id: this.newTransaction.boxLabels.length + 1\n              };\n            } else {\n              tempItem = {\n                id: this.newTransaction.boxLabels[this.newTransaction.boxLabels.length - 1].id + 1\n              };\n            }\n            this.newItemInputBox.push(tempItem);\n          }\n          this.counter = 0;\n          this.saveItemsExcel();\n        };\n        reader.readAsArrayBuffer(file);\n      }\n    },\n    saveItemsExcel() {\n      let loadingInstance = _Loading.service({\n        fullscreen: true,\n        lock: true,\n        text: \"Loading\",\n        spinner: \"el-icon-loading\",\n        background: \"rgba(255,0,0,0.3)\"\n      });\n      if (this.counter < this.dataArray.length) {\n        var boxNumber = this.dataArray[this.counter][0];\n        var quantity = this.dataArray[this.counter][3];\n        axiosClient.get(\"/fetchSameItems\", {\n          params: {\n            company: this.newTransaction.company,\n            ItemNo: this.dataArray[this.counter][2]\n          }\n        }).then(response => {\n          if (response.data.length == 0) {\n            setTimeout(this.saveItemsExcel, 2000);\n          }\n          for (var x = 0; x < response.data.length; x++) {\n            var flag = true;\n            for (var i = 0; i < this.newTransaction.items.length; i++) {\n              if (this.newTransaction.items[i].code == response.data[x].ItemNo && this.newTransaction.items[i].boxNumber == boxNumber) {\n                this.newTransaction.items[i].quantity = parseInt(this.newTransaction.items[x].quantity) + 1;\n                flag = false;\n                break;\n              }\n            }\n            if (flag) {\n              let tempItem = {\n                code: response.data[x].ItemNo,\n                description: response.data[x].ItemDescription,\n                categorybrand: response.data[x].brandNames,\n                quantity: quantity,\n                size: response.data[x].Size,\n                color: response.data[x].Color,\n                boxNumber: parseInt(boxNumber),\n                category: response.data[x].Category\n              };\n              this.newTransaction.items.push(tempItem);\n            }\n            this.isAddItem = true;\n            this.notifyVue(\"AddItem\", \"bottom\", \"right\");\n            setTimeout(this.saveItemsExcel, 2000);\n          }\n        }).catch(error => {\n          console.error(error);\n        });\n      } else {\n        this.draft(true);\n        loadingInstance.close();\n      }\n      this.counter++;\n    },\n    onPaste(event) {\n      event.preventDefault();\n    },\n    numberOnly($event) {\n      console.log(\"Number Only:\", $event);\n      let keyCode = $event.keyCode ? $event.keyCode : $event.which;\n      if (keyCode < 48 || keyCode > 57) {\n        $event.preventDefault();\n      }\n    },\n    validateSubmit() {\n      let uniqueItems = [...new Set(this.newTransaction.items.map(item => item.boxNumber))];\n      let itemsValidation = false;\n      let itemsValidationTemp = false;\n      for (let j in this.newTransaction.boxLabels) {\n        for (let i in uniqueItems) {\n          if (uniqueItems[i] == this.newTransaction.boxLabels[j].id) {\n            itemsValidationTemp = true;\n            itemsValidation = true;\n            break;\n          } else {\n            itemsValidation = false;\n            itemsValidationTemp = false;\n          }\n        }\n      }\n      for (let x in this.newTransaction.items) {\n        if (this.newTransaction.items[x].quantity == 0) {\n          itemsValidation = false;\n          const submitTooltip = document.getElementById(\"submitBTN\");\n          const tooltip = new bootstrap.Tooltip(submitTooltip, {\n            title: \"No items should have a quantity of 0.\"\n          });\n          tooltip.update();\n          break;\n        }\n      }\n      if (!itemsValidationTemp) {\n        const submitTooltip = document.getElementById(\"submitBTN\");\n        const tooltip = new bootstrap.Tooltip(submitTooltip, {\n          title: \"Kindly add item/s on every boxes you've added.\"\n        });\n        tooltip.update();\n      }\n      if (!this.newTransaction.company || !this.newTransaction.chainCode || !this.newTransaction.branchName || !this.newTransaction.transactionType) {\n        const submitTooltip = document.getElementById(\"submitBTN\");\n        const tooltip = new bootstrap.Tooltip(submitTooltip, {\n          title: \"Complete the form above to enable this button.\"\n        });\n        tooltip.update();\n        const draftTooltip = document.getElementById(\"draftBTN\");\n        const tooltipDraft = new bootstrap.Tooltip(draftTooltip, {\n          title: \"Complete the form above to enable this button.\"\n        });\n        tooltipDraft.update();\n      } else if (this.newTransaction.boxLabels.length <= 0) {\n        const submitTooltip = document.getElementById(\"submitBTN\");\n        const tooltip = new bootstrap.Tooltip(submitTooltip, {\n          title: \"No box added. Kindly add box/es to be able to add item/s.\"\n        });\n        tooltip.update();\n      } else if (this.newTransaction.items.length <= 0) {\n        const submitTooltip = document.getElementById(\"submitBTN\");\n        const tooltip = new bootstrap.Tooltip(submitTooltip, {\n          title: \"No items added. Kindly add item/s for this pull-out request.\"\n        });\n        tooltip.update();\n      }\n      if (this.newTransaction.company && this.newTransaction.chainCode && this.newTransaction.branchName && this.newTransaction.transactionType && this.newTransaction.boxLabels.length > 0 && itemsValidation) {\n        this.isDisabledSubmit = false;\n        let tooltip = bootstrap.Tooltip.getInstance(\"#submitBTN\");\n        tooltip.disable();\n      } else this.isDisabledSubmit = true;\n      if (this.newTransaction.company && this.newTransaction.chainCode && this.newTransaction.branchName && this.newTransaction.transactionType) {\n        this.isDisabledDraft = false;\n        let tooltip = bootstrap.Tooltip.getInstance(\"#draftBTN\");\n        tooltip.disable();\n      } else this.isDisabledDraft = true;\n    },\n    editingBoxLabel({\n      index,\n      value,\n      tempBL\n    }) {\n      if (value) this.newTransaction.boxLabels[index].boxLabel = value;else this.newTransaction.boxLabels[index].boxLabel = tempBL;\n    },\n    enableDropDowns() {\n      if (this.newTransaction.boxLabels.length == 0) {\n        this.isCompany = false;\n        this.isChainCode = false;\n        this.isBranchName = false;\n        this.isTransactionType = false;\n        this.isEditBLDisabled = true;\n      } else this.isEditBLDisabled = false;\n    },\n    showButtons() {\n      if (this.newTransaction.company && this.newTransaction.chainCode && this.newTransaction.branchName && this.newTransaction.transactionType) {\n        this.isShowButton = true;\n        if (this.newTransaction.boxLabels.length == 0) this.isEditBLDisabled = true;else this.isEditBLDisabled = false;\n      } else this.isShowButton = false;\n    },\n    fetchEdit() {\n      try {\n        const uri = window.location.href;\n        var transactionID = uri.split(\"?\")[1];\n        var id = transactionID.split(\"=\")[1].split(\"&\")[0];\n        var company = this.decodeFromAlphanumeric(transactionID.split(\"=\")[2]);\n        this.isDraft = true;\n        this.transferTransactionID = id;\n        axiosClient.get(\"/fetchEditDraftBranch\", {\n          params: {\n            company: company,\n            plID: id\n          }\n        }).then(response => {\n          this.newTransaction.company = response.data[0].company;\n          this.newTransaction.branchName = response.data[0].branchName;\n          this.newTransaction.chainCode = response.data[0].chainCode;\n          this.newTransaction.transactionType = response.data[0].transactionType;\n          this.promoName = response.data[0].name;\n          this.promoEmail = response.data[0].promoEmail;\n          this.pullOutStartDate = response.data[0].dateStart;\n          this.pullOutEndDate = response.data[0].dateEnd;\n          if (response.data[0].status == \"denied\" || response.data[0].status == \"endorsement\" || response.data[0].status == \"unprocessed\") {\n            this.isDenied = false;\n            this.isCancel = true;\n            this.isApproved = true;\n            this.isSubmit = false;\n          } else {\n            this.isDenied = true;\n            this.isCancel = false;\n          }\n          axiosClient.get(\"/fetchEditDraftItem\", {\n            params: {\n              company: company,\n              plID: id\n            }\n          }).then(response => {\n            for (var x = 0; x < response.data.length; x++) {\n              this.newTransaction.items.push(response.data[x]);\n            }\n            const filteredData = this.newTransaction.items.filter((obj, index, self) => {\n              const boxNumber = obj.boxNumber;\n              return self.findIndex(o => o.boxNumber === boxNumber) === index;\n            });\n            const boxData = filteredData.map(obj => {\n              return {\n                boxLabel: obj.boxLabel,\n                boxNumber: obj.boxNumber\n              };\n            });\n            for (var x = 0; x < boxData.length; x++) {\n              this.newTransaction.boxLabels.push({\n                id: boxData[x].boxNumber,\n                boxNumber: boxData[x].boxNumber,\n                boxLabel: boxData[x].boxLabel\n              });\n              this.newItemInputBox.push({\n                id: boxData[x].boxNumber\n              });\n            }\n            if (this.newTransaction.company) {\n              this.isCompany = false;\n              this.isChainCode = false;\n              this.fetchCompany();\n              this.fetchChainCode();\n            }\n            if (this.newTransaction.chainCode) {\n              this.isChainCode = false;\n              this.isBranchName = false;\n              this.fetchChainName();\n              this.fetchChainCode();\n            }\n            if (this.newTransaction.branchName) {\n              this.isBranchName = false;\n              this.isTransactionType = false;\n              this.fetchChainName();\n            }\n            if (this.newTransaction.transactionType) {\n              this.isCompany = false;\n              this.isChainCode = false;\n              this.isBranchName = false;\n              this.isTransactionType = false;\n            }\n            if (this.newTransaction.items.length) {\n              this.isCompany = true;\n              this.isChainCode = true;\n              this.isBranchName = true;\n              this.isTransactionType = true;\n            }\n          }).catch(error => {\n            console.error(error);\n          });\n          axiosClient.get(\"/fetchImageBranchDoc\", {\n            params: {\n              transactionID: id,\n              company: company\n            }\n          }).then(response => {\n            this.images = response.data.imagePaths;\n          }).catch(error => {\n            console.error(error);\n          });\n        }).catch(error => {\n          console.error(error);\n        });\n      } catch {\n        axiosClient.get(\"/fetchPromoBranchInfo\", {\n          params: {\n            userID: sessionStorage.getItem(\"UserID\")\n          }\n        }).then(response => {\n          this.newTransaction.company = response.data[0].company;\n          this.newTransaction.chainCode = response.data[0].chainCode;\n          this.newTransaction.branchName = response.data[0].branchName;\n          this.fetchChainCode();\n          this.fetchChainName();\n        }).catch(error => {});\n      }\n    },\n    cancelTransaction() {\n      if (sessionStorage.getItem(\"Position\") == \"Reviewer\" || sessionStorage.getItem(\"Position\") == \"Approver\") this.$router.push({\n        path: \"/pull-out/requests\"\n      });else this.$router.push({\n        path: \"/pull-out/pullout-transaction\"\n      });\n    },\n    updateData(updatedData) {},\n    openModal(data) {\n      data.boxLabels.forEach(box => {\n        let tempIndex = box.boxLabel.indexOf(\"[\");\n        if (tempIndex > 0) box.boxLabel = box.boxLabel.substr(0, tempIndex).trim();\n      });\n      this.transferredData = data;\n    },\n    closeModal() {\n      this.addCategoryBoxLabel();\n      this.transferredData = \"\";\n    },\n    showButton(itemId) {\n      this.hoveredRow = itemId;\n    },\n    hideButton(itemId) {\n      this.hoveredRow = null;\n    },\n    removeItem(code, boxNumber) {\n      this.validateSubmit();\n      for (let key in this.newTransaction.items) {\n        if (this.newTransaction.items[key].code === code && this.newTransaction.items[key].boxNumber === boxNumber) {\n          try {\n            this.tempRemoveItems.push(this.newTransaction.items[key].id);\n            const uri = window.location.href;\n            var transactionID = uri.split(\"?\")[1];\n            var id = transactionID.split(\"=\")[1].split(\"&\")[0];\n            var company = transactionID.split(\"=\")[2];\n            axiosClient.post(\"/logsDeleteItemEdit\", {\n              id: id,\n              itemCode: this.newTransaction.items[key].code,\n              boxNumber: this.newTransaction.items[key].boxNumber,\n              userID: sessionStorage.getItem(\"UserID\")\n            }).then(response => {}).catch(error => {\n              console.error(error);\n            });\n          } catch {}\n          this.newTransaction.items.splice(key, 1);\n          break;\n        }\n      }\n      this.notifyVue(\"DeleteItem\", \"bottom\", \"right\");\n    },\n    fetchItems() {\n      if (this.newItemInput.length >= 4) {\n        if (this.newTransaction.company == \"NBFI\" || this.newTransaction.company == \"CMC\" || this.newTransaction.company == \"ASC\") {\n          axiosClient.get(\"/fetchItemsNBFI\", {\n            params: {\n              ItemNo: this.newItemInput,\n              barcode: this.barcode\n            }\n          }).then(response => {\n            this.itemCodeList = response.data;\n          }).catch(error => {});\n        } else {\n          axiosClient.get(\"/fetchItems\", {\n            params: {\n              ItemNo: this.newItemInput\n            }\n          }).then(response => {\n            this.itemCodeList = response.data;\n          }).catch(error => {});\n        }\n      } else if (this.newItemInput.length == 0) this.itemCodeList = [];\n    },\n    compareItemCode() {\n      let value = this.newItemInput;\n      if (value.indexOf(\" - \") >= 0) {\n        let parts = value.split(\" - \");\n        this.newItemInput = parts[0];\n      }\n    },\n    handleQuantity(item) {\n      if (!item.quantity) {\n        item.quantity = 0;\n      }\n      item.quantity = Math.min(Math.max(item.quantity, 0), 150);\n      this.notifyVue(\"ItemQuantity\", \"bottom\", \"right\");\n    },\n    notifyVue(notify, verticalAlign, horizontalAlign) {\n      var notification = \"\";\n      let notifType = \"\";\n      if (notify === \"AddBoxLabel\") {\n        notification = NotifAddBoxLabel;\n        notifType = \"success\";\n      } else if (notify === \"AddItem\") {\n        notification = NotifAddItem;\n        notifType = \"success\";\n      } else if (notify === \"DeleteBoxLabel\") {\n        notification = NotifDeleteBoxLabel;\n        notifType = \"danger\";\n      } else if (notify === \"DeleteItem\") {\n        notification = NotifDeleteItem;\n        notifType = \"danger\";\n      } else if (notify === \"DraftSave\") {\n        notification = NotifDraftSave;\n        notifType = \"success\";\n      } else if (notify === \"ChangeBoxLabel\") {\n        notification = NotifItemChangeBoxLabel;\n        notifType = \"success\";\n      } else if (notify === \"ItemQuantity\") {\n        notification = NotifItemQuantity;\n        notifType = \"success\";\n      } else if (notify === \"RenameBoxLabel\") {\n        notification = NotifRenameBoxLabel;\n        notifType = \"success\";\n      } else {\n        notification = NotifSubmitTransaction;\n        notifType = \"success\";\n      }\n      this.$notify({\n        component: notification,\n        horizontalAlign: horizontalAlign,\n        verticalAlign: verticalAlign,\n        type: notifType,\n        props: {\n          customValue: \"Success\"\n        }\n      });\n    },\n    fetchCompany() {\n      if (\"User\" != sessionStorage.getItem(\"Position\")) axiosClient.get(\"/fetchCompany\").then(response => {\n        this.companyList = response.data;\n      }).catch(error => {\n        console.error(error);\n      });else axiosClient.get(\"/fetchCompanyByUser\", {\n        params: {\n          userID: sessionStorage.getItem(\"UserID\")\n        }\n      }).then(response => {\n        this.companyList = response.data;\n      }).catch(error => {\n        console.error(error);\n      });\n      var company = sessionStorage.getItem(\"Company\");\n      if (company == \"NBFI\" || company == \"ASC\" || company == \"CMC\") this.showCategoryBrand = true;else this.showCategoryBrand = false;\n    },\n    fetchChainCode() {\n      if (this.newTransaction.company == \"NBFI\" || this.newTransaction.company == \"CMC\" || this.newTransaction.company == \"ASC\") this.isNBFI = true;else this.isNBFI = false;\n      if (\"User\" == sessionStorage.getItem(\"Position\")) axiosClient.get(\"/fetchChainByUser\", {\n        params: {\n          company: this.newTransaction.company,\n          userID: sessionStorage.getItem(\"UserID\")\n        }\n      }).then(response => {\n        this.chainCodeList = response.data;\n      }).catch(error => {\n        console.error(error);\n      });else axiosClient.get(\"/fetchChain\", {\n        params: {\n          company: this.newTransaction.company\n        }\n      }).then(response => {\n        this.chainCodeList = response.data;\n      }).catch(error => {\n        console.error(error);\n      });\n      this.isChainCode = false;\n    },\n    fetchChainName() {\n      if (\"User\" == sessionStorage.getItem(\"Position\")) axiosClient.get(\"/fetchChainNameByUser\", {\n        params: {\n          chainCode: this.newTransaction.chainCode,\n          userID: sessionStorage.getItem(\"UserID\")\n        }\n      }).then(response => {\n        this.branchNameList = response.data;\n      }).catch(error => {\n        console.error(error);\n      });else {\n        axiosClient.get(\"/fetchChainName\", {\n          params: {\n            chainCode: this.newTransaction.chainCode,\n            company: this.newTransaction.company\n          }\n        }).then(response => {\n          this.branchNameList = response.data;\n        }).catch(error => {\n          console.error(error);\n        });\n        this.isBranchName = false;\n      }\n    },\n    addItem(boxNUMBER) {\n      this.isItem = false;\n      this.isAddItem = false;\n      this.showItemInput = boxNUMBER;\n    },\n    saveItem(boxNUMBER) {\n      console.log(\"ItemCode:\", this.newItemInput);\n      if (this.barcode == \"item_16\") {\n        if (this.newItemInput.length > 16) this.newItemInput = this.newItemInput.slice(0, 16);\n      } else {\n        this.newItemInput = this.newItemInput.slice(0, 12);\n      }\n      if (this.barcode == \"item_12\") {\n        axiosClient.get(\"/fetchItemsBarcode\", {\n          params: {\n            ItemNo: this.newItemInput,\n            company: this.newTransaction.company\n          }\n        }).then(response => {\n          this.newItemInput = response.data[0].ItemNo;\n        }).catch(error => {\n          console.error(error);\n        });\n      }\n      var checkItemData = true;\n      setTimeout(() => {\n        axiosClient.get(\"/compareItemCode\", {\n          params: {\n            companyType: this.newTransaction.company,\n            ItemNo: this.newItemInput\n          }\n        }).then(response => {\n          if (response.data.length == 0) {\n            checkItemData = false;\n          }\n          this.newItemCode = response.data[0].ItemNo;\n          this.newItemDescription = response.data[0].ItemDescription;\n          this.newStyleCode = response.data[0].StyleCode;\n          let brandCode = response.data[0].ItemNo.toString().substr(1, 2);\n          axiosClient.get(\"/fetchBrands\", {\n            params: {\n              companyType: this.newTransaction.company,\n              brandCode: brandCode\n            }\n          }).then(response => {\n            this.newBrand = response.data[0].brandNames;\n          }).catch(error => {\n            console.error(error);\n          });\n        }).catch(error => {\n          this.missItemCode = 0;\n          !this.newItemInput ? true : this.isRightCode = true;\n        });\n      }, 300);\n      var newResponseData;\n      setTimeout(() => {\n        if (checkItemData) {\n          let confirmSave = false;\n          this.isNewItem = !this.newItemInput ? true : false;\n          if (this.isNewItem) {\n            this.isRightCode = false;\n            return 0;\n          }\n          axiosClient.get(\"/fetchSameItem\", {\n            params: {\n              company: this.newTransaction.company,\n              ItemCode: this.newItemCode,\n              ItemDescription: this.newItemDescription,\n              StyleCode: this.newStyleCode\n            }\n          }).then(response => {\n            newResponseData = response.data;\n            console.log(\"Fetch Same Item:\", response.data);\n          }).catch(error => {});\n        }\n      }, 500);\n      setTimeout(() => {\n        if (checkItemData) {\n          for (var x = 0; x < newResponseData.length; x++) {\n            var flag = true;\n            for (var i = 0; i < this.newTransaction.items.length; i++) {\n              if (this.newTransaction.items[i].code == newResponseData[x].ItemNo && this.newTransaction.items[i].boxNumber == boxNUMBER) {\n                flag = false;\n                break;\n              }\n            }\n            if (flag) {\n              if (this.newTransaction.company == \"NBFI\" || this.newTransaction.company == \"CMC\" || this.newTransaction.company == \"ASC\") {\n                var categorybrand = this.newBrand;\n              } else {\n                var categorybrand = newResponseData[x].Category;\n              }\n              let tempItem = {\n                code: newResponseData[x].ItemNo,\n                description: newResponseData[x].ItemDescription,\n                categorybrand: categorybrand,\n                quantity: 0,\n                size: newResponseData[x].Size,\n                color: newResponseData[x].Color,\n                boxNumber: boxNUMBER,\n                category: newResponseData[x].Category\n              };\n              this.newTransaction.items.push(tempItem);\n            }\n            this.isRightCode = false;\n            this.isItem = false;\n            this.isAddItem = true;\n            this.newItemInput = \"\";\n            this.showItemInput = \"\";\n            this.notifyVue(\"AddItem\", \"bottom\", \"right\");\n          }\n        }\n      }, 1000);\n    },\n    cancelItem() {\n      this.isRightCode = false;\n      this.isNewItem = false;\n      this.isItem = false;\n      this.isAddItem = true;\n      this.showItemInput = \"\";\n      this.newItemInput = \"\";\n    },\n    addBoxLabel() {\n      this.isBoxLabel = true;\n      this.isEditBLDisabled = true;\n    },\n    saveBoxLabel() {\n      this.isNewBoxLabel = !this.newBoxLabel ? true : false;\n      if (this.isNewBoxLabel) {\n        return 0;\n      }\n      this.isBoxLabel = false;\n      let tempBoxLabel = [];\n      if (this.newTransaction.boxLabels.length == 0) {\n        tempBoxLabel = {\n          id: this.newTransaction.boxLabels.length + 1,\n          boxNumber: this.newTransaction.boxLabels.length + 1,\n          boxLabel: this.newBoxLabel\n        };\n      } else {\n        tempBoxLabel = {\n          id: parseInt(this.newTransaction.boxLabels[this.newTransaction.boxLabels.length - 1].id) + 1,\n          boxNumber: this.newTransaction.boxLabels.length + 1,\n          boxLabel: this.newBoxLabel\n        };\n      }\n      let tempItem = [];\n      if (this.newTransaction.boxLabels.length == 0) {\n        tempItem = {\n          id: this.newTransaction.boxLabels.length + 1\n        };\n      } else {\n        tempItem = {\n          id: parseInt(this.newTransaction.boxLabels[this.newTransaction.boxLabels.length - 1].id) + 1\n        };\n      }\n      this.newTransaction.boxLabels.push(tempBoxLabel);\n      this.newItemInputBox.push(tempItem);\n      this.newBoxLabel = \"\";\n      this.isCompany = true;\n      this.isChainCode = true;\n      this.isBranchName = true;\n      this.isTransactionType = true;\n      this.notifyVue(\"AddBoxLabel\", \"bottom\", \"right\");\n      this.isEditBLDisabled = false;\n    },\n    cancelBoxLabel() {\n      this.isNewBoxLabel = false;\n      this.isBoxLabel = false;\n      this.newBoxLabel = \"\";\n      if (this.newTransaction.boxLabels.length == 0) this.isEditBLDisabled = true;else this.isEditBLDisabled = false;\n    },\n    async submit(confirmation) {\n      if (confirmation) {\n        try {\n          const uri = window.location.href;\n          var transactionID = uri.split(\"?\")[1];\n          var id = transactionID.split(\"=\")[1].split(\"&\")[0];\n          this.isValid.company = !this.newTransaction.company ? true : false;\n          this.isValid.chainCode = !this.newTransaction.chainCode ? true : false;\n          this.isValid.branchName = !this.newTransaction.branchName ? true : false;\n          this.isValid.transactionType = !this.newTransaction.transactionType ? true : false;\n          this.isValid.boxLabel = !this.newTransaction.boxLabels.length ? true : false;\n          this.isValid.item = !this.newTransaction.items.length ? true : false;\n          this.transactionDetails = this.newTransaction;\n          this.toSubmit = \"update\";\n          console.log(\"Transaction Details 1:\", this.transactionDetails);\n          this.transferTransactionID = id;\n          const submitdatemodal = new bootstrap.Modal(\"#submiteditauthorizeddatemodal\");\n          submitdatemodal.show();\n        } catch {\n          this.isValid.company = !this.newTransaction.company ? true : false;\n          this.isValid.chainCode = !this.newTransaction.chainCode ? true : false;\n          this.isValid.branchName = !this.newTransaction.branchName ? true : false;\n          this.isValid.transactionType = !this.newTransaction.transactionType ? true : false;\n          this.isValid.boxLabel = !this.newTransaction.boxLabels.length ? true : false;\n          this.isValid.item = !this.newTransaction.items.length ? true : false;\n          this.transactionDetails = {\n            chainCode: this.newTransaction.chainCode,\n            companyType: this.newTransaction.company,\n            branchName: this.newTransaction.branchName,\n            transactionType: this.newTransaction.transactionType,\n            boxes: this.newTransaction.boxLabels,\n            items: this.newTransaction.items,\n            email: sessionStorage.getItem(\"Email\"),\n            status: \"endorsement\"\n          };\n          var id = await axiosClient.get(\"/getLastID\", {\n            params: {\n              company: sessionStorage.getItem(\"Company\")\n            }\n          });\n          console.log(\"Last ID:\", id.data);\n          this.transferTransactionID = id.data;\n          this.toSubmit = \"save\";\n          const submitdatemodal = new bootstrap.Modal(\"#submiteditauthorizeddatemodal\");\n          submitdatemodal.show();\n        }\n        this.saving_counter = this.files.length * 2;\n        setTimeout(this.handleFileUploadImage, 2000);\n      }\n    },\n    async draft(confirmation) {\n      if (confirmation) {\n        try {\n          const uri = window.location.href;\n          var transactionID = uri.split(\"?\")[1];\n          var id = transactionID.split(\"=\")[1].split(\"&\")[0];\n          const updateBranch = await axiosClient.post(\"/updateBranchStatus\", {\n            userID: sessionStorage.getItem(\"UserID\"),\n            company: sessionStorage.getItem(\"Company\"),\n            status: \"draft\",\n            id: this.transferTransactionID,\n            email: sessionStorage.getItem(\"Email\"),\n            transactionData: this.transactionDetails,\n            removedItems: this.tempRemoveItems,\n            editStatus: true\n          });\n          const draftModal = new bootstrap.Modal(\"#draftModal\");\n          draftModal.show();\n        } catch {\n          console.log(\"Transactions:\", this.newTransaction);\n          var response = await axiosClient.post(\"/savePullOutBranchRequest\", {\n            chainCode: this.newTransaction.chainCode,\n            companyType: this.newTransaction.company,\n            branchName: this.newTransaction.branchName,\n            transactionType: this.newTransaction.transactionType,\n            boxes: this.newTransaction.boxLabels,\n            items: this.newTransaction.items,\n            email: sessionStorage.getItem(\"Email\"),\n            status: \"draft\"\n          });\n          this.transferTransactionID = response.data;\n          const draftModal = new bootstrap.Modal(\"#draftModal\");\n          draftModal.show();\n        }\n        this.saving_counter = this.files.length * 2;\n        setTimeout(this.handleFileUploadImage, 2000);\n      }\n    },\n    editBoxLabel(code, quantity, boxNumber) {\n      this.validateSubmit();\n      var filteredItems = this.newTransaction.items.filter(item => item.code === code && item.boxNumber === boxNumber);\n      var uniqueItems = [];\n      filteredItems.forEach(item => {\n        var existingItem = uniqueItems.find(uniqueItem => uniqueItem.code === item.code);\n        if (existingItem) {\n          if (existingItem.quantity == 0 && item.quantity == 0) existingItem.quantity = 1;else existingItem.quantity += item.quantity;\n        } else {\n          uniqueItems.push({\n            ...item\n          });\n        }\n      });\n      this.newTransaction.items = this.newTransaction.items.filter(item => item.code !== uniqueItems[0].code || item.boxNumber !== uniqueItems[0].boxNumber);\n      this.newTransaction.items.push(uniqueItems[0]);\n      this.notifyVue(\"ChangeBoxLabel\", \"bottom\", \"right\");\n    },\n    decodeFromAlphanumeric(input) {\n      let result = \"\";\n      for (let i = 0; i < input.length; i += 2) {\n        const alphanumericChar = input.substr(i, 2);\n        const charCode = parseInt(alphanumericChar, 36);\n        result += String.fromCharCode(charCode);\n      }\n      return result;\n    }\n  }\n};","map":{"version":3,"names":["Collapse","CollapseItem","Tabs","TabPane","Card","PProgress","PSwitch","PButton","Vue","NotificationTemplate","NotifAddBoxLabel","NotifAddItem","NotifDeleteBoxLabel","NotifDeleteItem","NotifDraftSave","NotifItemChangeBoxLabel","NotifItemQuantity","NotifRenameBoxLabel","NotifSubmitTransaction","SubmitEditAuthorizedDateModal","Swal","axiosClient","EditBoxLabelModal","TransactionReceiptModal","EditSubmitTransactionReceiptModal","DraftModal","linkName","ConfirmationSubmitPullOutModal","ConfirmationDraftPullOutModal","XLSX","axios","use","_Table","_TableColumn","_Popconfirm","_Button","components","_DatePicker","name","_TimeSelect","_Slider","_Tag","_Input","_Option","_Select","data","isDisabledDraft","showCategoryBrand","showUploadImage","transferredData","isCompany","isChainCode","isBranchName","isTransactionType","isShowButton","itemCodeList","isEditBLDisabled","isBoxLabel","isItem","isAddItem","isDisabledSubmit","showItemInput","companyList","chainCodeList","branchNameList","newTransaction","company","chainCode","branchName","transactionType","boxLabels","items","newItemInputBox","isValid","boxLabel","item","isApproved","isCancel","isSubmit","hoveredRow","uploadImageFileName","uploadExcelFileName","transactionTypeList","value","label","newBoxLabel","newItemInput","newBrand","newItemDescription","newStyleCode","newItemCode","notifications","topCenter","modals","classic","notice","mini","isNewBoxLabel","isNewItem","isRightCode","transferTransactionID","uniqueItemss","duplicateItemss","isDenied","dataArray","myData","counter","remarksList","images","files","img_counter","strCategory","boxNumber","isDraft","barcode","saving_counter","isMobile","headerCellStyle","color","cellStyle","fontWeight","tableData","multipleSelection","deleteItemBtn","isNBFI","promoName","promoEmail","pullOutStartDate","pullOutEndDate","transactionDetails","tempRemoveItems","toSubmit","computed","filteredRemarks","filter","toLowerCase","includes","sortedBoxes","sort","a","b","getItemBoxLabel","find","mounted","tooltipTriggerList","document","querySelectorAll","tooltipList","map","tooltipTriggerEl","bootstrap","Tooltip","tooltipExcel","getInstance","_config","title","update","fetchEdit","fetchCompany","window","resolveRouteChange","val","test","navigator","userAgent","watch","handler","validateSubmit","deep","newTransaction.items","oldVal","addCategoryBoxLabel","createTableData","newTransaction.boxLabels","enableDropDowns","newTransaction.company","showButtons","newTransaction.chainCode","newTransaction.branchName","newTransaction.transactionType","clearItemInput","newSortedBoxes","set","methods","handleLimitQuantity","row","quantity","incrementQuantity","console","log","tableRowClassName","rowIndex","handleSelectAll","length","forEach","temp","index","mul","entries","code","push","selectedItemsOther","rowSel","$refs","itemsDataTable","parseInt","toggleRowSelection","selectedItems","handleSelect","splice","deleteSelectedItems","_MessageBox","confirm","confirmButtonText","cancelButtonText","type","then","selected","removeItem","catch","_Message","message","box","key","reArrangeItems","deletedBoxNumber","reArrangeBoxNumber","transfer","tempIdBox","id","restrictChar","$event","keyCode","which","preventDefault","filteredItems","uniqueCategory","Set","categorybrand","i","tempIndex","indexOf","substr","trim","filterRemarks","onFileChange","e","target","dataTransfer","file","maxSizeInBytes","size","error","createImage","vm","reader","FileReader","onload","event","imageUrl","result","readAsDataURL","removeImage","tempPath","split","removePath","post","path","response","clearImage","getElementById","frame","src","handleFileUploadImage","config","headers","image","transactionID","setTimeout","handleFileUpload","Uint8Array","workbook","read","worksheetName","SheetNames","worksheet","Sheets","jsonData","utils","sheet_to_json","header","arrayBox","x","filteredArray","self","tempBoxLabel","tempItem","saveItemsExcel","readAsArrayBuffer","loadingInstance","_Loading","service","fullscreen","lock","text","spinner","background","get","params","ItemNo","flag","description","ItemDescription","brandNames","Size","Color","category","Category","notifyVue","draft","close","onPaste","numberOnly","uniqueItems","itemsValidation","itemsValidationTemp","j","submitTooltip","tooltip","draftTooltip","tooltipDraft","disable","editingBoxLabel","tempBL","uri","location","href","decodeFromAlphanumeric","plID","dateStart","dateEnd","status","filteredData","obj","findIndex","o","boxData","fetchChainCode","fetchChainName","imagePaths","userID","sessionStorage","getItem","cancelTransaction","$router","updateData","updatedData","openModal","closeModal","showButton","itemId","hideButton","itemCode","fetchItems","compareItemCode","parts","handleQuantity","Math","min","max","notify","verticalAlign","horizontalAlign","notification","notifType","$notify","component","props","customValue","addItem","boxNUMBER","saveItem","slice","checkItemData","companyType","StyleCode","brandCode","toString","missItemCode","newResponseData","confirmSave","ItemCode","cancelItem","addBoxLabel","saveBoxLabel","cancelBoxLabel","submit","confirmation","submitdatemodal","Modal","show","boxes","email","updateBranch","transactionData","removedItems","editStatus","draftModal","editBoxLabel","existingItem","uniqueItem","input","alphanumericChar","charCode","String","fromCharCode"],"sources":["src/components/Dashboard/Views/PullOut/PullOutGenerator.vue"],"sourcesContent":["<template>\n  <div class=\"card card-generator\">\n    <div class=\"card-body\">\n      <div class=\"row\">\n        <div class=\"col-sm-3\">\n          <fg-input label=\"Company\" :disabled=\"isCompany\">\n            <el-select\n              class=\"select-default\"\n              size=\"large\"\n              placeholder=\"Select Company\"\n              v-model=\"newTransaction.company\"\n              @change=\"\n                fetchChainCode(),\n                  (newTransaction.chainCode = ''),\n                  (newTransaction.branchName = ''),\n                  (newTransaction.transactionType = '')\n              \"\n              :disabled=\"isCompany\"\n            >\n              <el-option\n                v-for=\"option in companyList\"\n                class=\"select-default\"\n                :value=\"option.shortName\"\n                :label=\"option.name + ' (' + option.shortName + ') '\"\n                :key=\"option.id\"\n              >\n              </el-option>\n            </el-select>\n            <label v-show=\"isValid.company\" class=\"label-font\"\n              >Company is required.</label\n            >\n          </fg-input>\n        </div>\n        <div class=\"col-sm-3\">\n          <fg-input label=\"Chain Name\" :disabled=\"isChainCode\">\n            <el-select\n              class=\"select-default\"\n              size=\"large\"\n              placeholder=\"Select Chain Name\"\n              v-model=\"newTransaction.chainCode\"\n              @change=\"\n                fetchChainName(),\n                  (newTransaction.branchName = ''),\n                  (newTransaction.transactionType = '')\n              \"\n              :disabled=\"isChainCode\"\n            >\n              <el-option\n                v-for=\"option in chainCodeList\"\n                class=\"select-default\"\n                :value=\"option.chainCode\"\n                :label=\"option.chainCode\"\n                :key=\"option.chainCode\"\n              >\n              </el-option>\n            </el-select>\n            <label v-show=\"isValid.chainCode\" class=\"label-font\"\n              >Chain Name is required.</label\n            >\n          </fg-input>\n        </div>\n        <div class=\"col-sm-3\">\n          <fg-input label=\"Branch Name\" :disabled=\"isBranchName\">\n            <el-select\n              class=\"select-default\"\n              size=\"large\"\n              placeholder=\"Select Branch Name\"\n              v-model=\"newTransaction.branchName\"\n              @change=\"(isTransactionType = false), (newTransaction.transactionType = '')\"\n              :disabled=\"isBranchName\"\n            >\n              <el-option\n                v-for=\"option in branchNameList\"\n                class=\"select-default\"\n                :value=\"option.branchName\"\n                :label=\"option.branchName\"\n                :key=\"option.branchName\"\n              >\n              </el-option>\n            </el-select>\n            <label v-show=\"isValid.branchName\" class=\"label-font\"\n              >Branch Name is required.</label\n            >\n          </fg-input>\n        </div>\n        <div class=\"col-sm-3\">\n          <fg-input label=\"Transaction Type\" :disabled=\"isTransactionType\">\n            <el-select\n              class=\"select-default\"\n              size=\"large\"\n              placeholder=\"Select Transaction Type\"\n              v-model=\"newTransaction.transactionType\"\n              :disabled=\"isTransactionType\"\n            >\n              <el-option\n                v-for=\"option in transactionTypeList\"\n                class=\"select-default\"\n                :value=\"option.value\"\n                :label=\"option.label\"\n                :key=\"option.label\"\n              >\n              </el-option>\n            </el-select>\n            <label v-show=\"isValid.transactionType\" class=\"label-font\"\n              >Transaction Type is required.</label\n            >\n          </fg-input>\n        </div>\n      </div>\n      <div class=\"col-sm-12\">\n        <!-- <card type=\"plain\"> -->\n        <div class=\"row mt-1\">\n          <div\n            class=\"col-xl-2 col-md-3 col-sm-6 p-0 h-div-32 mr-xl-2\"\n            v-show=\"isShowButton\"\n          >\n            <p-button\n              type=\"default\"\n              link\n              class=\"font-weight-bold w-full m-0\"\n              @click.prevent=\"addBoxLabel()\"\n            >\n              <i class=\"nc-icon nc-simple-add font-weight-bold\"></i> Add Box Label\n            </p-button>\n          </div>\n          <div\n            class=\"col-xl-2 col-md-3 col-sm-6 p-0 h-div-32 mr-xl-2\"\n            v-show=\"isShowButton\"\n          >\n            <p-button\n              :disabled=\"isEditBLDisabled\"\n              type=\"default\"\n              link\n              class=\"font-weight-bold w-full m-0\"\n              data-bs-toggle=\"modal\"\n              data-bs-target=\"#editboxlabelModal\"\n              @click=\"openModal(newTransaction)\"\n            >\n              <i class=\"nc-icon nc-ruler-pencil font-weight-bold\"></i> Delete Box Label\n            </p-button>\n          </div>\n          <div\n            class=\"col-xl-2 col-md-3 col-sm-6 p-0 h-div-32 mr-xl-2\"\n            v-show=\"isShowButton\"\n          >\n            <span\n              id=\"excelBtn\"\n              class=\"d-inline-block w-full\"\n              tabindex=\"0\"\n              data-bs-toggle=\"tooltip\"\n              data-bs-placement=\"bottom\"\n            >\n              <p-button\n                type=\"default\"\n                link\n                class=\"font-weight-bold w-full m-0\"\n                onclick=\"document.getElementById('import_items_excel').click()\"\n              >\n                Import Items Excel\n              </p-button></span\n            >\n            <input\n              id=\"import_items_excel\"\n              type=\"file\"\n              accept=\".xlsx\"\n              style=\"display: none\"\n              @change=\"handleFileUpload\"\n            />\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-sm-12 p-0 mt-2\" v-show=\"isBoxLabel\">\n            <form class=\"p-0\" @submit.prevent=\"saveBoxLabel()\">\n              <div>\n                <fg-input\n                  placeholder=\"Box Label ( Items Remarks )\"\n                  v-model.trim=\"newBoxLabel\"\n                  class=\"w-100\"\n                  @keypress=\"restrictChar\"\n                  @input=\"filterRemarks\"\n                  list=\"remarks\"\n                ></fg-input>\n                <datalist id=\"remarks\">\n                  <option v-for=\"remark in filteredRemarks\" :value=\"remark\">\n                    {{ remark }}\n                  </option>\n                </datalist>\n              </div>\n              <div class=\"mt-n3\">\n                <p-button\n                  native-type=\"submit\"\n                  type=\"default\"\n                  size=\"sm\"\n                  outline\n                  class=\"font-weight-bold\"\n                >\n                  <i class=\"nc-icon nc-check-2 font-weight-bold\"></i>\n                </p-button>\n                <p-button\n                  type=\"default\"\n                  size=\"sm\"\n                  outline\n                  class=\"font-weight-bold\"\n                  @click.prevent=\"cancelBoxLabel()\"\n                >\n                  <i class=\"nc-icon nc-simple-remove font-weight-bold\"></i>\n                </p-button>\n              </div>\n              <label v-show=\"isNewBoxLabel\" class=\"label-font pl-3\"\n                >Box Label is empty.</label\n              >\n            </form>\n          </div>\n          <label v-show=\"isValid.boxLabel\" class=\"label-font\"\n            >Box Label is required.</label\n          >\n        </div>\n        <collapse>\n          <collapse-item\n            v-for=\"(boxLabel, indexBox) in newTransaction.boxLabels\"\n            :key=\"boxLabel.id\"\n            :title=\"`Box No. ${boxLabel.boxNumber} of ${newTransaction.boxLabels.length} \\xa0\\xa0\\xa0 ${boxLabel.boxLabel}`\"\n            name=\"1\"\n            class=\"font-weight-bold\"\n          >\n            <div v-show=\"isAddItem\">\n              <button\n                class=\"btn btn-transparent bold-button\"\n                @click.prevent=\"addItem(boxLabel.boxNumber)\"\n              >\n                <i class=\"nc-icon nc-simple-add font-weight-bold\"></i> Add Item\n              </button>\n              <button\n                v-if=\"indexBox == deleteItemBtn && multipleSelection.length != 0\"\n                class=\"btn btn-danger bold-button\"\n                @click=\"deleteSelectedItems()\"\n              >\n                <i class=\"nc-icon nc-simple-remove font-weight-bold\"></i> Delete Item\n              </button>\n            </div>\n            <div>\n              <div\n                class=\"row\"\n                v-for=\"newItem in newItemInputBox\"\n                v-show=\"newItem.id === boxLabel.boxNumber\"\n              >\n                <form @submit.prevent=\"saveItem(boxLabel.boxNumber)\">\n                  <div class=\"row\" v-if=\"newItem.id == showItemInput\">\n                    <div class=\"col-xl-3 col-lg-3 col-md-3 col-sm-12 d-flex mt-2\">\n                      <div class=\"col-6 text-center\">\n                        <input\n                          type=\"radio\"\n                          v-model=\"barcode\"\n                          name=\"barcode\"\n                          value=\"item_16\"\n                          checked\n                        />\n                        <label for=\"item_16\">16 Digit Barcode</label><br />\n                      </div>\n                      <div class=\"col-6 text-center\">\n                        <input\n                          type=\"radio\"\n                          v-model=\"barcode\"\n                          name=\"barcode\"\n                          value=\"item_12\"\n                        />\n                        <label for=\"item_12\">12 Digit Barcode</label><br />\n                      </div>\n                    </div>\n                    <div class=\"col-xl-9 col-lg-9 col-md-9 col-sm-12 d-flex mt-2\">\n                      <input\n                        type=\"text\"\n                        placeholder=\"Item Code\"\n                        v-model=\"newItemInput\"\n                        @input=\"fetchItems\"\n                        @change=\"compareItemCode\"\n                        list=\"items\"\n                        class=\"input-datalist\"\n                        maxlength=\"150\"\n                      />\n\n                      <datalist id=\"items\">\n                        <option\n                          v-for=\"item in itemCodeList\"\n                          :value=\"item.ItemNo + ' - ' + item.ItemDescription\"\n                          :key=\"item.ItemNo\"\n                        ></option>\n                      </datalist>\n\n                      <p-button\n                        native-type=\"submit\"\n                        type=\"default\"\n                        size=\"sm\"\n                        class=\"font-weight-bold\"\n                      >\n                        <i class=\"nc-icon nc-check-2 font-weight-bold\"></i>\n                      </p-button>\n                      <p-button\n                        type=\"default\"\n                        size=\"sm\"\n                        class=\"font-weight-bold\"\n                        @click.prevent=\"cancelItem()\"\n                      >\n                        <i class=\"nc-icon nc-simple-remove font-weight-bold\"></i>\n                      </p-button>\n                    </div>\n                    <label\n                      v-show=\"isRightCode\"\n                      class=\"label-font font-weight-normal\"\n                      style=\"margin-left: 185px\"\n                      >Invalid Item Code.</label\n                    >\n                    <label\n                      v-show=\"isNewItem\"\n                      class=\"label-font font-weight-normal\"\n                      style=\"margin-left: 185px\"\n                      >Item code is empty.</label\n                    >\n                  </div>\n                </form>\n              </div>\n            </div>\n\n            <!-- after table -->\n            <div class=\"row\">\n              <el-table\n                ref=\"itemsDataTable\"\n                class=\"p-0\"\n                border\n                :header-cell-style=\"headerCellStyle\"\n                :cell-style=\"cellStyle\"\n                :data=\"tableData[indexBox]\"\n                style=\"width: 100%\"\n                @select=\"handleSelect\"\n                @select-all=\"handleSelectAll\"\n                :row-class-name=\"tableRowClassName\"\n              >\n                <el-table-column\n                  type=\"selection\"\n                  width=\"40\"\n                  header-align=\"center\"\n                  align=\"center\"\n                >\n                </el-table-column>\n                <el-table-column label=\"Item Code\" width=\"155\">\n                  <template slot-scope=\"scope\">\n                    <b>{{ scope.row.code }}</b>\n                  </template>\n                </el-table-column>\n                <el-table-column label=\"Description\" min-width=\"450\">\n                  <template slot-scope=\"scope\">\n                    {{ scope.row.description }}\n                  </template>\n                </el-table-column>\n                <el-table-column\n                  label=\"Size\"\n                  :width=\"isNBFI ? '60' : ''\"\n                  :min-width=\"isNBFI ? '' : '150'\"\n                >\n                  <template slot-scope=\"scope\">\n                    {{ scope.row.size }}\n                  </template>\n                </el-table-column>\n                <el-table-column label=\"Color\" width=\"100\">\n                  <template slot-scope=\"scope\">\n                    {{ scope.row.color }}\n                  </template>\n                </el-table-column>\n                <el-table-column :label=\"isNBFI ? 'Brand' : 'Category'\" min-width=\"300\">\n                  <template slot-scope=\"scope\">\n                    {{ scope.row.categorybrand }}\n                  </template>\n                </el-table-column>\n                <el-table-column label=\"Quantity\" width=\"165\">\n                  <template slot-scope=\"scope\">\n                    <div class=\"btn-group btn-group-sm d-flex flex-row\">\n                      <p-button\n                        type=\"default\"\n                        round\n                        outline\n                        size=\"xs\"\n                        @click=\"scope.row.quantity > 0 ? scope.row.quantity-- : 0\"\n                      >\n                        <i class=\"nc-icon nc-simple-delete\"></i>\n                      </p-button>\n                      <input\n                        type=\"text\"\n                        @blur=\"handleQuantity(scope.row)\"\n                        @input=\"handleLimitQuantity(scope.row)\"\n                        v-model=\"scope.row.quantity\"\n                        class=\"table-input-box\"\n                        style=\"width: 75px; text-align: center\"\n                        @paste=\"onPaste\"\n                        @keypress=\"numberOnly\"\n                        min=\"1\"\n                        max=\"150\"\n                      />\n\n                      <p-button\n                        type=\"default\"\n                        round\n                        outline\n                        size=\"xs\"\n                        @click=\"incrementQuantity(scope.row)\"\n                      >\n                        <i class=\"nc-icon nc-simple-add\"></i>\n                      </p-button>\n                    </div>\n                  </template>\n                </el-table-column>\n                <el-table-column label=\"Box Label\" min-width=\"300\">\n                  <template slot-scope=\"scope\">\n                    <el-select\n                      class=\"table-select-box\"\n                      size=\"large\"\n                      v-model=\"scope.row.boxNumber\"\n                      @change=\"\n                        editBoxLabel(\n                          scope.row.code,\n                          scope.row.quantity,\n                          scope.row.boxNumber\n                        )\n                      \"\n                    >\n                      <el-option\n                        v-for=\"boxLabel in newTransaction.boxLabels\"\n                        class=\"table-select-box\"\n                        :value=\"boxLabel.boxNumber\"\n                        :label=\"\n                          'Box No. ' +\n                          boxLabel.boxNumber +\n                          ' of ' +\n                          newTransaction.boxLabels.length +\n                          ' ' +\n                          boxLabel.boxLabel\n                        \"\n                        :key=\"boxLabel.id\"\n                      >\n                      </el-option>\n                    </el-select>\n                  </template>\n                </el-table-column>\n              </el-table>\n            </div>\n          </collapse-item>\n          <label v-show=\"isValid.item\" class=\"label-font\">Item is required.</label>\n        </collapse>\n        <!-- </card> -->\n        <div class=\"row pt-5\" v-if=\"showUploadImage\">\n          <div class=\"col-12 p-0\">\n            <label>\n              Upload Images (Up to 10 images [JPEG, PNG, and other image files] with a\n              maximum size of 2 MB per image will be accepted.)\n            </label>\n            <br />\n          </div>\n\n          <div class=\"col-xxl-2 col-xl-3 col-lg-4 col-md-6 p-0\">\n            <button\n              class=\"btn btn-default m-0\"\n              style=\"width: 100%\"\n              onclick=\"document.getElementById('upload_image').click()\"\n            >\n              Upload Image\n            </button>\n            <input\n              id=\"upload_image\"\n              multiple\n              type=\"file\"\n              ref=\"image\"\n              accept=\"image/jpeg, image/png\"\n              style=\"display: none\"\n              @change=\"onFileChange\"\n            />\n          </div>\n        </div>\n        <div\n          v-if=\"images\"\n          class=\"d-flex justify-content-center row my-2 column-gap-3 row-gap-2\"\n        >\n          <div class=\"image-container\" v-for=\"(image, index) in images\">\n            <div class=\"image-overlay\" v-if=\"!isMobile\">\n              <el-popconfirm\n                width=\"280\"\n                confirm-button-text=\"Confirm\"\n                cancel-button-text=\"Cancel\"\n                icon-color=\"#c45656\"\n                title=\"Are you sure you want to remove this image?\"\n                @confirm=\"removeImage(true, index)\"\n                @cancel=\"removeImage(false, index)\"\n              >\n                <el-button slot=\"reference\" type=\"danger\" icon=\"el-icon-delete\" circle>\n                </el-button>\n              </el-popconfirm>\n            </div>\n\n            <el-popconfirm\n              width=\"280\"\n              confirm-button-text=\"Confirm\"\n              cancel-button-text=\"Cancel\"\n              icon-color=\"#c45656\"\n              title=\"Are you sure you want to remove this image?\"\n              @confirm=\"removeImage(true, index)\"\n              @cancel=\"removeImage(false, index)\"\n              ><a slot=\"reference\" class=\"imageClose\" v-if=\"isMobile\"\n                >&times;</a\n              ></el-popconfirm\n            >\n            <img class=\"imageUpload\" :src=\"image\" />\n          </div>\n        </div>\n      </div>\n      <div class=\"text-center mt-1\">\n        <span\n          id=\"draftBTN\"\n          class=\"d-inline-block\"\n          tabindex=\"0\"\n          data-bs-toggle=\"tooltip\"\n          data-bs-placement=\"bottom\"\n        >\n          <button\n            :disabled=\"isDisabledDraft\"\n            class=\"btn btn-warning btn-fill btn-wd mx-1 mb-0 mt-2\"\n            data-bs-target=\"#confirmationDraftPullOut\"\n            data-bs-toggle=\"modal\"\n            v-show=\"isDenied\"\n          >\n            Save as Draft\n          </button></span\n        >\n        <button\n          class=\"btn btn-warning btn-fill btn-wd mx-1 mb-0 mt-2\"\n          @click.prevent=\"cancelTransaction\"\n          v-show=\"isCancel\"\n        >\n          Cancel\n        </button>\n        <button\n          :disabled=\"isDisabledSubmit\"\n          class=\"btn btn-success btn-fill btn-wd mx-1 mb-0 mt-2\"\n          data-bs-target=\"#submiteditauthorizeddatemodal\"\n          data-bs-toggle=\"modal\"\n          @click.prevent=\"submit\"\n          v-show=\"isApproved\"\n        >\n          Approved\n        </button>\n        <span\n          id=\"submitBTN\"\n          class=\"d-inline-block\"\n          tabindex=\"0\"\n          data-bs-toggle=\"tooltip\"\n          data-bs-placement=\"bottom\"\n        >\n          <button\n            :disabled=\"isDisabledSubmit\"\n            class=\"btn btn-success btn-fill btn-wd mx-1 mb-0 mt-2\"\n            data-bs-target=\"#confirmationSubmitPullOut\"\n            data-bs-toggle=\"modal\"\n            v-show=\"isSubmit\"\n          >\n            Submit\n          </button></span\n        >\n      </div>\n      <div class=\"clearfix\"></div>\n    </div>\n    <EditBoxLabelModal\n      :transferredData=\"transferredData\"\n      :newItemInputBox=\"newItemInputBox\"\n      :remarksList=\"remarksList\"\n      @TransferDataBoxNumber=\"reArrangeBoxNumber($event)\"\n      @DeletedBoxNumber=\"reArrangeItems($event)\"\n      @closeModal=\"closeModal()\"\n      @renameBoxLabel=\"editingBoxLabel($event)\"\n      :tempRemoveItems=\"tempRemoveItems\"\n    ></EditBoxLabelModal>\n\n    <TransactionReceiptModal\n      :transferTransactionID=\"transferTransactionID\"\n      :savingCounter=\"saving_counter\"\n    ></TransactionReceiptModal>\n\n    <DraftModal :transferTransactionID=\"transferTransactionID\"></DraftModal>\n    <ConfirmationSubmitPullOutModal @confirm=\"submit($event)\">\n    </ConfirmationSubmitPullOutModal>\n\n    <ConfirmationDraftPullOutModal @confirm=\"draft($event)\">\n    </ConfirmationDraftPullOutModal>\n\n    <SubmitEditAuthorizedDateModal\n      :transferTransactionID=\"transferTransactionID\"\n      :transferTransactionPromoName=\"promoName\"\n      :transferTransactionPromoEmail=\"promoEmail\"\n      :savingCounter=\"saving_counter\"\n      :dateStart=\"pullOutStartDate\"\n      :dateEnd=\"pullOutEndDate\"\n      :transactionDetails=\"transactionDetails\"\n      :tempRemoveItems=\"tempRemoveItems\"\n      :toSubmit=\"toSubmit\"\n      :isDraft=\"isDraft\"\n    ></SubmitEditAuthorizedDateModal>\n  </div>\n</template>\n<script>\nimport { Collapse, CollapseItem, Tabs, TabPane, Card } from \"src/components/UIComponents\";\nimport {\n  DatePicker,\n  TimeSelect,\n  Slider,\n  Tag,\n  Input,\n  Select,\n  Option,\n  Message,\n  MessageBox,\n  Popconfirm,\n} from \"element-ui\";\nimport PProgress from \"src/components/UIComponents/Progress.vue\";\nimport PSwitch from \"src/components/UIComponents/Switch.vue\";\nimport PButton from \"src/components/UIComponents/Button.vue\";\nimport Vue from \"vue\";\nimport NotificationTemplate from \"../Components/NotificationTemplate\";\nimport NotifAddBoxLabel from \"../Components/Notification/NotifSuccessAddBoxLabel.vue\";\nimport NotifAddItem from \"../Components/Notification/NotifSuccessAddItem.vue\";\nimport NotifDeleteBoxLabel from \"../Components/Notification/NotifSuccessDeleteBoxLabel.vue\";\nimport NotifDeleteItem from \"../Components/Notification/NotifSuccessDeleteItem.vue\";\nimport NotifDraftSave from \"../Components/Notification/NotifSuccessDraftSave.vue\";\nimport NotifItemChangeBoxLabel from \"../Components/Notification/NotifSuccessItemChangeBoxLabel.vue\";\nimport NotifItemQuantity from \"../Components/Notification/NotifSuccessItemQuantity.vue\";\nimport NotifRenameBoxLabel from \"../Components/Notification/NotifSuccessRenameBoxLabel.vue\";\nimport NotifSubmitTransaction from \"../Components/Notification/NotifSuccessSubmitTransaction.vue\";\nimport SubmitEditAuthorizedDateModal from \"./PullOutRequests/ModalPullOut/SubmitEditAuthorizedDateModal.vue\";\nimport Swal from \"sweetalert2\";\nimport { Table, TableColumn, Button } from \"element-ui\";\nimport axiosClient from \"../../../../axios\";\nimport EditBoxLabelModal from \"./PullOutRequests/ModalPullOut/EditBoxLabelModal.vue\";\nimport TransactionReceiptModal from \"./PullOutRequests/ModalPullOut/TransactionReceiptModal.vue\";\nimport EditSubmitTransactionReceiptModal from \"./PullOutRequests/ModalPullOut/EditSubmitTransactionReceiptModal.vue\";\nimport DraftModal from \"./PullOutRequests/ModalPullOut/DraftModal.vue\";\nimport linkName from \"../../../../linkName\";\nimport ConfirmationSubmitPullOutModal from \"./PullOutRequests/ModalPullOut/ConfirmationSubmitPullOutModal.vue\";\nimport ConfirmationDraftPullOutModal from \"./PullOutRequests/ModalPullOut/ConfirmationDraftPullOutModal.vue\";\nimport * as XLSX from \"xlsx\";\nimport { Loading } from \"element-ui\";\nimport axios from \"axios\";\n\nVue.use(Table);\nVue.use(TableColumn);\nVue.use(Popconfirm);\nVue.use(Button);\n\nexport default {\n  components: {\n    [DatePicker.name]: DatePicker,\n    [TimeSelect.name]: TimeSelect,\n    [Slider.name]: Slider,\n    [Tag.name]: Tag,\n    [Input.name]: Input,\n    [Option.name]: Option,\n    [Select.name]: Select,\n    PButton,\n    PSwitch,\n    PProgress,\n    TabPane,\n    Tabs,\n    CollapseItem,\n    Collapse,\n    Card,\n    NotificationTemplate,\n    NotifAddBoxLabel,\n    NotifAddItem,\n    NotifDeleteBoxLabel,\n    NotifDeleteItem,\n    NotifDraftSave,\n    NotifItemChangeBoxLabel,\n    NotifItemQuantity,\n    NotifRenameBoxLabel,\n    NotifSubmitTransaction,\n    EditBoxLabelModal,\n    TransactionReceiptModal,\n    EditSubmitTransactionReceiptModal,\n    DraftModal,\n    ConfirmationSubmitPullOutModal,\n    ConfirmationDraftPullOutModal,\n    EditSubmitTransactionReceiptModal,\n    SubmitEditAuthorizedDateModal,\n  },\n  data() {\n    return {\n      isDisabledDraft: true,\n      showCategoryBrand: true,\n      showUploadImage: true,\n      transferredData: \"\",\n      isCompany: false,\n      isChainCode: true,\n      isBranchName: true,\n      isTransactionType: true,\n      isShowButton: false,\n      itemCodeList: [],\n      isEditBLDisabled: false,\n      isBoxLabel: false,\n      isItem: false,\n      isAddItem: true,\n      isDisabledSubmit: true,\n      showItemInput: \"\",\n      companyList: [],\n      chainCodeList: [],\n      branchNameList: [],\n      newTransaction: {\n        //input variable\n        company: \"\",\n        chainCode: \"\",\n        branchName: \"\",\n        transactionType: \"\",\n        boxLabels: [], //list of inputted box label\n        items: [], //list of inputted item\n      },\n      newItemInputBox: [],\n      isValid: {\n        company: false,\n        chainCode: false,\n        branchName: false,\n        transactionType: false,\n        boxLabel: false,\n        item: false,\n      },\n      isApproved: false,\n      isCancel: false,\n      isSubmit: true,\n      hoveredRow: null,\n      uploadImageFileName: \"Choose an Image\",\n      uploadExcelFileName: \"Choose a File\",\n\n      transactionTypeList: [\n        {\n          value: \"CPO Item for Disposal in the Store c/o Supervisor\",\n          label: \"CPO Item for Disposal in the Store c/o Supervisor\",\n          company: \"NBFI\",\n        },\n        {\n          value: \"CPO for Transfer to Another Store\",\n          label: \"CPO for Transfer to Another Store\",\n          company: \"NBFI\",\n        },\n        {\n          value: \"CPO Back to WH via In-House Delivery Service\",\n          label: \"CPO Back to WH via In-House Delivery Service\",\n          company: \"NBFI\",\n        },\n        {\n          value: \"CPO Back to WH via Chain Distribution Center\",\n          label: \"CPO Back to WH via Chain Distribution Center\",\n          company: \"NBFI\",\n        },\n        {\n          value: \"CPO Back to WH via 3rd Party Trucking\",\n          label: \"CPO Back to WH via 3rd Party Trucking\",\n          company: \"NBFI\",\n        },\n        {\n          value: \"CPO Back to WH c/o Supervisor\",\n          label: \"CPO Back to WH c/o Supervisor\",\n          company: \"NBFI\",\n        },\n      ],\n      newBoxLabel: \"\",\n      newItemInput: \"\",\n      newBrand: \"\",\n      newItemDescription: \"\",\n      newStyleCode: \"\",\n      newItemCode: \"\",\n      notifications: {\n        topCenter: false,\n      },\n      modals: {\n        classic: false,\n        notice: false,\n        mini: false,\n      },\n      isNewBoxLabel: false,\n      isNewItem: false,\n      isRightCode: false,\n      transferTransactionID: \"\",\n      uniqueItemss: [],\n      duplicateItemss: [],\n      isDenied: true,\n      dataArray: [],\n      myData: [],\n      counter: 0,\n      remarksList: [\n        \"CLOSED STORE/BRANCH - GOOD ITEMS\",\n        \"CLOSED STORE/BRANCH - DAMAGED/DIRTY ITEMS\",\n        \"CLOSED STORE/BRANCH - DISPOSAL/CONTAINS BROKEN GLASS ITEMS\",\n        \"REGULAR PULL-OUT - GOOD ITEMS\",\n        \"REGULAR PULL-OUT - DAMAGED/DIRTY ITEMS\",\n        \"REGULAR PULL-OUT - DISPOSAL/CONTAINS BROKEN GLASS ITEMS\",\n        \"STORE TO STORE/BRANCH TO BRANCH - GOOD ITEMS\",\n        \"STORE TO STORE/BRANCH TO BRANCH - DAMAGED/DIRTY ITEMS\",\n        \"STORE TO STORE/BRANCH TO BRANCH - DISPOSAL/CONTAINS BROKEN GLASS ITEMS\",\n      ],\n      images: [],\n      files: [],\n      img_counter: 0,\n      strCategory: {\n        boxNumber: 0,\n        label: \"\",\n      },\n      isDraft: false,\n      barcode: \"item_16\",\n      saving_counter: null,\n      isMobile: null,\n      headerCellStyle: {\n        color: \"black\",\n      },\n      cellStyle: {\n        color: \"black\",\n        fontWeight: \"normal\",\n      },\n      tableData: [],\n      multipleSelection: [],\n      deleteItemBtn: null,\n      isNBFI: false,\n      promoName: \"\",\n      promoEmail: \"\",\n      pullOutStartDate: \"\",\n      pullOutEndDate: \"\",\n      transactionDetails: {},\n      tempRemoveItems: [],\n      toSubmit: \"\",\n    };\n  },\n  computed: {\n    filteredRemarks() {\n      return this.remarksList.filter((newBoxLabel) => {\n        return newBoxLabel.toLowerCase().includes(this.newBoxLabel.toLowerCase());\n      });\n    },\n    sortedBoxes() {\n      return this.newTransaction.boxLabels.sort((a, b) => a.boxNumber - b.boxNumber);\n    },\n    getItemBoxLabel() {\n      return (boxNumber) => {\n        const boxLabel = this.newTransaction.boxLabels.find(\n          (label) => label.boxNumber === boxNumber\n        );\n        return boxLabel ? boxLabel.boxLabel : \"\";\n      };\n    },\n  },\n  mounted() {\n    const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n    const tooltipList = [...tooltipTriggerList].map(\n      (tooltipTriggerEl) => new bootstrap.Tooltip(tooltipTriggerEl)\n    );\n    let tooltipExcel = bootstrap.Tooltip.getInstance(\"#excelBtn\");\n    tooltipExcel._config.title =\n      \"Only XLSX file with a standard Template (Column A: Box Number, Column B: Box Label, Column C: Item Code, Column D: Quantity)\";\n    tooltipExcel.update();\n    this.fetchEdit();\n    this.fetchCompany();\n    if (window.resolveRouteChange) {\n      window.resolveRouteChange();\n      window.resolveRouteChange = null;\n    }\n    linkName.val = \"Pull-Out Requisition Form\";\n\n    this.isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n  },\n  watch: {\n    newTransaction: {\n      handler(val) {\n        this.validateSubmit();\n      },\n      deep: true,\n    },\n    \"newTransaction.items\": function (val, oldVal) {\n      this.addCategoryBoxLabel();\n      this.createTableData();\n    },\n    \"newTransaction.boxLabels\": function (val, oldVal) {\n      this.enableDropDowns();\n      this.createTableData();\n    },\n    \"newTransaction.company\": function (val, oldVal) {\n      this.showButtons();\n    },\n    \"newTransaction.chainCode\": function (val, oldVal) {\n      this.showButtons();\n    },\n    \"newTransaction.branchName\": function (val, oldVal) {\n      this.showButtons();\n    },\n    \"newTransaction.transactionType\": function (val, oldVal) {\n      this.showButtons();\n    },\n    barcode: function (val, oldVal) {\n      this.clearItemInput();\n    },\n    sortedBoxes(newSortedBoxes) {\n      // Option 1: Using Vue.set\n      Vue.set(this, \"newTransaction.boxLabels\", newSortedBoxes);\n\n      // Option 2: Reassigning the array\n      // this.boxes = newSortedBoxes.slice();\n    },\n  },\n  methods: {\n    handleLimitQuantity(row) {\n      if (row.quantity > 150) row.quantity = 150;\n    },\n    incrementQuantity(row) {\n      if (row.quantity < 150) {\n        row.quantity++;\n      } else {\n        // Optionally, you can display a message or take some action when the limit is reached.\n        console.log(\"Quantity limit reached (150).\");\n      }\n    },\n    tableRowClassName({ row, rowIndex }) {\n      if (row.quantity == 0) return \"warning-row\";\n      else return \"\";\n    },\n    handleSelectAll(val) {\n      if (val.length == 0) {\n        this.multipleSelection = [];\n        this.deleteItemBtn = null;\n      } else this.deleteItemBtn = val[0].boxNumber - 1;\n\n      val.forEach((row) => {\n        let temp = true;\n        for (let [index, mul] of this.multipleSelection.entries())\n          if (row.boxNumber == mul.boxNumber && row.code == mul.code) {\n            temp = false;\n            break;\n          }\n        if (temp) this.multipleSelection.push(row);\n\n        if (this.multipleSelection.length > 0) {\n          const selectedItemsOther = this.multipleSelection.filter(\n            (mul) => mul.boxNumber !== val[0].boxNumber\n          );\n          selectedItemsOther.forEach((rowSel) => {\n            this.$refs.itemsDataTable[parseInt(rowSel.boxNumber - 1)].toggleRowSelection(\n              rowSel\n            );\n          });\n          const selectedItems = this.multipleSelection.filter(\n            (mul) => mul.boxNumber === val[0].boxNumber\n          );\n          if (selectedItems.length > 0) this.multipleSelection = selectedItems;\n        }\n      });\n    },\n    handleSelect(val, row) {\n      if (val.length == 0) this.deleteItemBtn = null;\n      else this.deleteItemBtn = row.boxNumber - 1;\n\n      let temp = true;\n      for (let [index, mul] of this.multipleSelection.entries())\n        if (row.boxNumber == mul.boxNumber && row.code == mul.code) {\n          this.multipleSelection.splice(index, 1);\n          temp = false;\n          break;\n        }\n      if (temp) this.multipleSelection.push(row);\n\n      if (this.multipleSelection.length > 0) {\n        const selectedItemsOther = this.multipleSelection.filter(\n          (mul) => mul.boxNumber !== val[0].boxNumber\n        );\n        selectedItemsOther.forEach((rowSel) => {\n          this.$refs.itemsDataTable[parseInt(rowSel.boxNumber - 1)].toggleRowSelection(\n            rowSel\n          );\n        });\n        const selectedItems = this.multipleSelection.filter(\n          (mul) => mul.boxNumber === val[0].boxNumber\n        );\n        if (selectedItems.length > 0) this.multipleSelection = selectedItems;\n      }\n    },\n    deleteSelectedItems() {\n      MessageBox.confirm(\n        \"The item/s you have selected will be remove. Continue?\",\n        \"Removing of Items\",\n        {\n          confirmButtonText: \"Confirm\",\n          cancelButtonText: \"Cancel\",\n          type: \"warning\",\n        }\n      )\n        .then(() => {\n          this.multipleSelection.forEach((selected) => {\n            this.removeItem(selected.code, selected.boxNumber);\n          });\n          this.deleteItemBtn = null;\n        })\n        .catch(() => {\n          Message({\n            type: \"info\",\n            message: \"Removing of Items canceled.\",\n          });\n        });\n    },\n    createTableData() {\n      this.tableData = [];\n      this.multipleSelection = [];\n      this.newTransaction.boxLabels.forEach((box, key) => {\n        this.tableData.push([]);\n        this.newTransaction.items.forEach((item) => {\n          if (box.boxNumber == item.boxNumber) this.tableData[key].push(item);\n        });\n      });\n    },\n    reArrangeItems(deletedBoxNumber) {\n      this.newTransaction.items.forEach((temp) => {\n        if (deletedBoxNumber < temp.boxNumber) temp.boxNumber--;\n      });\n    },\n    reArrangeBoxNumber(transfer) {\n      this.newTransaction.boxLabels = transfer;\n      this.newItemInputBox = [];\n      this.newTransaction.boxLabels.forEach((boxLabel) => {\n        var tempIdBox = {\n          id: boxLabel.id,\n        };\n        this.newItemInputBox.push(tempIdBox);\n      });\n    },\n    clearItemInput() {\n      this.newItemInput = \"\";\n      this.itemCodeList = [];\n    },\n    restrictChar($event) {\n      let keyCode = $event.keyCode ? $event.keyCode : $event.which;\n      if (keyCode == 91 || keyCode == 93) {\n        // 46 is dot\n        $event.preventDefault();\n      }\n    },\n    addCategoryBoxLabel() {\n      if (this.isDraft == false) {\n        this.newTransaction.boxLabels.forEach((box) => {\n          var filteredItems = this.newTransaction.items.filter(\n            (item) => item.boxNumber === box.boxNumber\n          );\n          var uniqueCategory = [\n            ...new Set(filteredItems.map((item) => item.categorybrand)),\n          ];\n          let strCategory = \"\";\n          for (let i = 0; i < uniqueCategory.length; i++) {\n            if (i == 0) strCategory = \" [ \" + uniqueCategory[i];\n            else strCategory = strCategory + \", \" + uniqueCategory[i];\n            if (i == uniqueCategory.length - 1) strCategory = strCategory + \" ]\";\n          }\n          let tempIndex = box.boxLabel.indexOf(\"[\");\n          if (tempIndex > 0) box.boxLabel = box.boxLabel.substr(0, tempIndex).trim();\n          box.boxLabel = box.boxLabel + strCategory;\n        });\n      }\n    },\n    filterRemarks() {\n      this.filteredRemarks = this.remarksList.filter((newBoxLabel) => {\n        return newBoxLabel.toLowerCase().includes(this.newBoxLabel.toLowerCase());\n      });\n    },\n    onFileChange(e) {\n      var files = e.target.files || e.dataTransfer.files;\n\n      var file = e.target.files[0];\n      const maxSizeInBytes = 2 * 1024 * 1024; // 2MB\n\n      if (file && file.size > maxSizeInBytes) {\n        // File size exceeds the limit\n        Message.error(\"Please select an image file smaller than 2MB.\");\n        // Clear the file input\n        e.target.value = \"\";\n        return;\n      } else {\n        this.files.push(e.target.files[0]);\n\n        if (!files.length) return;\n        this.createImage(files);\n        this.uploadImageFileName = e.target.files[0].name;\n      }\n    },\n    createImage(files) {\n      var vm = this;\n      for (var index = 0; index < files.length; index++) {\n        var reader = new FileReader();\n        reader.onload = function (event) {\n          const imageUrl = event.target.result;\n          vm.images.push(imageUrl);\n        };\n        reader.readAsDataURL(files[index]);\n      }\n    },\n    removeImage(confirm, index) {\n      if (confirm) {\n        if (typeof this.images[index] == \"string\") {\n          let tempPath = this.images[index].split(\"/\");\n          let removePath = tempPath[tempPath.length - 1];\n          axiosClient\n            .post(\"/deleteImage\", {\n              company: this.newTransaction.company,\n              path: removePath,\n            })\n            .then((response) => {\n              console.log(response.data);\n            })\n            .catch((error) => {\n              console.error(error);\n            });\n        }\n\n        this.images.splice(index, 1);\n        this.uploadImageFileName = \"Choose an Image\";\n\n        Message({\n          type: \"success\",\n          message: \"Image has been removed.\",\n        });\n      }\n    },\n    clearImage() {\n      document.getElementById(\"formFile\").value = null;\n      frame.src = \"\";\n    },\n    handleFileUploadImage() {\n      const config = {\n        headers: {\n          \"content-type\": \"multipart/form-data\",\n        },\n      };\n\n      if (this.img_counter < this.files.length) {\n        axiosClient\n          .post(\n            \"/upload\",\n            {\n              image: this.files[this.img_counter],\n              company: this.newTransaction.company,\n              branchName: this.newTransaction.branchName,\n              transactionID: this.transferTransactionID,\n            },\n            config\n          )\n          .then((response) => {\n            this.img_counter++;\n            setTimeout(this.handleFileUploadImage, 2000);\n          })\n          .catch((error) => {\n            console.error(error);\n          });\n      }\n    },\n    handleFileUpload(event) {\n      if (event.target.files.length != 0) {\n        this.uploadExcelFileName = event.target.files[0].name;\n        const file = event.target.files[0];\n        const reader = new FileReader();\n\n        reader.onload = (e) => {\n          const data = new Uint8Array(e.target.result);\n          const workbook = XLSX.read(data, { type: \"array\" });\n\n          const worksheetName = workbook.SheetNames[0];\n          const worksheet = workbook.Sheets[worksheetName];\n\n          const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n          // header: 1 indicates that the first row contains column headers\n\n          // Save the JSON data to a Vue variable\n          this.myData = jsonData;\n          let arrayBox = [];\n          for (var x = 0; x < this.myData.length; x++) {\n            this.dataArray.push(this.myData[x]);\n            arrayBox.push(this.myData[x][1]);\n          }\n\n          const filteredArray = arrayBox.filter((value, index, self) => {\n            return self.indexOf(value) === index;\n          });\n\n          let tempBoxLabel = [];\n          for (var x = 0; x < filteredArray.length; x++) {\n            tempBoxLabel = {\n              id: x + 1,\n              boxNumber: x + 1,\n              boxLabel: filteredArray[x],\n            };\n\n            this.newTransaction.boxLabels.push(tempBoxLabel);\n            let tempItem = [];\n\n            if (this.newTransaction.boxLabels.length == 0) {\n              tempItem = {\n                id: this.newTransaction.boxLabels.length + 1,\n              };\n            } else {\n              tempItem = {\n                id:\n                  this.newTransaction.boxLabels[this.newTransaction.boxLabels.length - 1]\n                    .id + 1,\n              };\n            }\n            this.newItemInputBox.push(tempItem);\n          }\n\n          this.counter = 0;\n          this.saveItemsExcel();\n        };\n\n        reader.readAsArrayBuffer(file);\n      }\n    },\n\n    saveItemsExcel() {\n      let loadingInstance = Loading.service({\n        fullscreen: true,\n        lock: true,\n        text: \"Loading\",\n        spinner: \"el-icon-loading\",\n        background: \"rgba(255,0,0,0.3)\",\n      });\n      if (this.counter < this.dataArray.length) {\n        var boxNumber = this.dataArray[this.counter][0];\n        var quantity = this.dataArray[this.counter][3];\n        axiosClient\n          .get(\"/fetchSameItems\", {\n            params: {\n              company: this.newTransaction.company,\n              ItemNo: this.dataArray[this.counter][2],\n            },\n          })\n          .then((response) => {\n            if (response.data.length == 0) {\n              setTimeout(this.saveItemsExcel, 2000);\n            }\n            for (var x = 0; x < response.data.length; x++) {\n              var flag = true;\n\n              for (var i = 0; i < this.newTransaction.items.length; i++) {\n                if (\n                  this.newTransaction.items[i].code == response.data[x].ItemNo &&\n                  this.newTransaction.items[i].boxNumber == boxNumber\n                ) {\n                  this.newTransaction.items[i].quantity =\n                    parseInt(this.newTransaction.items[x].quantity) + 1;\n                  flag = false;\n                  break;\n                }\n              }\n              if (flag) {\n                let tempItem = {\n                  code: response.data[x].ItemNo,\n                  description: response.data[x].ItemDescription,\n                  categorybrand: response.data[x].brandNames,\n                  quantity: quantity,\n                  size: response.data[x].Size,\n                  color: response.data[x].Color,\n                  boxNumber: parseInt(boxNumber),\n                  category: response.data[x].Category,\n                };\n                this.newTransaction.items.push(tempItem);\n              }\n\n              this.isAddItem = true;\n              this.notifyVue(\"AddItem\", \"bottom\", \"right\");\n              setTimeout(this.saveItemsExcel, 2000);\n            }\n          })\n          .catch((error) => {\n            console.error(error);\n          });\n      } else {\n        this.draft(true);\n        loadingInstance.close();\n      }\n      this.counter++;\n    },\n    onPaste(event) {\n      event.preventDefault();\n    },\n    numberOnly($event) {\n      console.log(\"Number Only:\", $event);\n      let keyCode = $event.keyCode ? $event.keyCode : $event.which;\n      if (keyCode < 48 || keyCode > 57) {\n        // 46 is dot\n        $event.preventDefault();\n      }\n    },\n    validateSubmit() {\n      let uniqueItems = [\n        ...new Set(this.newTransaction.items.map((item) => item.boxNumber)),\n      ];\n      let itemsValidation = false;\n      let itemsValidationTemp = false;\n      for (let j in this.newTransaction.boxLabels) {\n        for (let i in uniqueItems) {\n          if (uniqueItems[i] == this.newTransaction.boxLabels[j].id) {\n            itemsValidationTemp = true;\n            itemsValidation = true;\n            break;\n          } else {\n            itemsValidation = false;\n            itemsValidationTemp = false;\n          }\n        }\n      }\n      for (let x in this.newTransaction.items) {\n        if (this.newTransaction.items[x].quantity == 0) {\n          itemsValidation = false;\n\n          const submitTooltip = document.getElementById(\"submitBTN\");\n          const tooltip = new bootstrap.Tooltip(submitTooltip, {\n            title: \"No items should have a quantity of 0.\",\n          });\n          tooltip.update();\n          break;\n        }\n      }\n      if (!itemsValidationTemp) {\n        const submitTooltip = document.getElementById(\"submitBTN\");\n        const tooltip = new bootstrap.Tooltip(submitTooltip, {\n          title: \"Kindly add item/s on every boxes you've added.\",\n        });\n        tooltip.update();\n      }\n      if (\n        !this.newTransaction.company ||\n        !this.newTransaction.chainCode ||\n        !this.newTransaction.branchName ||\n        !this.newTransaction.transactionType\n      ) {\n        const submitTooltip = document.getElementById(\"submitBTN\");\n        const tooltip = new bootstrap.Tooltip(submitTooltip, {\n          title: \"Complete the form above to enable this button.\",\n        });\n        tooltip.update();\n        const draftTooltip = document.getElementById(\"draftBTN\");\n        const tooltipDraft = new bootstrap.Tooltip(draftTooltip, {\n          title: \"Complete the form above to enable this button.\",\n        });\n        tooltipDraft.update();\n      } else if (this.newTransaction.boxLabels.length <= 0) {\n        const submitTooltip = document.getElementById(\"submitBTN\");\n        const tooltip = new bootstrap.Tooltip(submitTooltip, {\n          title: \"No box added. Kindly add box/es to be able to add item/s.\",\n        });\n        tooltip.update();\n      } else if (this.newTransaction.items.length <= 0) {\n        const submitTooltip = document.getElementById(\"submitBTN\");\n        const tooltip = new bootstrap.Tooltip(submitTooltip, {\n          title: \"No items added. Kindly add item/s for this pull-out request.\",\n        });\n        tooltip.update();\n      }\n\n      //Validation for Submit Button\n      if (\n        this.newTransaction.company &&\n        this.newTransaction.chainCode &&\n        this.newTransaction.branchName &&\n        this.newTransaction.transactionType &&\n        this.newTransaction.boxLabels.length > 0 &&\n        itemsValidation\n      ) {\n        this.isDisabledSubmit = false;\n        let tooltip = bootstrap.Tooltip.getInstance(\"#submitBTN\");\n        tooltip.disable();\n      } else this.isDisabledSubmit = true;\n\n      //validation for Draft Button\n      if (\n        this.newTransaction.company &&\n        this.newTransaction.chainCode &&\n        this.newTransaction.branchName &&\n        this.newTransaction.transactionType\n      ) {\n        this.isDisabledDraft = false;\n        let tooltip = bootstrap.Tooltip.getInstance(\"#draftBTN\");\n        tooltip.disable();\n      } else this.isDisabledDraft = true;\n    },\n    editingBoxLabel({ index, value, tempBL }) {\n      if (value) this.newTransaction.boxLabels[index].boxLabel = value;\n      else this.newTransaction.boxLabels[index].boxLabel = tempBL;\n    },\n    enableDropDowns() {\n      if (this.newTransaction.boxLabels.length == 0) {\n        this.isCompany = false;\n        this.isChainCode = false;\n        this.isBranchName = false;\n        this.isTransactionType = false;\n        this.isEditBLDisabled = true;\n      } else this.isEditBLDisabled = false;\n    },\n    showButtons() {\n      if (\n        this.newTransaction.company &&\n        this.newTransaction.chainCode &&\n        this.newTransaction.branchName &&\n        this.newTransaction.transactionType\n      ) {\n        this.isShowButton = true;\n        if (this.newTransaction.boxLabels.length == 0) this.isEditBLDisabled = true;\n        else this.isEditBLDisabled = false;\n      } else this.isShowButton = false;\n    },\n    fetchEdit() {\n      try {\n        const uri = window.location.href;\n        var transactionID = uri.split(\"?\")[1];\n        var id = transactionID.split(\"=\")[1].split(\"&\")[0];\n\n        var company = this.decodeFromAlphanumeric(transactionID.split(\"=\")[2]);\n        this.isDraft = true;\n        this.transferTransactionID = id;\n        axiosClient\n          .get(\"/fetchEditDraftBranch\", {\n            params: {\n              company: company,\n              plID: id,\n            },\n          })\n          .then((response) => {\n            this.newTransaction.company = response.data[0].company;\n            this.newTransaction.branchName = response.data[0].branchName;\n            this.newTransaction.chainCode = response.data[0].chainCode;\n            this.newTransaction.transactionType = response.data[0].transactionType;\n            this.promoName = response.data[0].name;\n            this.promoEmail = response.data[0].promoEmail;\n            this.pullOutStartDate = response.data[0].dateStart;\n            this.pullOutEndDate = response.data[0].dateEnd;\n\n            if (\n              response.data[0].status == \"denied\" ||\n              response.data[0].status == \"endorsement\" ||\n              response.data[0].status == \"unprocessed\"\n            ) {\n              this.isDenied = false;\n              this.isCancel = true;\n              this.isApproved = true;\n              this.isSubmit = false;\n            } else {\n              this.isDenied = true;\n              this.isCancel = false;\n            }\n\n            axiosClient\n              .get(\"/fetchEditDraftItem\", {\n                params: {\n                  company: company,\n                  plID: id,\n                },\n              })\n              .then((response) => {\n                for (var x = 0; x < response.data.length; x++) {\n                  this.newTransaction.items.push(response.data[x]);\n                }\n\n                const filteredData = this.newTransaction.items.filter(\n                  (obj, index, self) => {\n                    const boxNumber = obj.boxNumber;\n                    return self.findIndex((o) => o.boxNumber === boxNumber) === index;\n                  }\n                );\n\n                const boxData = filteredData.map((obj) => {\n                  return {\n                    boxLabel: obj.boxLabel,\n                    boxNumber: obj.boxNumber,\n                  };\n                });\n\n                for (var x = 0; x < boxData.length; x++) {\n                  this.newTransaction.boxLabels.push({\n                    id: boxData[x].boxNumber,\n                    boxNumber: boxData[x].boxNumber,\n                    boxLabel: boxData[x].boxLabel,\n                  });\n                  this.newItemInputBox.push({\n                    id: boxData[x].boxNumber,\n                  });\n                }\n\n                // this.isDraft = false;\n                if (this.newTransaction.company) {\n                  this.isCompany = false;\n                  this.isChainCode = false;\n                  this.fetchCompany();\n                  this.fetchChainCode();\n                }\n\n                if (this.newTransaction.chainCode) {\n                  this.isChainCode = false;\n                  this.isBranchName = false;\n                  this.fetchChainName();\n                  this.fetchChainCode();\n                }\n\n                if (this.newTransaction.branchName) {\n                  this.isBranchName = false;\n                  this.isTransactionType = false;\n                  this.fetchChainName();\n                }\n\n                if (this.newTransaction.transactionType) {\n                  this.isCompany = false;\n                  this.isChainCode = false;\n                  this.isBranchName = false;\n                  this.isTransactionType = false;\n                }\n\n                if (this.newTransaction.items.length) {\n                  this.isCompany = true;\n                  this.isChainCode = true;\n                  this.isBranchName = true;\n                  this.isTransactionType = true;\n                }\n              })\n              .catch((error) => {\n                console.error(error);\n              });\n            axiosClient\n              .get(\"/fetchImageBranchDoc\", {\n                params: {\n                  transactionID: id,\n                  company: company,\n                },\n              })\n              .then((response) => {\n                this.images = response.data.imagePaths;\n              })\n              .catch((error) => {\n                console.error(error);\n              });\n          })\n          .catch((error) => {\n            console.error(error);\n          });\n      } catch {\n        //Fetching Promo Info\n        axiosClient\n          .get(\"/fetchPromoBranchInfo\", {\n            params: {\n              userID: sessionStorage.getItem(\"UserID\"),\n            },\n          })\n          .then((response) => {\n            this.newTransaction.company = response.data[0].company;\n            this.newTransaction.chainCode = response.data[0].chainCode;\n            this.newTransaction.branchName = response.data[0].branchName;\n            this.fetchChainCode();\n            this.fetchChainName();\n          })\n          .catch((error) => {});\n      }\n    },\n    cancelTransaction() {\n      if (\n        sessionStorage.getItem(\"Position\") == \"Reviewer\" ||\n        sessionStorage.getItem(\"Position\") == \"Approver\"\n      )\n        this.$router.push({\n          path: \"/pull-out/requests\",\n        });\n      else\n        this.$router.push({\n          path: \"/pull-out/pullout-transaction\",\n        });\n    },\n    updateData(updatedData) {},\n    openModal(data) {\n      data.boxLabels.forEach((box) => {\n        let tempIndex = box.boxLabel.indexOf(\"[\");\n        if (tempIndex > 0) box.boxLabel = box.boxLabel.substr(0, tempIndex).trim();\n      });\n      this.transferredData = data;\n    },\n    closeModal() {\n      this.addCategoryBoxLabel();\n      this.transferredData = \"\";\n    },\n    showButton(itemId) {\n      this.hoveredRow = itemId;\n    },\n    hideButton(itemId) {\n      this.hoveredRow = null;\n    },\n    removeItem(code, boxNumber) {\n      this.validateSubmit();\n\n      for (let key in this.newTransaction.items) {\n        if (\n          this.newTransaction.items[key].code === code &&\n          this.newTransaction.items[key].boxNumber === boxNumber\n        ) {\n          try {\n            this.tempRemoveItems.push(this.newTransaction.items[key].id);\n            const uri = window.location.href;\n            var transactionID = uri.split(\"?\")[1];\n            var id = transactionID.split(\"=\")[1].split(\"&\")[0];\n            var company = transactionID.split(\"=\")[2];\n            axiosClient\n              .post(\"/logsDeleteItemEdit\", {\n                id: id,\n                itemCode: this.newTransaction.items[key].code,\n                boxNumber: this.newTransaction.items[key].boxNumber,\n                userID: sessionStorage.getItem(\"UserID\"),\n              })\n              .then((response) => {})\n              .catch((error) => {\n                console.error(error);\n              });\n          } catch {}\n          this.newTransaction.items.splice(key, 1);\n          break;\n        }\n      }\n\n      this.notifyVue(\"DeleteItem\", \"bottom\", \"right\");\n    },\n    fetchItems() {\n      if (this.newItemInput.length >= 4) {\n        if (\n          this.newTransaction.company == \"NBFI\" ||\n          this.newTransaction.company == \"CMC\" ||\n          this.newTransaction.company == \"ASC\"\n        ) {\n          axiosClient\n            .get(\"/fetchItemsNBFI\", {\n              params: {\n                ItemNo: this.newItemInput,\n                barcode: this.barcode,\n              },\n            }) // Make a GET request to the specified URL\n            .then((response) => {\n              this.itemCodeList = response.data; // Update the 'data' variable with the retrieved data\n            })\n            .catch((error) => {});\n        } else {\n          axiosClient\n            .get(\"/fetchItems\", {\n              params: {\n                ItemNo: this.newItemInput,\n              },\n            }) // Make a GET request to the specified URL\n            .then((response) => {\n              this.itemCodeList = response.data; // Update the 'data' variable with the retrieved data\n            })\n            .catch((error) => {});\n        }\n      } else if (this.newItemInput.length == 0) this.itemCodeList = [];\n    },\n    compareItemCode() {\n      let value = this.newItemInput;\n      if (value.indexOf(\" - \") >= 0) {\n        let parts = value.split(\" - \");\n        this.newItemInput = parts[0];\n      }\n    },\n    handleQuantity(item) {\n      if (!item.quantity) {\n        item.quantity = 0;\n      }\n\n      item.quantity = Math.min(Math.max(item.quantity, 0), 150);\n      this.notifyVue(\"ItemQuantity\", \"bottom\", \"right\");\n    },\n    notifyVue(notify, verticalAlign, horizontalAlign) {\n      var notification = \"\";\n      let notifType = \"\";\n\n      if (notify === \"AddBoxLabel\") {\n        notification = NotifAddBoxLabel;\n        notifType = \"success\";\n      } else if (notify === \"AddItem\") {\n        notification = NotifAddItem;\n        notifType = \"success\";\n      } else if (notify === \"DeleteBoxLabel\") {\n        notification = NotifDeleteBoxLabel;\n        notifType = \"danger\";\n      } else if (notify === \"DeleteItem\") {\n        notification = NotifDeleteItem;\n        notifType = \"danger\";\n      } else if (notify === \"DraftSave\") {\n        notification = NotifDraftSave;\n        notifType = \"success\";\n      } else if (notify === \"ChangeBoxLabel\") {\n        notification = NotifItemChangeBoxLabel;\n        notifType = \"success\";\n      } else if (notify === \"ItemQuantity\") {\n        notification = NotifItemQuantity;\n        notifType = \"success\";\n      } else if (notify === \"RenameBoxLabel\") {\n        notification = NotifRenameBoxLabel;\n        notifType = \"success\";\n      } else {\n        notification = NotifSubmitTransaction;\n        notifType = \"success\";\n      }\n\n      this.$notify({\n        component: notification,\n        horizontalAlign: horizontalAlign,\n        verticalAlign: verticalAlign,\n        type: notifType,\n        props: {\n          customValue: \"Success\",\n        },\n      });\n    },\n    fetchCompany() {\n      if (\"User\" != sessionStorage.getItem(\"Position\"))\n        axiosClient\n          .get(\"/fetchCompany\")\n          .then((response) => {\n            this.companyList = response.data;\n          })\n          .catch((error) => {\n            console.error(error);\n          });\n      else\n        axiosClient\n          .get(\"/fetchCompanyByUser\", {\n            params: {\n              userID: sessionStorage.getItem(\"UserID\"),\n            },\n          })\n          .then((response) => {\n            this.companyList = response.data;\n          })\n          .catch((error) => {\n            console.error(error);\n          });\n      var company = sessionStorage.getItem(\"Company\");\n      if (company == \"NBFI\" || company == \"ASC\" || company == \"CMC\")\n        this.showCategoryBrand = true;\n      else this.showCategoryBrand = false;\n    },\n    fetchChainCode() {\n      if (\n        this.newTransaction.company == \"NBFI\" ||\n        this.newTransaction.company == \"CMC\" ||\n        this.newTransaction.company == \"ASC\"\n      )\n        this.isNBFI = true;\n      else this.isNBFI = false;\n\n      if (\"User\" == sessionStorage.getItem(\"Position\"))\n        axiosClient\n          .get(\"/fetchChainByUser\", {\n            params: {\n              company: this.newTransaction.company,\n              userID: sessionStorage.getItem(\"UserID\"),\n            },\n          })\n          .then((response) => {\n            this.chainCodeList = response.data;\n          })\n          .catch((error) => {\n            console.error(error);\n          });\n      else\n        axiosClient\n          .get(\"/fetchChain\", {\n            params: {\n              company: this.newTransaction.company,\n            },\n          })\n          .then((response) => {\n            this.chainCodeList = response.data;\n          })\n          .catch((error) => {\n            console.error(error);\n          });\n\n      this.isChainCode = false;\n    },\n    fetchChainName() {\n      if (\"User\" == sessionStorage.getItem(\"Position\"))\n        axiosClient\n          .get(\"/fetchChainNameByUser\", {\n            params: {\n              chainCode: this.newTransaction.chainCode,\n              userID: sessionStorage.getItem(\"UserID\"),\n            },\n          })\n          .then((response) => {\n            this.branchNameList = response.data;\n          })\n          .catch((error) => {\n            console.error(error);\n          });\n      else {\n        axiosClient\n          .get(\"/fetchChainName\", {\n            params: {\n              chainCode: this.newTransaction.chainCode,\n              company: this.newTransaction.company,\n            },\n          })\n          .then((response) => {\n            this.branchNameList = response.data;\n          })\n          .catch((error) => {\n            console.error(error);\n          });\n\n        this.isBranchName = false;\n      }\n    },\n    addItem(boxNUMBER) {\n      this.isItem = false;\n      this.isAddItem = false;\n      this.showItemInput = boxNUMBER;\n    },\n    saveItem(boxNUMBER) {\n      console.log(\"ItemCode:\", this.newItemInput);\n\n      if (this.barcode == \"item_16\") {\n        if (this.newItemInput.length > 16)\n          this.newItemInput = this.newItemInput.slice(0, 16);\n      } else {\n        this.newItemInput = this.newItemInput.slice(0, 12);\n      }\n      if (this.barcode == \"item_12\") {\n        axiosClient\n          .get(\"/fetchItemsBarcode\", {\n            params: {\n              ItemNo: this.newItemInput,\n              company: this.newTransaction.company,\n            },\n          })\n          .then((response) => {\n            this.newItemInput = response.data[0].ItemNo;\n          })\n          .catch((error) => {\n            console.error(error);\n          });\n      }\n      var checkItemData = true;\n      setTimeout(() => {\n        axiosClient\n          .get(\"/compareItemCode\", {\n            params: {\n              companyType: this.newTransaction.company,\n              ItemNo: this.newItemInput,\n            },\n          })\n          .then((response) => {\n            if (response.data.length == 0) {\n              checkItemData = false;\n            }\n            this.newItemCode = response.data[0].ItemNo;\n            this.newItemDescription = response.data[0].ItemDescription;\n            this.newStyleCode = response.data[0].StyleCode;\n\n            let brandCode = response.data[0].ItemNo.toString().substr(1, 2);\n\n            axiosClient\n              .get(\"/fetchBrands\", {\n                params: {\n                  companyType: this.newTransaction.company,\n                  brandCode: brandCode,\n                },\n              })\n              .then((response) => {\n                this.newBrand = response.data[0].brandNames;\n              })\n              .catch((error) => {\n                console.error(error);\n              });\n          })\n          .catch((error) => {\n            this.missItemCode = 0;\n            !this.newItemInput ? true : (this.isRightCode = true);\n          });\n      }, 300);\n      var newResponseData;\n\n      setTimeout(() => {\n        if (checkItemData) {\n          let confirmSave = false;\n          this.isNewItem = !this.newItemInput ? true : false;\n\n          if (this.isNewItem) {\n            this.isRightCode = false;\n            return 0;\n          }\n          axiosClient\n            .get(\"/fetchSameItem\", {\n              params: {\n                company: this.newTransaction.company,\n                ItemCode: this.newItemCode,\n                ItemDescription: this.newItemDescription,\n                StyleCode: this.newStyleCode,\n              },\n            })\n            .then((response) => {\n              newResponseData = response.data;\n              console.log(\"Fetch Same Item:\", response.data);\n            })\n            .catch((error) => {});\n        }\n      }, 500);\n\n      setTimeout(() => {\n        if (checkItemData) {\n          for (var x = 0; x < newResponseData.length; x++) {\n            var flag = true;\n            for (var i = 0; i < this.newTransaction.items.length; i++) {\n              if (\n                this.newTransaction.items[i].code == newResponseData[x].ItemNo &&\n                this.newTransaction.items[i].boxNumber == boxNUMBER\n              ) {\n                flag = false;\n                break;\n              }\n            }\n            if (flag) {\n              if (\n                this.newTransaction.company == \"NBFI\" ||\n                this.newTransaction.company == \"CMC\" ||\n                this.newTransaction.company == \"ASC\"\n              ) {\n                var categorybrand = this.newBrand;\n              } else {\n                var categorybrand = newResponseData[x].Category;\n              }\n              let tempItem = {\n                code: newResponseData[x].ItemNo,\n                description: newResponseData[x].ItemDescription,\n                categorybrand: categorybrand,\n                quantity: 0,\n                size: newResponseData[x].Size,\n                color: newResponseData[x].Color,\n                boxNumber: boxNUMBER,\n                category: newResponseData[x].Category,\n              };\n              this.newTransaction.items.push(tempItem);\n            }\n            this.isRightCode = false;\n            this.isItem = false;\n            this.isAddItem = true;\n            this.newItemInput = \"\";\n            this.showItemInput = \"\";\n            this.notifyVue(\"AddItem\", \"bottom\", \"right\");\n          }\n        }\n      }, 1000);\n    },\n    cancelItem() {\n      this.isRightCode = false;\n      this.isNewItem = false;\n      this.isItem = false;\n      this.isAddItem = true;\n      this.showItemInput = \"\";\n      this.newItemInput = \"\";\n    },\n    addBoxLabel() {\n      this.isBoxLabel = true;\n      this.isEditBLDisabled = true;\n    },\n    saveBoxLabel() {\n      this.isNewBoxLabel = !this.newBoxLabel ? true : false;\n\n      if (this.isNewBoxLabel) {\n        return 0;\n      }\n      this.isBoxLabel = false;\n      let tempBoxLabel = [];\n\n      if (this.newTransaction.boxLabels.length == 0) {\n        tempBoxLabel = {\n          id: this.newTransaction.boxLabels.length + 1,\n          boxNumber: this.newTransaction.boxLabels.length + 1,\n          boxLabel: this.newBoxLabel,\n        };\n      } else {\n        tempBoxLabel = {\n          id:\n            parseInt(\n              this.newTransaction.boxLabels[this.newTransaction.boxLabels.length - 1].id\n            ) + 1,\n          boxNumber: this.newTransaction.boxLabels.length + 1,\n          boxLabel: this.newBoxLabel,\n        };\n      }\n\n      let tempItem = [];\n\n      if (this.newTransaction.boxLabels.length == 0) {\n        tempItem = {\n          id: this.newTransaction.boxLabels.length + 1,\n        };\n      } else {\n        tempItem = {\n          id:\n            parseInt(\n              this.newTransaction.boxLabels[this.newTransaction.boxLabels.length - 1].id\n            ) + 1,\n        };\n      }\n\n      this.newTransaction.boxLabels.push(tempBoxLabel);\n      this.newItemInputBox.push(tempItem);\n      this.newBoxLabel = \"\";\n\n      //Disable the above select buttons\n      this.isCompany = true;\n      this.isChainCode = true;\n      this.isBranchName = true;\n      this.isTransactionType = true;\n      this.notifyVue(\"AddBoxLabel\", \"bottom\", \"right\");\n      this.isEditBLDisabled = false;\n    },\n    cancelBoxLabel() {\n      this.isNewBoxLabel = false;\n      this.isBoxLabel = false;\n      this.newBoxLabel = \"\";\n      if (this.newTransaction.boxLabels.length == 0) this.isEditBLDisabled = true;\n      else this.isEditBLDisabled = false;\n    },\n    async submit(confirmation) {\n      if (confirmation) {\n        try {\n          const uri = window.location.href;\n          var transactionID = uri.split(\"?\")[1];\n          var id = transactionID.split(\"=\")[1].split(\"&\")[0];\n\n          this.isValid.company = !this.newTransaction.company ? true : false;\n          this.isValid.chainCode = !this.newTransaction.chainCode ? true : false;\n          this.isValid.branchName = !this.newTransaction.branchName ? true : false;\n          this.isValid.transactionType = !this.newTransaction.transactionType\n            ? true\n            : false;\n          this.isValid.boxLabel = !this.newTransaction.boxLabels.length ? true : false;\n          this.isValid.item = !this.newTransaction.items.length ? true : false;\n\n          this.transactionDetails = this.newTransaction;\n          this.toSubmit = \"update\";\n          console.log(\"Transaction Details 1:\", this.transactionDetails);\n\n          // const updateBranch = await axiosClient.post(\"/updateBranchStatus\", {\n          //   userID: sessionStorage.getItem(\"UserID\"),\n          //   company: sessionStorage.getItem(\"Company\"),\n          //   status: \"endorsement\",\n          //   id: this.transferTransactionID,\n          //   email: sessionStorage.getItem(\"Email\"),\n          //   transactionData: this.transactionDetails,\n          //   removedItems: this.tempRemoveItems,\n          //   editStatus: true,\n          // });\n\n          this.transferTransactionID = id;\n\n          // console.log(\"Update:\", updateBranch);\n          // const transactionModal = new bootstrap.Modal(\"#transactionReceipt\");\n          // transactionModal.show();\n          const submitdatemodal = new bootstrap.Modal(\"#submiteditauthorizeddatemodal\");\n          submitdatemodal.show();\n        } catch {\n          this.isValid.company = !this.newTransaction.company ? true : false;\n          this.isValid.chainCode = !this.newTransaction.chainCode ? true : false;\n          this.isValid.branchName = !this.newTransaction.branchName ? true : false;\n          this.isValid.transactionType = !this.newTransaction.transactionType\n            ? true\n            : false;\n          this.isValid.boxLabel = !this.newTransaction.boxLabels.length ? true : false;\n          this.isValid.item = !this.newTransaction.items.length ? true : false;\n\n          this.transactionDetails = {\n            chainCode: this.newTransaction.chainCode,\n            companyType: this.newTransaction.company,\n            branchName: this.newTransaction.branchName,\n            transactionType: this.newTransaction.transactionType,\n            boxes: this.newTransaction.boxLabels,\n            items: this.newTransaction.items,\n            email: sessionStorage.getItem(\"Email\"),\n            status: \"endorsement\",\n          };\n\n          var id = await axiosClient.get(\"/getLastID\", {\n            params: {\n              company: sessionStorage.getItem(\"Company\"),\n            },\n          });\n          console.log(\"Last ID:\", id.data);\n          this.transferTransactionID = id.data;\n\n          this.toSubmit = \"save\";\n          // console.log(\"Items:\", this.newTransaction.items);\n          // console.log(\"Boxes:\", this.newTransaction.boxLabels);\n          // var response = await axiosClient.post(\"/savePullOutBranchRequest\", {\n          //   chainCode: this.newTransaction.chainCode,\n          //   companyType: this.newTransaction.company,\n          //   branchName: this.newTransaction.branchName,\n          //   transactionType: this.newTransaction.transactionType,\n          //   boxes: this.newTransaction.boxLabels,\n          //   items: this.newTransaction.items,\n          //   email: sessionStorage.getItem(\"Email\"),\n          //   status: \"endorsement\",\n          // });\n          // this.transferTransactionID = response.data;\n\n          // console.log(\"Save:\", response);\n          // const transactionModal = new bootstrap.Modal(\"#transactionReceipt\");\n          // transactionModal.show();\n          const submitdatemodal = new bootstrap.Modal(\"#submiteditauthorizeddatemodal\");\n          submitdatemodal.show();\n        }\n        this.saving_counter = this.files.length * 2;\n        setTimeout(this.handleFileUploadImage, 2000);\n      }\n    },\n    async draft(confirmation) {\n      if (confirmation) {\n        try {\n          const uri = window.location.href;\n          var transactionID = uri.split(\"?\")[1];\n          var id = transactionID.split(\"=\")[1].split(\"&\")[0];\n\n          const updateBranch = await axiosClient.post(\"/updateBranchStatus\", {\n            userID: sessionStorage.getItem(\"UserID\"),\n            company: sessionStorage.getItem(\"Company\"),\n            status: \"draft\",\n            id: this.transferTransactionID,\n            email: sessionStorage.getItem(\"Email\"),\n            transactionData: this.transactionDetails,\n            removedItems: this.tempRemoveItems,\n            editStatus: true,\n          });\n          const draftModal = new bootstrap.Modal(\"#draftModal\");\n          draftModal.show();\n        } catch {\n          console.log(\"Transactions:\", this.newTransaction);\n          var response = await axiosClient.post(\"/savePullOutBranchRequest\", {\n            chainCode: this.newTransaction.chainCode,\n            companyType: this.newTransaction.company,\n            branchName: this.newTransaction.branchName,\n            transactionType: this.newTransaction.transactionType,\n            boxes: this.newTransaction.boxLabels,\n            items: this.newTransaction.items,\n            email: sessionStorage.getItem(\"Email\"),\n            status: \"draft\",\n          });\n          this.transferTransactionID = response.data;\n\n          const draftModal = new bootstrap.Modal(\"#draftModal\");\n          draftModal.show();\n        }\n        this.saving_counter = this.files.length * 2;\n        setTimeout(this.handleFileUploadImage, 2000);\n      }\n    },\n    editBoxLabel(code, quantity, boxNumber) {\n      this.validateSubmit();\n\n      var filteredItems = this.newTransaction.items.filter(\n        (item) => item.code === code && item.boxNumber === boxNumber\n      );\n\n      var uniqueItems = [];\n      filteredItems.forEach((item) => {\n        var existingItem = uniqueItems.find(\n          (uniqueItem) => uniqueItem.code === item.code\n        );\n        if (existingItem) {\n          if (existingItem.quantity == 0 && item.quantity == 0) existingItem.quantity = 1;\n          else existingItem.quantity += item.quantity;\n        } else {\n          uniqueItems.push({ ...item });\n        }\n      });\n\n      this.newTransaction.items = this.newTransaction.items.filter(\n        (item) =>\n          item.code !== uniqueItems[0].code || item.boxNumber !== uniqueItems[0].boxNumber\n      );\n      this.newTransaction.items.push(uniqueItems[0]);\n      this.notifyVue(\"ChangeBoxLabel\", \"bottom\", \"right\");\n    },\n    decodeFromAlphanumeric(input) {\n      let result = \"\";\n\n      for (let i = 0; i < input.length; i += 2) {\n        const alphanumericChar = input.substr(i, 2);\n        const charCode = parseInt(alphanumericChar, 36);\n\n        result += String.fromCharCode(charCode);\n      }\n\n      return result;\n    },\n  },\n};\n</script>\n<style>\n.el-select {\n  width: 100%;\n  background-color: white;\n  border: 20px;\n  border-color: blueviolet;\n}\n\n.btn-transparent {\n  background-color: transparent;\n  border: none;\n  color: #000000;\n}\n\n.btn-transparent:hover {\n  background-color: rgba(0, 0, 0, 0.1);\n  color: #ffffff;\n}\n\n.table-font-size {\n  font-size: 14px;\n}\n\n.table-input-box {\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n  padding: 14px;\n  border: 1px solid transparent;\n  transition: border-color 0.3s ease-in-out;\n  background-color: transparent;\n}\n\n.table-select-box {\n  /* border: 5px solid green !important; */\n  transition: border-color 0.3s ease-in-out;\n  /* background-color: yellow; */\n  border-radius: 0px !important;\n  background-color: transparent !important;\n}\n\n.table-select-box.el-select .el-input input {\n  border-radius: 0px !important;\n  border: 5px solid transparent !important;\n  background-color: transparent;\n}\n\ntd {\n  display: table-cell !important;\n  padding: 0px !important;\n  /* background-color: #111111 !important; */\n}\ntable {\n  border-collapse: collapse !important;\n}\n.bold-button {\n  font-weight: bold !important;\n}\n/* .tblItemsCell {\n  padding-top: 10px;\n  padding: 10px;\n  color: red;\n} */\n\n.input-datalist {\n  display: block !important;\n  width: 100% !important;\n  margin-bottom: 10px !important;\n  position: relative !important;\n  appearance: none !important;\n  font-weight: 400 !important;\n  background-clip: padding-box !important;\n  border: 1px solid #66615b !important;\n  border-radius: 5px !important;\n  padding: 9px !important;\n  outline: none;\n  /* border: 1pc solid gray; */\n}\n\n.gendelete-buttons {\n  background-color: transparent;\n  color: red;\n  border: none;\n  cursor: pointer;\n}\n\n.label-font {\n  color: red !important;\n}\n\n/* .table-delete:hover {\n  color: red !important;\n  cursor: pointer;\n} */\n\n.card-attachment {\n  background-color: #66615b;\n}\n\n.card-generator {\n  margin-top: 100px;\n}\n\n.box-with-shadow {\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.06);\n  padding: 10px;\n}\n\n.pic-button {\n  padding-top: 5px;\n  padding-bottom: 5px;\n  font-size: 10px !important;\n}\n\n.w-full {\n  width: 100% !important;\n}\n.h-div-32 {\n  height: 32.2px !important;\n}\n.importBtn {\n  width: 100% !important;\n  height: 100% !important;\n  padding: 0.8vh !important;\n}\n\n.image-container {\n  position: relative;\n  width: fit-content;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.06);\n  border-radius: 6px;\n  padding: 5px;\n  overflow: hidden;\n}\n.image-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  opacity: 0;\n  transition: background 0.5s ease;\n  transition: opacity 0.5s ease;\n  border-radius: 6px;\n}\n.image-overlay:hover {\n  backdrop-filter: blur(1px);\n  background: rgba(0, 0, 0, 0.2);\n  opacity: 1;\n}\n.image-overlay-button {\n  width: 25% !important;\n  height: 25% !important;\n  /* height: 25% !important; */\n}\n.imageUpload {\n  /* position: absolute; */\n  display: block;\n  width: 10vw;\n}\n\n.imageClose {\n  display: block;\n  height: 23px;\n  font-size: 20px;\n  position: absolute;\n  top: -7px;\n  right: 1px;\n  color: red !important;\n  padding: 1.5px;\n  overflow: hidden;\n  text-decoration: none;\n  border-bottom-left-radius: 2.5px;\n  background-color: white;\n}\n\n.span-upload-image {\n  border: solid;\n  border-left: none;\n  border-width: 1px;\n  border-radius: 4px;\n  border-top-left-radius: 0px;\n  border-bottom-left-radius: 0px;\n  padding: 8px 9px;\n  width: fit-content;\n  white-space: nowrap;\n  display: inline-block;\n}\n\n@media (max-width: 767px) {\n  .span-upload-image {\n    text-align: center;\n    border: solid;\n    border-width: 1px;\n    border-radius: 4px;\n    padding: 8px 9px;\n    width: 100%;\n    white-space: nowrap;\n    text-overflow: clip;\n    overflow: hidden;\n    margin-top: 2px;\n    display: inline-block;\n  }\n}\n@media (max-width: 575px) {\n  .imageUpload {\n    width: 40vw;\n  }\n}\n@media (min-width: 576px) {\n  .imageUpload {\n    width: 30vw;\n  }\n}\n@media (min-width: 768px) {\n  .imageUpload {\n    width: 20vw;\n  }\n}\n@media (min-width: 1283px) {\n  .imageUpload {\n    width: 15vw;\n  }\n}\n@media (min-width: 1400px) {\n  .imageUpload {\n    width: 10vw;\n  }\n}\n\n.el-table .warning-row {\n  background: rgb(253, 230, 230) !important;\n}\n</style>\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6lBA,SAAAA,QAAA,EAAAC,YAAA,EAAAC,IAAA,EAAAC,OAAA,EAAAC,IAAA;AAaA,OAAAC,SAAA;AACA,OAAAC,OAAA;AACA,OAAAC,OAAA;AACA,OAAAC,GAAA;AACA,OAAAC,oBAAA;AACA,OAAAC,gBAAA;AACA,OAAAC,YAAA;AACA,OAAAC,mBAAA;AACA,OAAAC,eAAA;AACA,OAAAC,cAAA;AACA,OAAAC,uBAAA;AACA,OAAAC,iBAAA;AACA,OAAAC,mBAAA;AACA,OAAAC,sBAAA;AACA,OAAAC,6BAAA;AACA,OAAAC,IAAA;AAEA,OAAAC,WAAA;AACA,OAAAC,iBAAA;AACA,OAAAC,uBAAA;AACA,OAAAC,iCAAA;AACA,OAAAC,UAAA;AACA,OAAAC,QAAA;AACA,OAAAC,8BAAA;AACA,OAAAC,6BAAA;AACA,YAAAC,IAAA;AAEA,OAAAC,KAAA;AAEAtB,GAAA,CAAAuB,GAAA,CAAAC,MAAA;AACAxB,GAAA,CAAAuB,GAAA,CAAAE,YAAA;AACAzB,GAAA,CAAAuB,GAAA,CAAAG,WAAA;AACA1B,GAAA,CAAAuB,GAAA,CAAAI,OAAA;AAEA;EACAC,UAAA;IACA,CAAAC,WAAA,CAAAC,IAAA,GAAAD,WAAA;IACA,CAAAE,WAAA,CAAAD,IAAA,GAAAC,WAAA;IACA,CAAAC,OAAA,CAAAF,IAAA,GAAAE,OAAA;IACA,CAAAC,IAAA,CAAAH,IAAA,GAAAG,IAAA;IACA,CAAAC,MAAA,CAAAJ,IAAA,GAAAI,MAAA;IACA,CAAAC,OAAA,CAAAL,IAAA,GAAAK,OAAA;IACA,CAAAC,OAAA,CAAAN,IAAA,GAAAM,OAAA;IACArC,OAAA;IACAD,OAAA;IACAD,SAAA;IACAF,OAAA;IACAD,IAAA;IACAD,YAAA;IACAD,QAAA;IACAI,IAAA;IACAK,oBAAA;IACAC,gBAAA;IACAC,YAAA;IACAC,mBAAA;IACAC,eAAA;IACAC,cAAA;IACAC,uBAAA;IACAC,iBAAA;IACAC,mBAAA;IACAC,sBAAA;IACAI,iBAAA;IACAC,uBAAA;IACAC,iCAAA;IACAC,UAAA;IACAE,8BAAA;IACAC,6BAAA;IACAJ,iCAAA;IACAL;EACA;EACA0B,KAAA;IACA;MACAC,eAAA;MACAC,iBAAA;MACAC,eAAA;MACAC,eAAA;MACAC,SAAA;MACAC,WAAA;MACAC,YAAA;MACAC,iBAAA;MACAC,YAAA;MACAC,YAAA;MACAC,gBAAA;MACAC,UAAA;MACAC,MAAA;MACAC,SAAA;MACAC,gBAAA;MACAC,aAAA;MACAC,WAAA;MACAC,aAAA;MACAC,cAAA;MACAC,cAAA;QAEAC,OAAA;QACAC,SAAA;QACAC,UAAA;QACAC,eAAA;QACAC,SAAA;QACAC,KAAA;MACA;MACAC,eAAA;MACAC,OAAA;QACAP,OAAA;QACAC,SAAA;QACAC,UAAA;QACAC,eAAA;QACAK,QAAA;QACAC,IAAA;MACA;MACAC,UAAA;MACAC,QAAA;MACAC,QAAA;MACAC,UAAA;MACAC,mBAAA;MACAC,mBAAA;MAEAC,mBAAA,GACA;QACAC,KAAA;QACAC,KAAA;QACAlB,OAAA;MACA,GACA;QACAiB,KAAA;QACAC,KAAA;QACAlB,OAAA;MACA,GACA;QACAiB,KAAA;QACAC,KAAA;QACAlB,OAAA;MACA,GACA;QACAiB,KAAA;QACAC,KAAA;QACAlB,OAAA;MACA,GACA;QACAiB,KAAA;QACAC,KAAA;QACAlB,OAAA;MACA,GACA;QACAiB,KAAA;QACAC,KAAA;QACAlB,OAAA;MACA,EACA;MACAmB,WAAA;MACAC,YAAA;MACAC,QAAA;MACAC,kBAAA;MACAC,YAAA;MACAC,WAAA;MACAC,aAAA;QACAC,SAAA;MACA;MACAC,MAAA;QACAC,OAAA;QACAC,MAAA;QACAC,IAAA;MACA;MACAC,aAAA;MACAC,SAAA;MACAC,WAAA;MACAC,qBAAA;MACAC,YAAA;MACAC,eAAA;MACAC,QAAA;MACAC,SAAA;MACAC,MAAA;MACAC,OAAA;MACAC,WAAA,GACA,oCACA,6CACA,8DACA,iCACA,0CACA,2DACA,gDACA,yDACA,yEACA;MACAC,MAAA;MACAC,KAAA;MACAC,WAAA;MACAC,WAAA;QACAC,SAAA;QACA5B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"},"metadata":{},"sourceType":"module","externalDependencies":[]}