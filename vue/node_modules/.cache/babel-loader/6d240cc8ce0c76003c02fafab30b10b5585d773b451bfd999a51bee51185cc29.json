{"ast":null,"code":"import _Select2 from \"element-ui/lib/theme-chalk/select.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Select from \"element-ui/lib/select\";\nimport _Option2 from \"element-ui/lib/theme-chalk/option.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Option from \"element-ui/lib/option\";\nimport _Input2 from \"element-ui/lib/theme-chalk/input.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Input from \"element-ui/lib/input\";\nimport _Tag2 from \"element-ui/lib/theme-chalk/tag.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Tag from \"element-ui/lib/tag\";\nimport _Slider2 from \"element-ui/lib/theme-chalk/slider.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Slider from \"element-ui/lib/slider\";\nimport _TimeSelect2 from \"element-ui/lib/theme-chalk/time-select.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _TimeSelect from \"element-ui/lib/time-select\";\nimport _DatePicker2 from \"element-ui/lib/theme-chalk/date-picker.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _DatePicker from \"element-ui/lib/date-picker\";\nimport _TableColumn2 from \"element-ui/lib/theme-chalk/table-column.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _TableColumn from \"element-ui/lib/table-column\";\nimport _Table2 from \"element-ui/lib/theme-chalk/table.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Table from \"element-ui/lib/table\";\nimport { Collapse, CollapseItem, Tabs, TabPane, Card, Button } from \"src/components/UIComponents\";\nimport PProgress from \"src/components/UIComponents/Progress.vue\";\nimport PSwitch from \"src/components/UIComponents/Switch.vue\";\nimport Vue from \"vue\";\nimport NotificationTemplate from \"../Components/NotificationTemplate\";\nimport NotifAddBoxLabel from \"../Components/Notification/NotifSuccessAddBoxLabel.vue\";\nimport NotifAddItem from \"../Components/Notification/NotifSuccessAddItem.vue\";\nimport NotifDeleteBoxLabel from \"../Components/Notification/NotifSuccessDeleteBoxLabel.vue\";\nimport NotifDeleteItem from \"../Components/Notification/NotifSuccessDeleteItem.vue\";\nimport NotifDraftSave from \"../Components/Notification/NotifSuccessDraftSave.vue\";\nimport NotifItemChangeBoxLabel from \"../Components/Notification/NotifSuccessItemChangeBoxLabel.vue\";\nimport NotifItemQuantity from \"../Components/Notification/NotifSuccessItemQuantity.vue\";\nimport NotifRenameBoxLabel from \"../Components/Notification/NotifSuccessRenameBoxLabel.vue\";\nimport NotifSubmitTransaction from \"../Components/Notification/NotifSuccessSubmitTransaction.vue\";\nimport Swal from \"sweetalert2\";\nimport axiosClient from \"../../../../axios\";\nimport EditBoxLabelModal from \"./PullOutRequests/ModalPullOut/EditBoxLabelModal.vue\";\nimport TransactionReceiptModal from \"./PullOutRequests/ModalPullOut/TransactionReceiptModal.vue\";\nimport EditSubmitTransactionReceiptModal from \"./PullOutRequests/ModalPullOut/EditSubmitTransactionReceiptModal.vue\";\nimport DraftModal from \"./PullOutRequests/ModalPullOut/DraftModal.vue\";\nimport linkName from \"../../../../linkName\";\nimport ConfirmationSubmitPullOutModal from \"./PullOutRequests/ModalPullOut/ConfirmationSubmitPullOutModal.vue\";\nimport ConfirmationDraftPullOutModal from \"./PullOutRequests/ModalPullOut/ConfirmationDraftPullOutModal.vue\";\nimport * as XLSX from \"xlsx\";\nVue.use(_Table);\nVue.use(_TableColumn);\nexport default {\n  components: {\n    [_DatePicker.name]: _DatePicker,\n    [_TimeSelect.name]: _TimeSelect,\n    [_Slider.name]: _Slider,\n    [_Tag.name]: _Tag,\n    [_Input.name]: _Input,\n    [Button.name]: Button,\n    [_Option.name]: _Option,\n    [_Select.name]: _Select,\n    PSwitch,\n    PProgress,\n    TabPane,\n    Tabs,\n    CollapseItem,\n    Collapse,\n    Card,\n    NotificationTemplate,\n    NotifAddBoxLabel,\n    NotifAddItem,\n    NotifDeleteBoxLabel,\n    NotifDeleteItem,\n    NotifDraftSave,\n    NotifItemChangeBoxLabel,\n    NotifItemQuantity,\n    NotifRenameBoxLabel,\n    NotifSubmitTransaction,\n    EditBoxLabelModal,\n    TransactionReceiptModal,\n    EditSubmitTransactionReceiptModal,\n    DraftModal,\n    ConfirmationSubmitPullOutModal,\n    ConfirmationDraftPullOutModal,\n    EditSubmitTransactionReceiptModal\n  },\n  data() {\n    return {\n      showCategoryBrand: true,\n      showUploadImage: true,\n      transferredData: \"\",\n      isCompany: false,\n      isChainCode: true,\n      isBranchName: true,\n      isTransactionType: true,\n      isShowButton: false,\n      itemCodeList: [],\n      isEditBLDisabled: false,\n      isBoxLabel: false,\n      isItem: false,\n      isAddItem: true,\n      isDisabledSubmit: true,\n      showItemInput: \"\",\n      companyList: [],\n      chainCodeList: [],\n      branchNameList: [],\n      newTransaction: {\n        company: \"\",\n        chainCode: \"\",\n        branchName: \"\",\n        transactionType: \"\",\n        boxLabels: [],\n        items: []\n      },\n      newItemInputBox: [],\n      isValid: {\n        company: false,\n        chainCode: false,\n        branchName: false,\n        transactionType: false,\n        boxLabel: false,\n        item: false\n      },\n      isApproved: false,\n      isCancel: false,\n      isSubmit: true,\n      hoveredRow: null,\n      uploadImageFileName: \"Choose an Image\",\n      uploadExcelFileName: \"Choose a File\",\n      transactionTypeList: [{\n        value: \"CPO Item for Disposal in the Store c/o Supervisor\",\n        label: \"CPO Item for Disposal in the Store c/o Supervisor\",\n        company: \"NBFI\"\n      }, {\n        value: \"CPO for Transfer to Another Store\",\n        label: \"CPO for Transfer to Another Store\",\n        company: \"NBFI\"\n      }, {\n        value: \"CPO Back to WH via In-House Service\",\n        label: \"CPO Back to WH via In-House Service\",\n        company: \"NBFI\"\n      }, {\n        value: \"CPO Back to WH via Chain Distribution Center\",\n        label: \"CPO Back to WH via Chain Distribution Center\",\n        company: \"NBFI\"\n      }, {\n        value: \"CPO Back to WH via 3rd Party Trucking\",\n        label: \"CPO Back to WH via 3rd Party Trucking\",\n        company: \"NBFI\"\n      }, {\n        value: \"CPO Back to WH c/o Supervisor\",\n        label: \"CPO Back to WH c/o Supervisor\",\n        company: \"NBFI\"\n      }],\n      newBoxLabel: \"\",\n      newItemInput: \"\",\n      newBrand: \"\",\n      newItemDescription: \"\",\n      newStyleCode: \"\",\n      newItemCode: \"\",\n      notifications: {\n        topCenter: false\n      },\n      modals: {\n        classic: false,\n        notice: false,\n        mini: false\n      },\n      isNewBoxLabel: false,\n      isNewItem: false,\n      isRightCode: false,\n      transferTransactionID: \"\",\n      uniqueItemss: [],\n      duplicateItemss: [],\n      isDenied: true,\n      dataArray: [],\n      myData: [],\n      counter: 0,\n      remarksList: [\"CLOSED STORE/BRANCH - GOOD ITEMS\", \"CLOSED STORE/BRANCH - DAMAGED/DIRTY ITEMS\", \"CLOSED STORE/BRANCH - DISPOSAL/CONTAINS BROKEN GLASS ITEMS\", \"REGULAR PULL-OUT - GOOD ITEMS\", \"REGULAR PULL-OUT - DAMAGED/DIRTY ITEMS\", \"REGULAR PULL-OUT - DISPOSAL/CONTAINS BROKEN GLASS ITEMS\", \"STORE TO STORE/BRANCH TO BRANCH - GOOD ITEMS\", \"STORE TO STORE/BRANCH TO BRANCH - DAMAGED/DIRTY ITEMS\", \"STORE TO STORE/BRANCH TO BRANCH - DISPOSAL/CONTAINS BROKEN GLASS ITEMS\"],\n      images: [],\n      files: [],\n      img_counter: 0,\n      strCategory: {\n        boxNumber: 0,\n        label: \"\"\n      },\n      isDraft: false,\n      barcode: \"item_16\",\n      saving_counter: null,\n      isMobile: null,\n      headerCellStyle: {\n        color: \"black\"\n      },\n      cellStyle: {\n        color: \"black\",\n        fontWeight: \"normal\"\n      },\n      tableColumns: [{\n        prop: \"\",\n        label: \"\",\n        type: \"selection\",\n        width: \"40\",\n        minWidth: \"\"\n      }, {\n        prop: \"code\",\n        label: \"Item Code\",\n        type: \"\",\n        width: \"155\",\n        minWidth: \"\"\n      }, {\n        prop: \"description\",\n        label: \"Description\",\n        type: \"\",\n        width: \"\",\n        minWidth: \"450\"\n      }, {\n        prop: \"size\",\n        label: \"Size\",\n        type: \"\",\n        width: \"55\",\n        minWidth: \"\"\n      }, {\n        prop: \"color\",\n        label: \"Color\",\n        type: \"\",\n        width: \"\",\n        minWidth: \"100\"\n      }, {\n        prop: \"category\",\n        label: \"Category\",\n        type: \"\",\n        width: \"\",\n        minWidth: \"300\"\n      }]\n    };\n  },\n  computed: {\n    filteredRemarks() {\n      return this.remarksList.filter(newBoxLabel => {\n        return newBoxLabel.toLowerCase().includes(this.newBoxLabel.toLowerCase());\n      });\n    },\n    sortedBoxes() {\n      return this.newTransaction.boxLabels.sort((a, b) => a.boxNumber - b.boxNumber);\n    },\n    getItemBoxLabel() {\n      return boxNumber => {\n        const boxLabel = this.newTransaction.boxLabels.find(label => label.boxNumber === boxNumber);\n        return boxLabel ? boxLabel.boxLabel : \"\";\n      };\n    }\n  },\n  mounted() {\n    const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n    const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));\n    let tooltipExcel = bootstrap.Tooltip.getInstance(\"#excelBtn\");\n    tooltipExcel._config.title = \"Only XLSX file with a standard Template (Column A: Box Number, Column B: Box Label, Column C: Item Code, Column D: Quantity)\";\n    tooltipExcel.update();\n    this.fetchEdit();\n    this.fetchCompany();\n    if (window.resolveRouteChange) {\n      window.resolveRouteChange();\n      window.resolveRouteChange = null;\n    }\n    linkName.val = \"Pull-Out Requisition Form\";\n    this.isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n  },\n  watch: {\n    newTransaction: {\n      handler(val) {\n        this.validateSubmit();\n      },\n      deep: true\n    },\n    \"newTransaction.items\": function (val, oldVal) {\n      this.addCategoryBoxLabel();\n    },\n    \"newTransaction.boxLabels\": function (val, oldVal) {\n      this.enableDropDowns();\n    },\n    \"newTransaction.company\": function (val, oldVal) {\n      this.showButtons();\n    },\n    \"newTransaction.chainCode\": function (val, oldVal) {\n      this.showButtons();\n    },\n    \"newTransaction.branchName\": function (val, oldVal) {\n      this.showButtons();\n    },\n    \"newTransaction.transactionType\": function (val, oldVal) {\n      this.showButtons();\n    },\n    barcode: function (val, oldVal) {\n      this.clearItemInput();\n    },\n    sortedBoxes(newSortedBoxes) {\n      Vue.set(this, \"newTransaction.boxLabels\", newSortedBoxes);\n    }\n  },\n  methods: {\n    reArrangeItems(deletedBoxNumber) {\n      console.log(\"Deleted ID Box Number\", deletedBoxNumber);\n      this.newTransaction.items.forEach(temp => {\n        if (deletedBoxNumber < temp.boxNumber) temp.boxNumber--;\n      });\n    },\n    reArrangeBoxNumber(transfer) {\n      console.log(\"Transfer from edit box Label\", transfer);\n      this.newTransaction.boxLabels = transfer;\n      console.log(\"New Transfer from edit box Label\", this.newTransaction.boxLabels);\n      this.newItemInputBox = [];\n      this.newTransaction.boxLabels.forEach(boxLabel => {\n        var tempIdBox = {\n          id: boxLabel.id\n        };\n        this.newItemInputBox.push(tempIdBox);\n      });\n      console.log(\"Itemssssss:\", this.newTransaction.items);\n    },\n    clearItemInput() {\n      this.newItemInput = \"\";\n    },\n    restrictChar($event) {\n      let keyCode = $event.keyCode ? $event.keyCode : $event.which;\n      if (keyCode == 91 || keyCode == 93) {\n        $event.preventDefault();\n      }\n    },\n    addCategoryBoxLabel() {\n      if (this.isDraft == false) {\n        this.newTransaction.boxLabels.forEach(box => {\n          var filteredItems = this.newTransaction.items.filter(item => item.boxNumber === box.boxNumber);\n          var uniqueCategory = [...new Set(filteredItems.map(item => item.categorybrand))];\n          let strCategory = \"\";\n          for (let i = 0; i < uniqueCategory.length; i++) {\n            if (i == 0) strCategory = \" [ \" + uniqueCategory[i];else strCategory = strCategory + \", \" + uniqueCategory[i];\n            if (i == uniqueCategory.length - 1) strCategory = strCategory + \" ]\";\n          }\n          let tempIndex = box.boxLabel.indexOf(\"[\");\n          if (tempIndex > 0) box.boxLabel = box.boxLabel.substr(0, tempIndex).trim();\n          box.boxLabel = box.boxLabel + strCategory;\n        });\n      }\n    },\n    filterRemarks() {\n      this.filteredRemarks = this.remarksList.filter(newBoxLabel => {\n        return newBoxLabel.toLowerCase().includes(this.newBoxLabel.toLowerCase());\n      });\n    },\n    onFileChange(e) {\n      var files = e.target.files || e.dataTransfer.files;\n      var file = e.target.files[0];\n      const maxSizeInBytes = 2 * 1024 * 1024;\n      if (file && file.size > maxSizeInBytes) {\n        alert(\"Please select an image file smaller than 2MB.\");\n        e.target.value = \"\";\n        return;\n      } else {\n        this.files.push(e.target.files[0]);\n        if (!files.length) return;\n        this.createImage(files);\n        this.uploadImageFileName = e.target.files[0].name;\n      }\n    },\n    createImage(files) {\n      var vm = this;\n      for (var index = 0; index < files.length; index++) {\n        var reader = new FileReader();\n        reader.onload = function (event) {\n          const imageUrl = event.target.result;\n          vm.images.push(imageUrl);\n        };\n        reader.readAsDataURL(files[index]);\n      }\n    },\n    removeImage(index) {\n      this.images.splice(index, 1);\n      this.uploadImageFileName = \"Choose an Image\";\n    },\n    clearImage() {\n      document.getElementById(\"formFile\").value = null;\n      frame.src = \"\";\n    },\n    handleFileUploadImage() {\n      console.log(\"image:\", this.files);\n      console.log(\"Transaction ID:\", this.transferTransactionID);\n      const config = {\n        headers: {\n          \"content-type\": \"multipart/form-data\"\n        }\n      };\n      if (this.img_counter < this.files.length) {\n        axiosClient.post(\"/upload\", {\n          image: this.files[this.img_counter],\n          company: this.newTransaction.company,\n          branchName: this.newTransaction.branchName,\n          transactionID: this.transferTransactionID\n        }, config).then(response => {\n          console.log(\"Success Upload Image\", response.data);\n          this.img_counter++;\n          setTimeout(this.handleFileUploadImage, 2000);\n        }).catch(error => {\n          console.error(error);\n        });\n      }\n    },\n    handleFileUpload(event) {\n      console.log(\"File Name: \", event.target.files[0]);\n      if (event.target.files.length != 0) {\n        this.uploadExcelFileName = event.target.files[0].name;\n        const file = event.target.files[0];\n        const reader = new FileReader();\n        reader.onload = e => {\n          const data = new Uint8Array(e.target.result);\n          const workbook = XLSX.read(data, {\n            type: \"array\"\n          });\n          const worksheetName = workbook.SheetNames[0];\n          const worksheet = workbook.Sheets[worksheetName];\n          const jsonData = XLSX.utils.sheet_to_json(worksheet, {\n            header: 1\n          });\n          console.log(\"Excel Data\", jsonData);\n          this.myData = jsonData;\n          let arrayBox = [];\n          for (var x = 0; x < this.myData.length; x++) {\n            this.dataArray.push(this.myData[x]);\n            arrayBox.push(this.myData[x][1]);\n          }\n          console.log(\"Data:\", this.dataArray);\n          console.log(\"Import Excel\", this.dataArray.length);\n          const filteredArray = arrayBox.filter((value, index, self) => {\n            return self.indexOf(value) === index;\n          });\n          let tempBoxLabel = [];\n          for (var x = 0; x < filteredArray.length; x++) {\n            tempBoxLabel = {\n              id: x + 1,\n              boxNumber: x + 1,\n              boxLabel: filteredArray[x]\n            };\n            this.newTransaction.boxLabels.push(tempBoxLabel);\n            let tempItem = [];\n            if (this.newTransaction.boxLabels.length == 0) {\n              tempItem = {\n                id: this.newTransaction.boxLabels.length + 1\n              };\n            } else {\n              tempItem = {\n                id: this.newTransaction.boxLabels[this.newTransaction.boxLabels.length - 1].id + 1\n              };\n            }\n            this.newItemInputBox.push(tempItem);\n          }\n          console.log(filteredArray);\n          this.counter = 0;\n          this.saveItemsExcel();\n        };\n        reader.readAsArrayBuffer(file);\n      }\n    },\n    saveItemsExcel() {\n      if (this.counter < this.dataArray.length) {\n        var boxNumber = this.dataArray[this.counter][0];\n        var quantity = this.dataArray[this.counter][3];\n        axiosClient.get(\"/fetchSameItems\", {\n          params: {\n            company: this.newTransaction.company,\n            ItemNo: this.dataArray[this.counter][2]\n          }\n        }).then(response => {\n          console.log(\"Data\", response.data);\n          if (response.data.length == 0) {\n            setTimeout(this.saveItemsExcel, 2000);\n          }\n          for (var x = 0; x < response.data.length; x++) {\n            var flag = true;\n            for (var i = 0; i < this.newTransaction.items.length; i++) {\n              if (this.newTransaction.items[i].code == response.data[x].ItemNo && this.newTransaction.items[i].boxNumber == boxNumber) {\n                this.newTransaction.items[i].quantity = parseInt(this.newTransaction.items[x].quantity) + 1;\n                flag = false;\n                break;\n              }\n            }\n            if (flag) {\n              let tempItem = {\n                code: response.data[x].ItemNo,\n                description: response.data[x].ItemDescription,\n                categorybrand: response.data[x].brandNames,\n                quantity: quantity,\n                size: response.data[x].Size,\n                color: response.data[x].Color,\n                boxNumber: parseInt(boxNumber),\n                category: response.data[x].Category\n              };\n              this.newTransaction.items.push(tempItem);\n            }\n            console.log(\"Items\", this.newTransaction.items);\n            this.isAddItem = true;\n            this.notifyVue(\"AddItem\", \"bottom\", \"right\");\n            setTimeout(this.saveItemsExcel, 2000);\n          }\n        }).catch(error => {\n          console.error(error);\n        });\n      }\n      this.counter++;\n    },\n    numberOnly($event) {\n      let keyCode = $event.keyCode ? $event.keyCode : $event.which;\n      if (keyCode < 48 || keyCode > 57) {\n        $event.preventDefault();\n      }\n    },\n    validateSubmit() {\n      let uniqueItems = [...new Set(this.newTransaction.items.map(item => item.boxNumber))];\n      let itemsValidation = false;\n      let itemsValidationTemp = false;\n      for (let j in this.newTransaction.boxLabels) {\n        for (let i in uniqueItems) {\n          if (uniqueItems[i] == this.newTransaction.boxLabels[j].id) {\n            itemsValidationTemp = true;\n            itemsValidation = true;\n            break;\n          } else {\n            itemsValidation = false;\n            itemsValidationTemp = false;\n          }\n        }\n      }\n      for (let x in this.newTransaction.items) {\n        if (this.newTransaction.items[x].quantity == 0) {\n          itemsValidation = false;\n          const submitTooltip = document.getElementById(\"submitBTN\");\n          const tooltip = new bootstrap.Tooltip(submitTooltip, {\n            title: \"No items should have a quantity of 0.\"\n          });\n          tooltip.update();\n          break;\n        }\n      }\n      if (!itemsValidationTemp) {\n        const submitTooltip = document.getElementById(\"submitBTN\");\n        const tooltip = new bootstrap.Tooltip(submitTooltip, {\n          title: \"Kindly add item/s on every boxes you've added.\"\n        });\n        tooltip.update();\n      }\n      if (!this.newTransaction.company || !this.newTransaction.chainCode || !this.newTransaction.branchName || !this.newTransaction.transactionType) {\n        const submitTooltip = document.getElementById(\"submitBTN\");\n        const tooltip = new bootstrap.Tooltip(submitTooltip, {\n          title: \"Complete the form above to enable this button.\"\n        });\n        tooltip.update();\n      } else if (this.newTransaction.boxLabels.length <= 0) {\n        const submitTooltip = document.getElementById(\"submitBTN\");\n        const tooltip = new bootstrap.Tooltip(submitTooltip, {\n          title: \"No box added. Kindly add box/es to be able to add item/s.\"\n        });\n        tooltip.update();\n      } else if (this.newTransaction.items.length <= 0) {\n        const submitTooltip = document.getElementById(\"submitBTN\");\n        const tooltip = new bootstrap.Tooltip(submitTooltip, {\n          title: \"No items added. Kindly add item/s for this pull-out request.\"\n        });\n        tooltip.update();\n      }\n      if (this.newTransaction.company && this.newTransaction.chainCode && this.newTransaction.branchName && this.newTransaction.transactionType && this.newTransaction.boxLabels.length > 0 && itemsValidation) {\n        this.isDisabledSubmit = false;\n        let tooltip = bootstrap.Tooltip.getInstance(\"#submitBTN\");\n        tooltip.disable();\n      } else this.isDisabledSubmit = true;\n    },\n    editingBoxLabel({\n      index,\n      value,\n      tempBL\n    }) {\n      if (value) this.newTransaction.boxLabels[index].boxLabel = value;else this.newTransaction.boxLabels[index].boxLabel = tempBL;\n    },\n    enableDropDowns() {\n      if (this.newTransaction.boxLabels.length == 0) {\n        this.isCompany = false;\n        this.isChainCode = false;\n        this.isBranchName = false;\n        this.isTransactionType = false;\n        this.isEditBLDisabled = true;\n      } else this.isEditBLDisabled = false;\n    },\n    showButtons() {\n      if (this.newTransaction.company && this.newTransaction.chainCode && this.newTransaction.branchName && this.newTransaction.transactionType) {\n        this.isShowButton = true;\n        if (this.newTransaction.boxLabels.length == 0) this.isEditBLDisabled = true;else this.isEditBLDisabled = false;\n      } else this.isShowButton = false;\n    },\n    fetchEdit() {\n      try {\n        const uri = window.location.href;\n        var transactionID = uri.split(\"?\")[1];\n        var id = transactionID.split(\"=\")[1].split(\"&\")[0];\n        var company = transactionID.split(\"=\")[2];\n        this.isDraft = true;\n        console.log(\"Draft\", this.isDraft);\n        axiosClient.get(\"/fetchEditDraftBranch\", {\n          params: {\n            company: company,\n            plID: id\n          }\n        }).then(response => {\n          this.newTransaction.company = response.data[0].company;\n          this.newTransaction.branchName = response.data[0].branchName;\n          this.newTransaction.chainCode = response.data[0].chainCode;\n          this.newTransaction.transactionType = response.data[0].transactionType;\n          if (response.data[0].status == \"denied\" || response.data[0].status == \"endorsement\" || response.data[0].status == \"unprocessed\") {\n            this.isDenied = false;\n            this.isCancel = true;\n          }\n          if (response.data[0].status == \"endorsement\") {\n            this.isApproved = true;\n            this.isSubmit = false;\n          }\n          axiosClient.get(\"/fetchEditDraftItem\", {\n            params: {\n              company: company,\n              plID: id\n            }\n          }).then(response => {\n            for (var x = 0; x < response.data.length; x++) {\n              this.newTransaction.items.push(response.data[x]);\n            }\n            const filteredData = this.newTransaction.items.filter((obj, index, self) => {\n              const boxLabel = obj.boxLabel;\n              return self.findIndex(o => o.boxLabel === boxLabel) === index;\n            });\n            const boxData = filteredData.map(obj => {\n              return {\n                boxLabel: obj.boxLabel,\n                boxNumber: obj.boxNumber\n              };\n            });\n            for (var x = 0; x < boxData.length; x++) {\n              this.newTransaction.boxLabels.push({\n                id: boxData[x].boxNumber,\n                boxNumber: boxData[x].boxNumber,\n                boxLabel: boxData[x].boxLabel\n              });\n              this.newItemInputBox.push({\n                id: boxData[x].boxNumber\n              });\n              console.log(\"New Box Label:\", this.newTransaction.boxLabels);\n            }\n            this.isDraft = false;\n            console.log(\"Draft:\", this.isDraft);\n            if (this.newTransaction.company) {\n              this.isCompany = false;\n              this.isChainCode = false;\n              this.fetchCompany();\n              this.fetchChainCode();\n            }\n            if (this.newTransaction.chainCode) {\n              this.isChainCode = false;\n              this.isBranchName = false;\n              this.fetchChainName();\n              this.fetchChainCode();\n            }\n            if (this.newTransaction.branchName) {\n              this.isBranchName = false;\n              this.isTransactionType = false;\n              this.fetchChainName();\n            }\n            if (this.newTransaction.transactionType) {\n              this.isCompany = false;\n              this.isChainCode = false;\n              this.isBranchName = false;\n              this.isTransactionType = false;\n            }\n            if (this.newTransaction.items.length) {\n              this.isCompany = true;\n              this.isChainCode = true;\n              this.isBranchName = true;\n              this.isTransactionType = true;\n            }\n          }).catch(error => {});\n        }).catch(error => {});\n      } catch {\n        axiosClient.get(\"/fetchPromoBranchInfo\", {\n          params: {\n            userID: sessionStorage.getItem(\"UserID\")\n          }\n        }).then(response => {\n          this.newTransaction.company = response.data[0].company;\n          this.newTransaction.chainCode = response.data[0].chainCode;\n          this.newTransaction.branchName = response.data[0].branchName;\n          this.fetchChainCode();\n          this.fetchChainName();\n        }).catch(error => {});\n      }\n    },\n    cancelTransaction() {\n      if (sessionStorage.getItem(\"Position\") == \"Agent\" || sessionStorage.getItem(\"Position\") == \"Approver\") this.$router.push({\n        path: \"/pull-out/requests\"\n      });else this.$router.push({\n        path: \"/pull-out/pullout-transaction\"\n      });\n    },\n    updateData(updatedData) {},\n    openModal(data) {\n      data.boxLabels.forEach(box => {\n        let tempIndex = box.boxLabel.indexOf(\"[\");\n        if (tempIndex > 0) box.boxLabel = box.boxLabel.substr(0, tempIndex).trim();\n      });\n      console.log(\"Edit: \", data);\n      this.transferredData = data;\n    },\n    closeModal() {\n      this.addCategoryBoxLabel();\n      this.transferredData = \"\";\n    },\n    showButton(itemId) {\n      this.hoveredRow = itemId;\n    },\n    hideButton(itemId) {\n      this.hoveredRow = null;\n    },\n    removeItem(code, boxNumber) {\n      this.validateSubmit();\n      console.log(\"New DATAs\", code, boxNumber);\n      for (let key in this.newTransaction.items) {\n        console.log(\"Condition if will delete\", this.newTransaction.items[key].code === code || this.newTransaction.items[key].boxNumber === boxNumber);\n        console.log(\"Items:\", this.newTransaction.items[key].code);\n        console.log(\"Code:\", code);\n        console.log(\"BoxNumbers:\", this.newTransaction.items[key].boxNumber);\n        console.log(\"BoxNumber:\", boxNumber);\n        if (this.newTransaction.items[key].code === code && this.newTransaction.items[key].boxNumber === boxNumber) {\n          console.log(\"Key:\", key);\n          this.newTransaction.items.splice(key, 1);\n          break;\n        }\n      }\n      this.notifyVue(\"DeleteItem\", \"bottom\", \"right\");\n    },\n    fetchItems() {\n      if (this.newItemInput.length >= 4) {\n        if (this.newTransaction.company == \"NBFI\" || this.newTransaction.company == \"CMC\" || this.newTransaction.company == \"ASC\") {\n          axiosClient.get(\"/fetchItemsNBFI\", {\n            params: {\n              ItemNo: this.newItemInput,\n              barcode: this.barcode\n            }\n          }).then(response => {\n            this.itemCodeList = response.data;\n          }).catch(error => {});\n        } else {\n          axiosClient.get(\"/fetchItems\", {\n            params: {\n              ItemNo: this.newItemInput\n            }\n          }).then(response => {\n            this.itemCodeList = response.data;\n          }).catch(error => {});\n        }\n      } else if (this.newItemInput.length == 0) this.itemCodeList = [];\n    },\n    compareItemCode() {\n      let value = this.newItemInput;\n      if (value.indexOf(\" - \") >= 0) {\n        let parts = value.split(\" - \");\n        this.newItemInput = parts[0];\n      }\n    },\n    handleQuantity(item) {\n      if (!item.quantity) {\n        item.quantity = 0;\n      }\n      this.notifyVue(\"ItemQuantity\", \"bottom\", \"right\");\n    },\n    notifyVue(notify, verticalAlign, horizontalAlign) {\n      var notification = \"\";\n      let notifType = \"\";\n      if (notify === \"AddBoxLabel\") {\n        notification = NotifAddBoxLabel;\n        notifType = \"success\";\n      } else if (notify === \"AddItem\") {\n        notification = NotifAddItem;\n        notifType = \"success\";\n      } else if (notify === \"DeleteBoxLabel\") {\n        notification = NotifDeleteBoxLabel;\n        notifType = \"danger\";\n      } else if (notify === \"DeleteItem\") {\n        notification = NotifDeleteItem;\n        notifType = \"danger\";\n      } else if (notify === \"DraftSave\") {\n        notification = NotifDraftSave;\n        notifType = \"success\";\n      } else if (notify === \"ChangeBoxLabel\") {\n        notification = NotifItemChangeBoxLabel;\n        notifType = \"success\";\n      } else if (notify === \"ItemQuantity\") {\n        notification = NotifItemQuantity;\n        notifType = \"success\";\n      } else if (notify === \"RenameBoxLabel\") {\n        notification = NotifRenameBoxLabel;\n        notifType = \"success\";\n      } else {\n        notification = NotifSubmitTransaction;\n        notifType = \"success\";\n      }\n      this.$notify({\n        component: notification,\n        horizontalAlign: horizontalAlign,\n        verticalAlign: verticalAlign,\n        type: notifType,\n        props: {\n          customValue: \"Success\"\n        }\n      });\n    },\n    fetchCompany() {\n      if (\"User\" != sessionStorage.getItem(\"Position\")) axiosClient.get(\"/fetchCompany\").then(response => {\n        this.companyList = response.data;\n      }).catch(error => {\n        console.error(error);\n      });else axiosClient.get(\"/fetchCompanyByUser\", {\n        params: {\n          userID: sessionStorage.getItem(\"UserID\")\n        }\n      }).then(response => {\n        this.companyList = response.data;\n      }).catch(error => {\n        console.error(error);\n      });\n      var company = sessionStorage.getItem(\"Company\");\n      if (company == \"NBFI\" || company == \"ASC\" || company == \"CMC\") this.showCategoryBrand = true;else this.showCategoryBrand = false;\n    },\n    fetchChainCode() {\n      if (\"User\" == sessionStorage.getItem(\"Position\")) axiosClient.get(\"/fetchChainByUser\", {\n        params: {\n          company: this.newTransaction.company,\n          userID: sessionStorage.getItem(\"UserID\")\n        }\n      }).then(response => {\n        this.chainCodeList = response.data;\n      }).catch(error => {\n        console.error(error);\n      });else axiosClient.get(\"/fetchChain\", {\n        params: {\n          company: this.newTransaction.company\n        }\n      }).then(response => {\n        this.chainCodeList = response.data;\n      }).catch(error => {\n        console.error(error);\n      });\n      this.isChainCode = false;\n    },\n    fetchChainName() {\n      if (\"User\" == sessionStorage.getItem(\"Position\")) axiosClient.get(\"/fetchChainNameByUser\", {\n        params: {\n          chainCode: this.newTransaction.chainCode,\n          userID: sessionStorage.getItem(\"UserID\")\n        }\n      }).then(response => {\n        this.branchNameList = response.data;\n      }).catch(error => {\n        console.error(error);\n      });else {\n        axiosClient.get(\"/fetchChainName\", {\n          params: {\n            chainCode: this.newTransaction.chainCode,\n            company: this.newTransaction.company\n          }\n        }).then(response => {\n          this.branchNameList = response.data;\n        }).catch(error => {\n          console.error(error);\n        });\n        this.isBranchName = false;\n      }\n    },\n    addItem(boxNUMBER) {\n      this.isItem = false;\n      this.isAddItem = false;\n      this.showItemInput = boxNUMBER;\n    },\n    saveItem(boxNUMBER) {\n      if (this.barcode == \"item_16\") {\n        if (this.newItemInput.length > 16) this.newItemInput = this.newItemInput.slice(0, 16);\n      } else {\n        this.newItemInput = this.newItemInput.slice(0, 12);\n      }\n      if (this.barcode == \"item_12\") {\n        axiosClient.get(\"/fetchItemsBarcode\", {\n          params: {\n            ItemNo: this.newItemInput,\n            company: this.newTransaction.company\n          }\n        }).then(response => {\n          this.newItemInput = response.data[0].ItemNo;\n        }).catch(error => {\n          console.error(error);\n        });\n      }\n      var checkItemData = true;\n      setTimeout(() => {\n        axiosClient.get(\"/compareItemCode\", {\n          params: {\n            companyType: this.newTransaction.company,\n            ItemNo: this.newItemInput\n          }\n        }).then(response => {\n          if (response.data.length == 0) {\n            checkItemData = false;\n          }\n          this.newItemCode = response.data[0].ItemNo;\n          this.newItemDescription = response.data[0].ItemDescription;\n          this.newStyleCode = response.data[0].StyleCode;\n          let brandCode = response.data[0].ItemNo.toString().substr(1, 2);\n          axiosClient.get(\"/fetchBrands\", {\n            params: {\n              companyType: this.newTransaction.company,\n              brandCode: brandCode\n            }\n          }).then(response => {\n            this.newBrand = response.data[0].brandNames;\n          }).catch(error => {\n            console.error(error);\n          });\n        }).catch(error => {\n          this.missItemCode = 0;\n          !this.newItemInput ? true : this.isRightCode = true;\n        });\n      }, 300);\n      var newResponseData;\n      setTimeout(() => {\n        if (checkItemData) {\n          let confirmSave = false;\n          this.isNewItem = !this.newItemInput ? true : false;\n          if (this.isNewItem) {\n            this.isRightCode = false;\n            return 0;\n          }\n          axiosClient.get(\"/fetchSameItem\", {\n            params: {\n              company: this.newTransaction.company,\n              ItemCode: this.newItemCode,\n              ItemDescription: this.newItemDescription,\n              StyleCode: this.newStyleCode\n            }\n          }).then(response => {\n            newResponseData = response.data;\n          }).catch(error => {});\n        }\n      }, 500);\n      setTimeout(() => {\n        if (checkItemData) {\n          for (var x = 0; x < newResponseData.length; x++) {\n            var flag = true;\n            for (var i = 0; i < this.newTransaction.items.length; i++) {\n              if (this.newTransaction.items[i].code == newResponseData[x].ItemNo && this.newTransaction.items[i].boxNumber == boxNUMBER) {\n                this.newTransaction.items[i].quantity = parseInt(this.newTransaction.items[x].quantity) + 1;\n                flag = false;\n                break;\n              }\n            }\n            if (flag) {\n              if (this.newTransaction.company == \"NBFI\" || this.newTransaction.company == \"CMC\" || this.newTransaction.company == \"ASC\") {\n                var categorybrand = this.newBrand;\n              } else {\n                var categorybrand = newResponseData[x].Category;\n              }\n              let tempItem = {\n                code: newResponseData[x].ItemNo,\n                description: newResponseData[x].ItemDescription,\n                categorybrand: categorybrand,\n                quantity: 0,\n                size: newResponseData[x].Size,\n                color: newResponseData[x].Color,\n                boxNumber: boxNUMBER,\n                category: newResponseData[x].Category\n              };\n              this.newTransaction.items.push(tempItem);\n            }\n            this.isRightCode = false;\n            this.isItem = false;\n            this.isAddItem = true;\n            this.newItemInput = \"\";\n            this.showItemInput = \"\";\n            this.notifyVue(\"AddItem\", \"bottom\", \"right\");\n          }\n        }\n      }, 1000);\n    },\n    cancelItem() {\n      this.isRightCode = false;\n      this.isNewItem = false;\n      this.isItem = false;\n      this.isAddItem = true;\n      this.showItemInput = \"\";\n      this.newItemInput = \"\";\n    },\n    addBoxLabel() {\n      this.isBoxLabel = true;\n      this.isEditBLDisabled = true;\n    },\n    saveBoxLabel() {\n      this.isNewBoxLabel = !this.newBoxLabel ? true : false;\n      if (this.isNewBoxLabel) {\n        return 0;\n      }\n      this.isBoxLabel = false;\n      let tempBoxLabel = [];\n      if (this.newTransaction.boxLabels.length == 0) {\n        tempBoxLabel = {\n          id: this.newTransaction.boxLabels.length + 1,\n          boxNumber: this.newTransaction.boxLabels.length + 1,\n          boxLabel: this.newBoxLabel\n        };\n      } else {\n        tempBoxLabel = {\n          id: parseInt(this.newTransaction.boxLabels[this.newTransaction.boxLabels.length - 1].id) + 1,\n          boxNumber: this.newTransaction.boxLabels.length + 1,\n          boxLabel: this.newBoxLabel\n        };\n      }\n      let tempItem = [];\n      if (this.newTransaction.boxLabels.length == 0) {\n        tempItem = {\n          id: this.newTransaction.boxLabels.length + 1\n        };\n      } else {\n        console.log(\"Before Add Box\", this.newTransaction.boxLabels[this.newTransaction.boxLabels.length - 1].id);\n        tempItem = {\n          id: parseInt(this.newTransaction.boxLabels[this.newTransaction.boxLabels.length - 1].id) + 1\n        };\n        console.log(\"After Add Box\", tempItem);\n      }\n      this.newTransaction.boxLabels.push(tempBoxLabel);\n      this.newItemInputBox.push(tempItem);\n      this.newBoxLabel = \"\";\n      console.log(\"New Add Box:\", this.newItemInputBox);\n      this.isCompany = true;\n      this.isChainCode = true;\n      this.isBranchName = true;\n      this.isTransactionType = true;\n      this.notifyVue(\"AddBoxLabel\", \"bottom\", \"right\");\n      this.isEditBLDisabled = false;\n    },\n    cancelBoxLabel() {\n      this.isNewBoxLabel = false;\n      this.isBoxLabel = false;\n      this.newBoxLabel = \"\";\n      if (this.newTransaction.boxLabels.length == 0) this.isEditBLDisabled = true;else this.isEditBLDisabled = false;\n    },\n    submit(confirmation) {\n      if (confirmation) {\n        try {\n          const uri = window.location.href;\n          var transactionID = uri.split(\"?\")[1];\n          var id = transactionID.split(\"=\")[1].split(\"&\")[0];\n          this.isValid.company = !this.newTransaction.company ? true : false;\n          this.isValid.chainCode = !this.newTransaction.chainCode ? true : false;\n          this.isValid.branchName = !this.newTransaction.branchName ? true : false;\n          this.isValid.transactionType = !this.newTransaction.transactionType ? true : false;\n          this.isValid.boxLabel = !this.newTransaction.boxLabels.length ? true : false;\n          this.isValid.item = !this.newTransaction.items.length ? true : false;\n          if (sessionStorage.getItem(\"Position\") == \"Agent\" || sessionStorage.getItem(\"Position\") == \"Admin\") {\n            var status = \"endorsement\";\n          } else if (sessionStorage.getItem(\"Position\") == \"Admin\" || sessionStorage.getItem(\"Position\") == \"Approver\") {\n            var status = \"approved\";\n          } else {\n            var status = \"unprocessed\";\n          }\n          axiosClient.post(\"/updatePullOutBranchRequest\", {\n            id: id,\n            chainCode: this.newTransaction.chainCode,\n            companyType: this.newTransaction.company,\n            branchName: this.newTransaction.branchName,\n            transactionType: this.newTransaction.transactionType,\n            email: sessionStorage.getItem(\"Email\"),\n            status: status\n          }).then(response => {\n            this.transferTransactionID = id;\n            for (var x = 0; x < this.newTransaction.items.length; x++) {\n              let labelBox = \"\";\n              for (let box of this.newTransaction.boxLabels) {\n                if (box.id == this.newTransaction.items[x].boxNumber) {\n                  labelBox = box.boxLabel;\n                }\n              }\n              axiosClient.post(\"/updatePullOutItemRequest\", {\n                id: this.newTransaction.items[x].id,\n                plID: id,\n                companyType: this.newTransaction.company,\n                brand: this.newTransaction.items[x].categorybrand,\n                boxNumber: this.newTransaction.items[x].boxNumber,\n                boxLabel: labelBox,\n                itemCode: this.newTransaction.items[x].code,\n                quantity: this.newTransaction.items[x].quantity,\n                email: sessionStorage.getItem(\"Email\"),\n                status: status\n              }).then(response => {}).catch(error => {\n                console.error(error);\n              });\n            }\n            const transactionModal = new bootstrap.Modal(\"#transactionReceipt\");\n            transactionModal.show();\n            this.saving_counter = this.files.length * 2;\n          }).catch(error => {});\n          setTimeout(this.handleFileUploadImage, 2000);\n        } catch {\n          this.isValid.company = !this.newTransaction.company ? true : false;\n          this.isValid.chainCode = !this.newTransaction.chainCode ? true : false;\n          this.isValid.branchName = !this.newTransaction.branchName ? true : false;\n          this.isValid.transactionType = !this.newTransaction.transactionType ? true : false;\n          this.isValid.boxLabel = !this.newTransaction.boxLabels.length ? true : false;\n          this.isValid.item = !this.newTransaction.items.length ? true : false;\n          axiosClient.post(\"/savePullOutBranchRequest\", {\n            chainCode: this.newTransaction.chainCode,\n            companyType: this.newTransaction.company,\n            branchName: this.newTransaction.branchName,\n            transactionType: this.newTransaction.transactionType,\n            email: sessionStorage.getItem(\"Email\"),\n            status: \"unprocessed\"\n          }).then(response => {\n            this.transferTransactionID = response.data.id;\n            for (var x = 0; x < this.newTransaction.items.length; x++) {\n              let labelBox = \"\";\n              for (let box of this.newTransaction.boxLabels) {\n                if (box.id == this.newTransaction.items[x].boxNumber) {\n                  labelBox = box.boxLabel;\n                }\n              }\n              axiosClient.post(\"/savePullOutItemRequest\", {\n                plID: response.data.id,\n                companyType: this.newTransaction.company,\n                brand: this.newTransaction.items[x].categorybrand,\n                boxNumber: this.newTransaction.items[x].boxNumber,\n                boxLabel: labelBox,\n                itemCode: this.newTransaction.items[x].code,\n                quantity: this.newTransaction.items[x].quantity,\n                email: sessionStorage.getItem(\"Email\"),\n                status: \"unprocessed\"\n              }).then(response => {}).catch(error => {});\n            }\n            const transactionModal = new bootstrap.Modal(\"#transactionReceipt\");\n            transactionModal.show();\n            this.saving_counter = this.files.length * 2;\n          }).catch(error => {});\n        }\n        setTimeout(this.handleFileUploadImage, 2000);\n      }\n    },\n    draft(confirmation) {\n      if (confirmation) {\n        try {\n          const uri = window.location.href;\n          var transactionID = uri.split(\"?\")[1];\n          var id = transactionID.split(\"=\")[1].split(\"&\")[0];\n          axiosClient.post(\"/updatePullOutBranchRequest\", {\n            id: id,\n            chainCode: this.newTransaction.chainCode,\n            companyType: this.newTransaction.company,\n            branchName: this.newTransaction.branchName,\n            transactionType: this.newTransaction.transactionType,\n            status: \"draft\",\n            email: sessionStorage.getItem(\"Email\")\n          }).then(response => {\n            for (var x = 0; x < this.newTransaction.items.length; x++) {\n              let labelBox = \"\";\n              for (let box of this.newTransaction.boxLabels) {\n                if (box.id == this.newTransaction.items[x].boxNumber) {\n                  labelBox = box.boxLabel;\n                }\n              }\n              console.log(\"Items\", this.newTransaction.items);\n              axiosClient.post(\"/updatePullOutItemRequest\", {\n                plID: id,\n                companyType: this.newTransaction.company,\n                brand: this.newTransaction.items[x].categorybrand,\n                boxNumber: this.newTransaction.items[x].boxNumber,\n                boxLabel: labelBox,\n                itemCode: this.newTransaction.items[x].code,\n                quantity: this.newTransaction.items[x].quantity,\n                status: \"draft\",\n                email: sessionStorage.getItem(\"Email\")\n              }).then(response => {\n                console.log(\"Success Items Save: \", response.data);\n              }).catch(error => {\n                console.error(error);\n              });\n            }\n            const draftModal = new bootstrap.Modal(\"#draftModal\");\n            draftModal.show();\n          }).catch(error => {});\n        } catch {\n          axiosClient.post(\"/savePullOutBranchRequest\", {\n            chainCode: this.newTransaction.chainCode,\n            companyType: this.newTransaction.company,\n            branchName: this.newTransaction.branchName,\n            transactionType: this.newTransaction.transactionType,\n            status: \"draft\",\n            email: sessionStorage.getItem(\"Email\")\n          }).then(response => {\n            for (var x = 0; x < this.newTransaction.items.length; x++) {\n              let labelBox = \"\";\n              for (let box of this.newTransaction.boxLabels) {\n                if (box.id == this.newTransaction.items[x].boxNumber) {\n                  labelBox = box.boxLabel;\n                }\n              }\n              axiosClient.post(\"/savePullOutItemRequest\", {\n                plID: response.data.id,\n                companyType: this.newTransaction.company,\n                brand: this.newTransaction.items[x].categorybrand,\n                boxNumber: this.newTransaction.items[x].boxNumber,\n                boxLabel: labelBox,\n                itemCode: this.newTransaction.items[x].code,\n                quantity: this.newTransaction.items[x].quantity,\n                status: \"draft\",\n                email: sessionStorage.getItem(\"Email\")\n              }).then(response => {}).catch(error => {});\n            }\n            const draftModal = new bootstrap.Modal(\"#draftModal\");\n            draftModal.show();\n          }).catch(error => {});\n        }\n      }\n    },\n    editBoxLabel(code, quantity, boxNumber) {\n      this.validateSubmit();\n      var filteredItems = this.newTransaction.items.filter(item => item.code === code && item.boxNumber === boxNumber);\n      var uniqueItems = [];\n      filteredItems.forEach(item => {\n        var existingItem = uniqueItems.find(uniqueItem => uniqueItem.code === item.code);\n        if (existingItem) {\n          existingItem.quantity += item.quantity;\n        } else {\n          uniqueItems.push({\n            ...item\n          });\n        }\n      });\n      this.newTransaction.items = this.newTransaction.items.filter(item => item.code !== uniqueItems[0].code || item.boxNumber !== uniqueItems[0].boxNumber);\n      this.newTransaction.items.push(uniqueItems[0]);\n      this.notifyVue(\"ChangeBoxLabel\", \"bottom\", \"right\");\n    }\n  }\n};","map":{"version":3,"names":["Collapse","CollapseItem","Tabs","TabPane","Card","Button","PProgress","PSwitch","Vue","NotificationTemplate","NotifAddBoxLabel","NotifAddItem","NotifDeleteBoxLabel","NotifDeleteItem","NotifDraftSave","NotifItemChangeBoxLabel","NotifItemQuantity","NotifRenameBoxLabel","NotifSubmitTransaction","Swal","axiosClient","EditBoxLabelModal","TransactionReceiptModal","EditSubmitTransactionReceiptModal","DraftModal","linkName","ConfirmationSubmitPullOutModal","ConfirmationDraftPullOutModal","XLSX","use","_Table","_TableColumn","components","_DatePicker","name","_TimeSelect","_Slider","_Tag","_Input","_Option","_Select","data","showCategoryBrand","showUploadImage","transferredData","isCompany","isChainCode","isBranchName","isTransactionType","isShowButton","itemCodeList","isEditBLDisabled","isBoxLabel","isItem","isAddItem","isDisabledSubmit","showItemInput","companyList","chainCodeList","branchNameList","newTransaction","company","chainCode","branchName","transactionType","boxLabels","items","newItemInputBox","isValid","boxLabel","item","isApproved","isCancel","isSubmit","hoveredRow","uploadImageFileName","uploadExcelFileName","transactionTypeList","value","label","newBoxLabel","newItemInput","newBrand","newItemDescription","newStyleCode","newItemCode","notifications","topCenter","modals","classic","notice","mini","isNewBoxLabel","isNewItem","isRightCode","transferTransactionID","uniqueItemss","duplicateItemss","isDenied","dataArray","myData","counter","remarksList","images","files","img_counter","strCategory","boxNumber","isDraft","barcode","saving_counter","isMobile","headerCellStyle","color","cellStyle","fontWeight","tableColumns","prop","type","width","minWidth","computed","filteredRemarks","filter","toLowerCase","includes","sortedBoxes","sort","a","b","getItemBoxLabel","find","mounted","tooltipTriggerList","document","querySelectorAll","tooltipList","map","tooltipTriggerEl","bootstrap","Tooltip","tooltipExcel","getInstance","_config","title","update","fetchEdit","fetchCompany","window","resolveRouteChange","val","test","navigator","userAgent","watch","handler","validateSubmit","deep","newTransaction.items","oldVal","addCategoryBoxLabel","newTransaction.boxLabels","enableDropDowns","newTransaction.company","showButtons","newTransaction.chainCode","newTransaction.branchName","newTransaction.transactionType","clearItemInput","newSortedBoxes","set","methods","reArrangeItems","deletedBoxNumber","console","log","forEach","temp","reArrangeBoxNumber","transfer","tempIdBox","id","push","restrictChar","$event","keyCode","which","preventDefault","box","filteredItems","uniqueCategory","Set","categorybrand","i","length","tempIndex","indexOf","substr","trim","filterRemarks","onFileChange","e","target","dataTransfer","file","maxSizeInBytes","size","alert","createImage","vm","index","reader","FileReader","onload","event","imageUrl","result","readAsDataURL","removeImage","splice","clearImage","getElementById","frame","src","handleFileUploadImage","config","headers","post","image","transactionID","then","response","setTimeout","catch","error","handleFileUpload","Uint8Array","workbook","read","worksheetName","SheetNames","worksheet","Sheets","jsonData","utils","sheet_to_json","header","arrayBox","x","filteredArray","self","tempBoxLabel","tempItem","saveItemsExcel","readAsArrayBuffer","quantity","get","params","ItemNo","flag","code","parseInt","description","ItemDescription","brandNames","Size","Color","category","Category","notifyVue","numberOnly","uniqueItems","itemsValidation","itemsValidationTemp","j","submitTooltip","tooltip","disable","editingBoxLabel","tempBL","uri","location","href","split","plID","status","filteredData","obj","findIndex","o","boxData","fetchChainCode","fetchChainName","userID","sessionStorage","getItem","cancelTransaction","$router","path","updateData","updatedData","openModal","closeModal","showButton","itemId","hideButton","removeItem","key","fetchItems","compareItemCode","parts","handleQuantity","notify","verticalAlign","horizontalAlign","notification","notifType","$notify","component","props","customValue","addItem","boxNUMBER","saveItem","slice","checkItemData","companyType","StyleCode","brandCode","toString","missItemCode","newResponseData","confirmSave","ItemCode","cancelItem","addBoxLabel","saveBoxLabel","cancelBoxLabel","submit","confirmation","email","labelBox","brand","itemCode","transactionModal","Modal","show","draft","draftModal","editBoxLabel","existingItem","uniqueItem"],"sources":["src/components/Dashboard/Views/PullOut/PullOutGenerator.vue"],"sourcesContent":["<template>\n  <div class=\"card card-generator\">\n    <!-- <div class=\"card-header\">\n      <h4 class=\"title\">Pull-Out Requisition Form</h4>\n    </div> -->\n    <div class=\"card-body\">\n      <div class=\"row\">\n        <div class=\"col-sm-3\">\n          <fg-input label=\"Company\" :disabled=\"isCompany\">\n            <el-select\n              class=\"select-default\"\n              size=\"large\"\n              placeholder=\"Select Company\"\n              v-model=\"newTransaction.company\"\n              @change=\"\n                fetchChainCode(),\n                  (newTransaction.chainCode = ''),\n                  (newTransaction.branchName = ''),\n                  (newTransaction.transactionType = '')\n              \"\n              :disabled=\"isCompany\"\n            >\n              <el-option\n                v-for=\"option in companyList\"\n                class=\"select-default\"\n                :value=\"option.shortName\"\n                :label=\"option.name + ' (' + option.shortName + ') '\"\n                :key=\"option.id\"\n              >\n              </el-option>\n            </el-select>\n            <label v-show=\"isValid.company\" class=\"label-font\"\n              >Company is required.</label\n            >\n          </fg-input>\n        </div>\n        <div class=\"col-sm-3\">\n          <fg-input label=\"Chain Code\" :disabled=\"isChainCode\">\n            <el-select\n              class=\"select-default\"\n              size=\"large\"\n              placeholder=\"Select Chain Code\"\n              v-model=\"newTransaction.chainCode\"\n              @change=\"\n                fetchChainName(),\n                  (newTransaction.branchName = ''),\n                  (newTransaction.transactionType = '')\n              \"\n              :disabled=\"isChainCode\"\n            >\n              <el-option\n                v-for=\"option in chainCodeList\"\n                class=\"select-default\"\n                :value=\"option.chainCode\"\n                :label=\"option.chainCode\"\n                :key=\"option.chainCode\"\n              >\n              </el-option>\n            </el-select>\n            <label v-show=\"isValid.chainCode\" class=\"label-font\"\n              >Chain Code is required.</label\n            >\n          </fg-input>\n        </div>\n        <div class=\"col-sm-3\">\n          <fg-input label=\"Branch Name\" :disabled=\"isBranchName\">\n            <el-select\n              class=\"select-default\"\n              size=\"large\"\n              placeholder=\"Select Branch Name\"\n              v-model=\"newTransaction.branchName\"\n              @change=\"(isTransactionType = false), (newTransaction.transactionType = '')\"\n              :disabled=\"isBranchName\"\n            >\n              <el-option\n                v-for=\"option in branchNameList\"\n                class=\"select-default\"\n                :value=\"option.branchName\"\n                :label=\"option.branchName\"\n                :key=\"option.branchName\"\n              >\n              </el-option>\n            </el-select>\n            <label v-show=\"isValid.branchName\" class=\"label-font\"\n              >Branch Name is required.</label\n            >\n          </fg-input>\n        </div>\n        <div class=\"col-sm-3\">\n          <fg-input label=\"Transaction Type\" :disabled=\"isTransactionType\">\n            <!-- &nbsp;<i\n              data-bs-toggle=\"tooltip\"\n              class=\"nc-icon nc-alert-circle-i font-weight-bold\"\n            ></i> -->\n            <el-select\n              class=\"select-default\"\n              size=\"large\"\n              placeholder=\"Select Transaction Type\"\n              v-model=\"newTransaction.transactionType\"\n              :disabled=\"isTransactionType\"\n            >\n              <el-option\n                v-for=\"option in transactionTypeList\"\n                class=\"select-default\"\n                :value=\"option.value\"\n                :label=\"option.label\"\n                :key=\"option.label\"\n              >\n              </el-option>\n            </el-select>\n            <label v-show=\"isValid.transactionType\" class=\"label-font\"\n              >Transaction Type is required.</label\n            >\n          </fg-input>\n        </div>\n      </div>\n      <div class=\"col-sm-12\">\n        <!-- <card type=\"plain\"> -->\n        <div class=\"row mt-1\">\n          <div\n            class=\"col-xl-2 col-md-3 col-sm-6 p-0 h-div-32 mr-xl-2\"\n            v-show=\"isShowButton\"\n          >\n            <p-button\n              type=\"default\"\n              link\n              class=\"font-weight-bold w-full m-0\"\n              @click.prevent=\"addBoxLabel()\"\n            >\n              <i class=\"nc-icon nc-simple-add font-weight-bold\"></i> Add Box Label\n            </p-button>\n          </div>\n          <div\n            class=\"col-xl-2 col-md-3 col-sm-6 p-0 h-div-32 mr-xl-2\"\n            v-show=\"isShowButton\"\n          >\n            <p-button\n              :disabled=\"isEditBLDisabled\"\n              type=\"default\"\n              link\n              class=\"font-weight-bold w-full m-0\"\n              data-bs-toggle=\"modal\"\n              data-bs-target=\"#editboxlabelModal\"\n              @click=\"openModal(newTransaction)\"\n            >\n              <i class=\"nc-icon nc-ruler-pencil font-weight-bold\"></i> Edit Box Label\n            </p-button>\n          </div>\n          <div\n            class=\"col-xl-2 col-md-3 col-sm-6 p-0 h-div-32 mr-xl-2\"\n            v-show=\"isShowButton\"\n          >\n            <span\n              id=\"excelBtn\"\n              class=\"d-inline-block w-full\"\n              tabindex=\"0\"\n              data-bs-toggle=\"tooltip\"\n              data-bs-placement=\"bottom\"\n            >\n              <p-button\n                type=\"default\"\n                link\n                class=\"font-weight-bold w-full m-0\"\n                onclick=\"document.getElementById('import_items_excel').click()\"\n              >\n                Import Items Excel\n              </p-button></span\n            >\n            <input\n              id=\"import_items_excel\"\n              type=\"file\"\n              accept=\".xlsx\"\n              style=\"display: none\"\n              @change=\"handleFileUpload\"\n            />\n          </div>\n          <!-- <div class=\"col-xl-2 col-md-3 col-sm-12 p-0 h-div-32\" v-show=\"isShowButton\">\n            <span\n              onclick=\"document.getElementById('import_items_excel').click()\"\n              class=\"span-upload-image py-1\"\n              >{{ uploadExcelFileName }}</span\n            >\n          </div> -->\n        </div>\n        <div class=\"row\">\n          <div class=\"col-sm-12 p-0 mt-2\" v-show=\"isBoxLabel\">\n            <form class=\"p-0\" @submit.prevent=\"saveBoxLabel()\">\n              <div>\n                <fg-input\n                  placeholder=\"Box Label ( Items Remarks )\"\n                  v-model.trim=\"newBoxLabel\"\n                  class=\"w-100\"\n                  @keypress=\"restrictChar\"\n                  @input=\"filterRemarks\"\n                  list=\"remarks\"\n                ></fg-input>\n                <datalist id=\"remarks\">\n                  <option v-for=\"remark in filteredRemarks\" :value=\"remark\">\n                    {{ remark }}\n                  </option>\n                </datalist>\n              </div>\n              <div class=\"mt-n3\">\n                <p-button\n                  native-type=\"submit\"\n                  type=\"default\"\n                  size=\"sm\"\n                  outline\n                  class=\"font-weight-bold\"\n                >\n                  <i class=\"nc-icon nc-check-2 font-weight-bold\"></i>\n                </p-button>\n                <p-button\n                  type=\"default\"\n                  size=\"sm\"\n                  outline\n                  class=\"font-weight-bold\"\n                  @click.prevent=\"cancelBoxLabel()\"\n                >\n                  <i class=\"nc-icon nc-simple-remove font-weight-bold\"></i>\n                </p-button>\n              </div>\n              <label v-show=\"isNewBoxLabel\" class=\"label-font pl-3\"\n                >Box Label is empty.</label\n              >\n            </form>\n          </div>\n          <label v-show=\"isValid.boxLabel\" class=\"label-font\"\n            >Box Label is required.</label\n          >\n        </div>\n        <collapse>\n          <collapse-item\n            v-for=\"boxLabel in newTransaction.boxLabels\"\n            :key=\"boxLabel.id\"\n            :title=\"`Box No. ${boxLabel.boxNumber} of ${newTransaction.boxLabels.length} \\xa0\\xa0\\xa0 ${boxLabel.boxLabel}`\"\n            name=\"1\"\n            class=\"font-weight-bold\"\n          >\n            <div v-show=\"isAddItem\">\n              <button\n                class=\"btn btn-transparent bold-button\"\n                @click.prevent=\"addItem(boxLabel.boxNumber)\"\n              >\n                <i class=\"nc-icon nc-simple-add font-weight-bold\"></i> Add Item\n              </button>\n            </div>\n            <div>\n              <div\n                class=\"row\"\n                v-for=\"newItem in newItemInputBox\"\n                v-show=\"newItem.id === boxLabel.boxNumber\"\n              >\n                <form @submit.prevent=\"saveItem(boxLabel.boxNumber)\">\n                  <div class=\"row\" v-if=\"newItem.id == showItemInput\">\n                    <div class=\"col-xl-2 col-lg-2 col-md-2 col-sm-12 d-flex mt-2\">\n                      <div class=\"col-6 text-center\">\n                        <input\n                          type=\"radio\"\n                          v-model=\"barcode\"\n                          name=\"barcode\"\n                          value=\"item_16\"\n                          checked\n                        />\n                        <label for=\"item_16\">16 Digit Barcode</label><br />\n                      </div>\n                      <div class=\"col-6 text-center\">\n                        <input\n                          type=\"radio\"\n                          v-model=\"barcode\"\n                          name=\"barcode\"\n                          value=\"item_12\"\n                        />\n                        <label for=\"item_12\">12 Digit Barcode</label><br />\n                      </div>\n                    </div>\n                    <div class=\"col-xl-10 col-lg-10 col-md-10 col-sm-12 d-flex mt-2\">\n                      <input\n                        type=\"text\"\n                        placeholder=\"Item Code\"\n                        v-model=\"newItemInput\"\n                        @input=\"fetchItems\"\n                        @change=\"compareItemCode\"\n                        list=\"items\"\n                        class=\"input-datalist\"\n                      />\n\n                      <datalist id=\"items\">\n                        <option\n                          v-for=\"item in itemCodeList\"\n                          :value=\"item.ItemNo + ' - ' + item.ItemDescription\"\n                          :key=\"item.ItemNo\"\n                        ></option>\n                      </datalist>\n                      <!-- <fg-input placeholder=\"Item\" v-model=\"newItemInput\" class=\"w-100\"></fg-input> -->\n                      <!-- <label> showItemInput: {{ showItemInput }}</label>\n                          <label> newItem.id: {{ newItem.id }}</label> -->\n                      <p-button\n                        native-type=\"submit\"\n                        type=\"default\"\n                        size=\"sm\"\n                        class=\"font-weight-bold\"\n                      >\n                        <i class=\"nc-icon nc-check-2 font-weight-bold\"></i>\n                      </p-button>\n                      <p-button\n                        type=\"default\"\n                        size=\"sm\"\n                        class=\"font-weight-bold\"\n                        @click.prevent=\"cancelItem()\"\n                      >\n                        <i class=\"nc-icon nc-simple-remove font-weight-bold\"></i>\n                      </p-button>\n                    </div>\n                    <label\n                      v-show=\"isRightCode\"\n                      class=\"label-font font-weight-normal\"\n                      style=\"margin-left: 185px\"\n                      >Invalid Item Code.</label\n                    >\n                    <label\n                      v-show=\"isNewItem\"\n                      class=\"label-font font-weight-normal\"\n                      style=\"margin-left: 185px\"\n                      >Item code is empty.</label\n                    >\n                  </div>\n\n                  <!-- <div class=\"col-sm-12 d-flex\" v-show=\"newItem.id != showItemInput\">\n                          <fg-input :placeholder=\"newItem.id \" v-model=\"newItem.item\" class=\"w-100\"></fg-input>\n                          <p-button type=\"default\" size=\"sm\"   class=\"font-weight-bold\" @click.prevent=\"saveItem(boxLabel.boxLabel)\">\n                            <i class=\"nc-icon nc-check-2 font-weight-bold\"></i> {{ newItem.id }}\n                          </p-button>\n                          <p-button type=\"default\" size=\"sm\"   class=\"font-weight-bold\" @click.prevent=\"cancelItem()\">\n                            <i class=\"nc-icon nc-simple-remove font-weight-bold\"></i>\n                          </p-button>\n                        </div> -->\n                </form>\n              </div>\n            </div>\n\n            <!-- before table -->\n            <div class=\"row\">\n              <table\n                class=\"table table-bordered table-hover table-responsive-sm table-font-size font-weight-normal\"\n              >\n                <thead>\n                  <tr>\n                    <th scope=\"col\" class=\"text-nowrap\">Item Code</th>\n                    <th scope=\"col\" class=\"text-nowrap\">Description</th>\n                    <th scope=\"col\" class=\"text-nowrap\">Size</th>\n                    <th scope=\"col\" class=\"text-nowrap\">Color</th>\n                    <th scope=\"col\" class=\"text-nowrap\" v-if=\"showCategoryBrand\">\n                      Brand\n                    </th>\n                    <th scope=\"col\" class=\"text-nowrap\" v-else>Category</th>\n                    <th scope=\"col\" class=\"text-nowrap\">Quantity</th>\n                    <th scope=\"col\" class=\"text-nowrap\">Box Label</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr\n                    v-show=\"boxLabel.boxNumber == item.boxNumber\"\n                    v-for=\"item in newTransaction.items\"\n                    :key=\"item.code\"\n                  >\n                    <th scope=\"row\" class=\"px-3 d-flex\">\n                      <button\n                        class=\"gendelete-buttons\"\n                        @click.prevent=\"removeItem(item.code, item.boxNumber)\"\n                      >\n                        <i class=\"nc-icon nc-simple-remove font-weight-bold\"></i>\n                      </button>\n                      {{ item.code }}\n                    </th>\n                    <td class=\"cell px-3\" style=\"width: 550px\">\n                      {{ item.description }}\n                    </td>\n                    <td class=\"cell px-3\" style=\"width: 10px\">\n                      {{ item.size }}\n                    </td>\n                    <td class=\"cell px-3\" style=\"width: 20px\">\n                      {{ item.color }}\n                    </td>\n                    <td class=\"cell px-3\" style=\"width: 300px\">\n                      {{ item.categorybrand }}\n                    </td>\n                    <!-- <td class=\"cell\" style=\"width: 50px\">\n                          <input\n                            type=\"number\"\n                            @blur=\"handleQuantity(item.id)\"\n                            v-model=\"item.quantity\"\n                            class=\"table-input-box\"\n                            @keypress=\"numberOnly\"\n                          />\n                        </td> -->\n                    <td class=\"cell\">\n                      <span>\n                        <div class=\"btn-group btn-group-sm d-flex flex-row\">\n                          <p-button\n                            type=\"default\"\n                            round\n                            outline\n                            size=\"xs\"\n                            @click=\"item.quantity > 0 ? item.quantity-- : 0\"\n                          >\n                            <i class=\"nc-icon nc-simple-delete\"></i>\n                          </p-button>\n                          <input\n                            type=\"text\"\n                            @blur=\"handleQuantity(item)\"\n                            v-model=\"item.quantity\"\n                            class=\"table-input-box\"\n                            style=\"width: 75px; text-align: center\"\n                            @keypress=\"numberOnly\"\n                          />\n                          <p-button\n                            type=\"default\"\n                            round\n                            outline\n                            size=\"xs\"\n                            @click=\"item.quantity++\"\n                          >\n                            <i class=\"nc-icon nc-simple-add\"></i>\n                          </p-button>\n                        </div>\n                      </span>\n                    </td>\n                    <td class=\"cell\" style=\"width: 300px\">\n                      <el-select\n                        class=\"table-select-box\"\n                        size=\"large\"\n                        v-model=\"item.boxNumber\"\n                        @change=\"editBoxLabel(item.code, item.quantity, item.boxNumber)\"\n                      >\n                        <el-option\n                          v-for=\"boxLabel in newTransaction.boxLabels\"\n                          class=\"table-select-box\"\n                          :value=\"boxLabel.boxNumber\"\n                          :label=\"\n                            'Box No. ' +\n                            boxLabel.boxNumber +\n                            ' of ' +\n                            newTransaction.boxLabels.length +\n                            ' ' +\n                            boxLabel.boxLabel\n                          \"\n                          :key=\"boxLabel.id\"\n                        >\n                        </el-option>\n                      </el-select>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n\n            <!-- after table -->\n            <div class=\"row\">\n              <el-table\n                class=\"p-0\"\n                border\n                :header-cell-style=\"headerCellStyle\"\n                :cell-style=\"cellStyle\"\n                :data=\"newTransaction.items\"\n                style=\"width: 100%\"\n              >\n                <!-- <template\n                  slot-scope=\"scope\"\n                  v-if=\"scope.row.boxNumber == boxLabel.boxNumber\"\n                >\n                  <el-table-column\n                    v-for=\"column in tableColumns\"\n                    :prop=\"column.prop\"\n                    :label=\"column.label\"\n                    :type=\"column.type\"\n                    :width=\"column.width\"\n                    :min-width=\"column.minWidth\"\n                  >\n                  </el-table-column>\n                </template> -->\n                <template slot-scope=\"prop\">\n                  <el-table-column\n                    v-if=\"prop.row.boxNumber == boxLabel.boxNumber\"\n                    type=\"selection\"\n                    width=\"40\"\n                    header-align=\"center\"\n                    align=\"center\"\n                  >\n                  </el-table-column>\n                  <el-table-column label=\"Item Code\" width=\"155\">\n                    <template\n                      slot-scope=\"scope\"\n                      v-if=\"scope.row.boxNumber == boxLabel.boxNumber\"\n                    >\n                      <b>{{ scope.row.code }}</b>\n                    </template>\n                  </el-table-column>\n                  <el-table-column label=\"Description\" min-width=\"450\">\n                    <template\n                      slot-scope=\"scope\"\n                      v-if=\"scope.row.boxNumber == boxLabel.boxNumber\"\n                    >\n                      <b>{{ scope.row.description }}</b>\n                    </template>\n                  </el-table-column>\n                  <el-table-column label=\"Size\" width=\"55\">\n                    <template\n                      slot-scope=\"scope\"\n                      v-if=\"scope.row.boxNumber == boxLabel.boxNumber\"\n                    >\n                      <b>{{ scope.row.size }}</b>\n                    </template>\n                  </el-table-column>\n                  <el-table-column label=\"Color\" width=\"100\">\n                    <template\n                      slot-scope=\"scope\"\n                      v-if=\"scope.row.boxNumber == boxLabel.boxNumber\"\n                    >\n                      <b>{{ scope.row.color }}</b>\n                    </template>\n                  </el-table-column>\n                  <el-table-column label=\"Category/Brand\" min-width=\"300\">\n                    <template\n                      slot-scope=\"scope\"\n                      v-if=\"scope.row.boxNumber == boxLabel.boxNumber\"\n                    >\n                      <b>{{ scope.row.categorybrand }}</b>\n                    </template>\n                  </el-table-column>\n                  <el-table-column label=\"Quantity\" width=\"165\">\n                    <template\n                      slot-scope=\"scope\"\n                      v-if=\"scope.row.boxNumber == boxLabel.boxNumber\"\n                    >\n                      <div class=\"btn-group btn-group-sm d-flex flex-row\">\n                        <p-button\n                          type=\"default\"\n                          round\n                          outline\n                          size=\"xs\"\n                          @click=\"scope.row.quantity > 0 ? scope.row.quantity-- : 0\"\n                        >\n                          <i class=\"nc-icon nc-simple-delete\"></i>\n                        </p-button>\n                        <input\n                          type=\"text\"\n                          @blur=\"handleQuantity(scope.row)\"\n                          v-model=\"scope.row.quantity\"\n                          class=\"table-input-box\"\n                          style=\"width: 75px; text-align: center\"\n                          @keypress=\"numberOnly\"\n                        />\n                        <p-button\n                          type=\"default\"\n                          round\n                          outline\n                          size=\"xs\"\n                          @click=\"scope.row.quantity++\"\n                        >\n                          <i class=\"nc-icon nc-simple-add\"></i>\n                        </p-button>\n                      </div>\n                    </template>\n                  </el-table-column>\n                  <el-table-column label=\"Box Label\" min-width=\"120\">\n                    <template\n                      slot-scope=\"scope\"\n                      v-if=\"scope.row.boxNumber == boxLabel.boxNumber\"\n                      >{{ scope.row.boxNumber }}</template\n                    >\n                  </el-table-column>\n                </template>\n              </el-table>\n            </div>\n\n            <!-- <div class=\"row\">\n                  <input\n                    placeholder=\"Input Items Remarks\"\n                    v-model=\"remarks\"\n                    @input=\"filterRemarks\"\n                    class=\"input-datalist\"\n                    list=\"remarks\"\n                  />\n                  <datalist id=\"remarks\">\n                    <option v-for=\"remark in filteredRemarks\" :value=\"remark\">\n                      {{ remark }}\n                    </option>\n                  </datalist>\n                </div> -->\n          </collapse-item>\n          <label v-show=\"isValid.item\" class=\"label-font\">Item is required.</label>\n        </collapse>\n        <!-- </card> -->\n        <div class=\"row pt-5\" v-if=\"showUploadImage\">\n          <div class=\"col-12 p-0\">\n            <label\n              >Insert Image (Only JPG and PNG files with max 2 MB and 10 images)</label\n            ><br />\n          </div>\n\n          <div class=\"col-xxl-2 col-xl-3 col-lg-4 col-md-6 p-0\">\n            <button\n              class=\"btn btn-default m-0\"\n              style=\"width: 100%\"\n              onclick=\"document.getElementById('upload_image').click()\"\n            >\n              Upload Image\n            </button>\n            <input\n              id=\"upload_image\"\n              multiple\n              type=\"file\"\n              ref=\"image\"\n              accept=\"image/jpeg, image/png\"\n              style=\"display: none\"\n              @change=\"onFileChange\"\n            />\n          </div>\n          <!-- <div class=\"col-xxl-2 col-xl-3 col-lg-4 col-md-6 p-0\">\n            <span\n              class=\"span-upload-image\"\n              onclick=\"document.getElementById('upload_image').click()\"\n              >{{ uploadImageFileName }}</span\n            >\n          </div> -->\n        </div>\n        <div\n          v-if=\"images\"\n          class=\"d-flex justify-content-center row my-2 column-gap-3 row-gap-2\"\n        >\n          <div class=\"image-container\" v-for=\"(image, index) in images\">\n            <!-- <button @click=\"removeImage(index)\">Remove image</button> style=\"max-width: 10%; padding: 5px\"-->\n            <!-- <p-button\n              class=\"container-fluid pic-button\"\n              type=\"danger\"\n              @click=\"removeImage(index)\"\n            >\n              <i slot=\"label\" class=\"nc-icon nc-simple-remove\"></i>\n              Remove Image\n            </p-button> -->\n            <!-- <p-button type=\"default\" icon round>\n              <i class=\"fa fa-heart\"></i>\n            </p-button> -->\n            <div class=\"image-overlay\" v-if=\"!isMobile\">\n              <p-button\n                type=\"danger\"\n                class=\"image-overlay-button m-0\"\n                @click=\"removeImage(index)\"\n                icon\n                round\n              >\n                <i class=\"nc-icon nc-simple-remove\"></i>\n              </p-button>\n            </div>\n            <a class=\"imageClose\" @click=\"removeImage(index)\" v-if=\"isMobile\">&times;</a>\n            <img class=\"imageUpload\" :src=\"image\" />\n          </div>\n        </div>\n      </div>\n      <div class=\"text-center mt-1\">\n        <button\n          class=\"btn btn-warning btn-fill btn-wd mx-1 mb-0 mt-2\"\n          data-bs-target=\"#confirmationDraftPullOut\"\n          data-bs-toggle=\"modal\"\n          v-show=\"isDenied\"\n        >\n          Save as Draft\n        </button>\n        <button\n          class=\"btn btn-warning btn-fill btn-wd mx-1 mb-0 mt-2\"\n          @click.prevent=\"cancelTransaction\"\n          v-show=\"isCancel\"\n        >\n          Cancel\n        </button>\n        <button\n          class=\"btn btn-info btn-fill btn-wd mx-1 mb-0 mt-2\"\n          @click.prevent=\"submit\"\n          v-show=\"isApproved\"\n        >\n          Approved\n        </button>\n        <span\n          id=\"submitBTN\"\n          class=\"d-inline-block\"\n          tabindex=\"0\"\n          data-bs-toggle=\"tooltip\"\n          data-bs-placement=\"bottom\"\n        >\n          <button\n            :disabled=\"isDisabledSubmit\"\n            class=\"btn btn-success btn-fill btn-wd mx-1 mb-0 mt-2\"\n            data-bs-target=\"#confirmationSubmitPullOut\"\n            data-bs-toggle=\"modal\"\n            v-show=\"isSubmit\"\n          >\n            Submit\n          </button></span\n        >\n      </div>\n      <div class=\"clearfix\"></div>\n    </div>\n    <EditBoxLabelModal\n      :transferredData=\"transferredData\"\n      :newItemInputBox=\"newItemInputBox\"\n      :remarksList=\"remarksList\"\n      @TransferDataBoxNumber=\"reArrangeBoxNumber($event)\"\n      @DeletedBoxNumber=\"reArrangeItems($event)\"\n      @closeModal=\"closeModal()\"\n      @renameBoxLabel=\"editingBoxLabel($event)\"\n    ></EditBoxLabelModal>\n\n    <TransactionReceiptModal\n      :transferTransactionID=\"transferTransactionID\"\n      :savingCounter=\"saving_counter\"\n    ></TransactionReceiptModal>\n\n    <!-- <EditSubmitTransactionReceiptModal\n      :transferTransactionID=\"transferTransactionID\"\n      :savingCounter=\"saving_counter\"\n    ></EditSubmitTransactionReceiptModal> -->\n\n    <DraftModal :transferTransactionID=\"transferTransactionID\"></DraftModal>\n    <ConfirmationSubmitPullOutModal\n      @confirm=\"submit($event)\"\n    ></ConfirmationSubmitPullOutModal>\n    <ConfirmationDraftPullOutModal\n      @confirm=\"draft($event)\"\n    ></ConfirmationDraftPullOutModal>\n  </div>\n</template>\n<script>\nimport {\n  Collapse,\n  CollapseItem,\n  Tabs,\n  TabPane,\n  Card,\n  Button,\n} from \"src/components/UIComponents\";\nimport { DatePicker, TimeSelect, Slider, Tag, Input, Select, Option } from \"element-ui\";\nimport PProgress from \"src/components/UIComponents/Progress.vue\";\nimport PSwitch from \"src/components/UIComponents/Switch.vue\";\nimport Vue from \"vue\";\nimport NotificationTemplate from \"../Components/NotificationTemplate\";\nimport NotifAddBoxLabel from \"../Components/Notification/NotifSuccessAddBoxLabel.vue\";\nimport NotifAddItem from \"../Components/Notification/NotifSuccessAddItem.vue\";\nimport NotifDeleteBoxLabel from \"../Components/Notification/NotifSuccessDeleteBoxLabel.vue\";\nimport NotifDeleteItem from \"../Components/Notification/NotifSuccessDeleteItem.vue\";\nimport NotifDraftSave from \"../Components/Notification/NotifSuccessDraftSave.vue\";\nimport NotifItemChangeBoxLabel from \"../Components/Notification/NotifSuccessItemChangeBoxLabel.vue\";\nimport NotifItemQuantity from \"../Components/Notification/NotifSuccessItemQuantity.vue\";\nimport NotifRenameBoxLabel from \"../Components/Notification/NotifSuccessRenameBoxLabel.vue\";\nimport NotifSubmitTransaction from \"../Components/Notification/NotifSuccessSubmitTransaction.vue\";\nimport Swal from \"sweetalert2\";\nimport { Table, TableColumn } from \"element-ui\";\nimport axiosClient from \"../../../../axios\";\nimport EditBoxLabelModal from \"./PullOutRequests/ModalPullOut/EditBoxLabelModal.vue\";\nimport TransactionReceiptModal from \"./PullOutRequests/ModalPullOut/TransactionReceiptModal.vue\";\nimport EditSubmitTransactionReceiptModal from \"./PullOutRequests/ModalPullOut/EditSubmitTransactionReceiptModal.vue\";\nimport DraftModal from \"./PullOutRequests/ModalPullOut/DraftModal.vue\";\nimport linkName from \"../../../../linkName\";\nimport ConfirmationSubmitPullOutModal from \"./PullOutRequests/ModalPullOut/ConfirmationSubmitPullOutModal.vue\";\nimport ConfirmationDraftPullOutModal from \"./PullOutRequests/ModalPullOut/ConfirmationDraftPullOutModal.vue\";\n// import axios, { isCancel } from \"axios\";\nimport * as XLSX from \"xlsx\";\n// import EditSubmitTransactionReceiptModal from \"./PullOutRequests/ModalPullOut/EditSubmitTransactionReceiptModal.vue\";\n\nVue.use(Table);\nVue.use(TableColumn);\n\nexport default {\n  components: {\n    [DatePicker.name]: DatePicker,\n    [TimeSelect.name]: TimeSelect,\n    [Slider.name]: Slider,\n    [Tag.name]: Tag,\n    [Input.name]: Input,\n    [Button.name]: Button,\n    [Option.name]: Option,\n    [Select.name]: Select,\n    PSwitch,\n    PProgress,\n    TabPane,\n    Tabs,\n    CollapseItem,\n    Collapse,\n    Card,\n    NotificationTemplate,\n    NotifAddBoxLabel,\n    NotifAddItem,\n    NotifDeleteBoxLabel,\n    NotifDeleteItem,\n    NotifDraftSave,\n    NotifItemChangeBoxLabel,\n    NotifItemQuantity,\n    NotifRenameBoxLabel,\n    NotifSubmitTransaction,\n    EditBoxLabelModal,\n    TransactionReceiptModal,\n    EditSubmitTransactionReceiptModal,\n    DraftModal,\n    ConfirmationSubmitPullOutModal,\n    ConfirmationDraftPullOutModal,\n    EditSubmitTransactionReceiptModal,\n  },\n  data() {\n    return {\n      showCategoryBrand: true,\n      showUploadImage: true,\n      transferredData: \"\",\n      isCompany: false,\n      isChainCode: true,\n      isBranchName: true,\n      isTransactionType: true,\n      isShowButton: false,\n      itemCodeList: [],\n      isEditBLDisabled: false,\n      isBoxLabel: false,\n      isItem: false,\n      isAddItem: true,\n      isDisabledSubmit: true,\n      showItemInput: \"\",\n      companyList: [],\n      chainCodeList: [],\n      branchNameList: [],\n      newTransaction: {\n        //input variable\n        company: \"\",\n        chainCode: \"\",\n        branchName: \"\",\n        transactionType: \"\",\n        boxLabels: [], //list of inputted box label\n        items: [], //list of inputted item\n      },\n      newItemInputBox: [],\n      isValid: {\n        company: false,\n        chainCode: false,\n        branchName: false,\n        transactionType: false,\n        boxLabel: false,\n        item: false,\n      },\n      isApproved: false,\n      isCancel: false,\n      isSubmit: true,\n      hoveredRow: null,\n      uploadImageFileName: \"Choose an Image\",\n      uploadExcelFileName: \"Choose a File\",\n\n      transactionTypeList: [\n        {\n          value: \"CPO Item for Disposal in the Store c/o Supervisor\",\n          label: \"CPO Item for Disposal in the Store c/o Supervisor\",\n          company: \"NBFI\",\n        },\n        {\n          value: \"CPO for Transfer to Another Store\",\n          label: \"CPO for Transfer to Another Store\",\n          company: \"NBFI\",\n        },\n        {\n          value: \"CPO Back to WH via In-House Service\",\n          label: \"CPO Back to WH via In-House Service\",\n          company: \"NBFI\",\n        },\n        {\n          value: \"CPO Back to WH via Chain Distribution Center\",\n          label: \"CPO Back to WH via Chain Distribution Center\",\n          company: \"NBFI\",\n        },\n        {\n          value: \"CPO Back to WH via 3rd Party Trucking\",\n          label: \"CPO Back to WH via 3rd Party Trucking\",\n          company: \"NBFI\",\n        },\n        {\n          value: \"CPO Back to WH c/o Supervisor\",\n          label: \"CPO Back to WH c/o Supervisor\",\n          company: \"NBFI\",\n        },\n        // { value: \"Concess Direct Pull-Out\", label: \"Concess Direct Pull-Out\" },\n      ],\n      newBoxLabel: \"\",\n      newItemInput: \"\",\n      newBrand: \"\",\n      newItemDescription: \"\",\n      newStyleCode: \"\",\n      newItemCode: \"\",\n      notifications: {\n        topCenter: false,\n      },\n      modals: {\n        classic: false,\n        notice: false,\n        mini: false,\n      },\n      isNewBoxLabel: false,\n      isNewItem: false,\n      isRightCode: false,\n      transferTransactionID: \"\",\n      uniqueItemss: [],\n      duplicateItemss: [],\n      isDenied: true,\n      dataArray: [],\n      myData: [],\n      counter: 0,\n      remarksList: [\n        \"CLOSED STORE/BRANCH - GOOD ITEMS\",\n        \"CLOSED STORE/BRANCH - DAMAGED/DIRTY ITEMS\",\n        \"CLOSED STORE/BRANCH - DISPOSAL/CONTAINS BROKEN GLASS ITEMS\",\n        \"REGULAR PULL-OUT - GOOD ITEMS\",\n        \"REGULAR PULL-OUT - DAMAGED/DIRTY ITEMS\",\n        \"REGULAR PULL-OUT - DISPOSAL/CONTAINS BROKEN GLASS ITEMS\",\n        \"STORE TO STORE/BRANCH TO BRANCH - GOOD ITEMS\",\n        \"STORE TO STORE/BRANCH TO BRANCH - DAMAGED/DIRTY ITEMS\",\n        \"STORE TO STORE/BRANCH TO BRANCH - DISPOSAL/CONTAINS BROKEN GLASS ITEMS\",\n      ],\n      images: [],\n      files: [],\n      img_counter: 0,\n      strCategory: {\n        boxNumber: 0,\n        label: \"\",\n      },\n      isDraft: false,\n      barcode: \"item_16\",\n      saving_counter: null,\n      isMobile: null,\n      headerCellStyle: {\n        color: \"black\",\n      },\n      cellStyle: {\n        color: \"black\",\n        fontWeight: \"normal\",\n      },\n      tableColumns: [\n        {\n          prop: \"\",\n          label: \"\",\n          type: \"selection\",\n          width: \"40\",\n          minWidth: \"\",\n        },\n        {\n          prop: \"code\",\n          label: \"Item Code\",\n          type: \"\",\n          width: \"155\",\n          minWidth: \"\",\n        },\n        {\n          prop: \"description\",\n          label: \"Description\",\n          type: \"\",\n          width: \"\",\n          minWidth: \"450\",\n        },\n        {\n          prop: \"size\",\n          label: \"Size\",\n          type: \"\",\n          width: \"55\",\n          minWidth: \"\",\n        },\n        {\n          prop: \"color\",\n          label: \"Color\",\n          type: \"\",\n          width: \"\",\n          minWidth: \"100\",\n        },\n        {\n          prop: \"category\",\n          label: \"Category\",\n          type: \"\",\n          width: \"\",\n          minWidth: \"300\",\n        },\n      ],\n    };\n  },\n  computed: {\n    filteredRemarks() {\n      return this.remarksList.filter((newBoxLabel) => {\n        return newBoxLabel.toLowerCase().includes(this.newBoxLabel.toLowerCase());\n      });\n    },\n    sortedBoxes() {\n      return this.newTransaction.boxLabels.sort((a, b) => a.boxNumber - b.boxNumber);\n    },\n    getItemBoxLabel() {\n      return (boxNumber) => {\n        const boxLabel = this.newTransaction.boxLabels.find(\n          (label) => label.boxNumber === boxNumber\n        );\n        return boxLabel ? boxLabel.boxLabel : \"\";\n      };\n    },\n  },\n  mounted() {\n    const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n    const tooltipList = [...tooltipTriggerList].map(\n      (tooltipTriggerEl) => new bootstrap.Tooltip(tooltipTriggerEl)\n    );\n    let tooltipExcel = bootstrap.Tooltip.getInstance(\"#excelBtn\");\n    tooltipExcel._config.title =\n      \"Only XLSX file with a standard Template (Column A: Box Number, Column B: Box Label, Column C: Item Code, Column D: Quantity)\";\n    tooltipExcel.update();\n    // this.processData();\n    this.fetchEdit();\n    this.fetchCompany();\n    if (window.resolveRouteChange) {\n      window.resolveRouteChange();\n      window.resolveRouteChange = null;\n    }\n    linkName.val = \"Pull-Out Requisition Form\";\n\n    this.isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n  },\n  watch: {\n    newTransaction: {\n      handler(val) {\n        this.validateSubmit();\n      },\n      deep: true,\n    },\n    \"newTransaction.items\": function (val, oldVal) {\n      this.addCategoryBoxLabel();\n    },\n    \"newTransaction.boxLabels\": function (val, oldVal) {\n      this.enableDropDowns();\n    },\n    \"newTransaction.company\": function (val, oldVal) {\n      this.showButtons();\n    },\n    \"newTransaction.chainCode\": function (val, oldVal) {\n      this.showButtons();\n    },\n    \"newTransaction.branchName\": function (val, oldVal) {\n      this.showButtons();\n    },\n    \"newTransaction.transactionType\": function (val, oldVal) {\n      this.showButtons();\n    },\n    barcode: function (val, oldVal) {\n      this.clearItemInput();\n    },\n    sortedBoxes(newSortedBoxes) {\n      // Option 1: Using Vue.set\n      Vue.set(this, \"newTransaction.boxLabels\", newSortedBoxes);\n\n      // Option 2: Reassigning the array\n      // this.boxes = newSortedBoxes.slice();\n    },\n  },\n  methods: {\n    // cellClass() {\n    //   return \"itemCodeStyle\";\n    // },\n    reArrangeItems(deletedBoxNumber) {\n      console.log(\"Deleted ID Box Number\", deletedBoxNumber);\n      this.newTransaction.items.forEach((temp) => {\n        if (deletedBoxNumber < temp.boxNumber) temp.boxNumber--;\n      });\n    },\n    reArrangeBoxNumber(transfer) {\n      console.log(\"Transfer from edit box Label\", transfer);\n\n      this.newTransaction.boxLabels = transfer;\n      console.log(\"New Transfer from edit box Label\", this.newTransaction.boxLabels);\n      this.newItemInputBox = [];\n      this.newTransaction.boxLabels.forEach((boxLabel) => {\n        var tempIdBox = {\n          id: boxLabel.id,\n        };\n        this.newItemInputBox.push(tempIdBox);\n      });\n\n      console.log(\"Itemssssss:\", this.newTransaction.items);\n    },\n    clearItemInput() {\n      this.newItemInput = \"\";\n    },\n    restrictChar($event) {\n      let keyCode = $event.keyCode ? $event.keyCode : $event.which;\n      if (keyCode == 91 || keyCode == 93) {\n        // 46 is dot\n        $event.preventDefault();\n      }\n    },\n    addCategoryBoxLabel() {\n      if (this.isDraft == false) {\n        this.newTransaction.boxLabels.forEach((box) => {\n          var filteredItems = this.newTransaction.items.filter(\n            (item) => item.boxNumber === box.boxNumber\n          );\n          // console.log(\"Filtered Items\", filteredItems);\n          var uniqueCategory = [\n            ...new Set(filteredItems.map((item) => item.categorybrand)),\n          ];\n          let strCategory = \"\";\n          for (let i = 0; i < uniqueCategory.length; i++) {\n            if (i == 0) strCategory = \" [ \" + uniqueCategory[i];\n            else strCategory = strCategory + \", \" + uniqueCategory[i];\n            if (i == uniqueCategory.length - 1) strCategory = strCategory + \" ]\";\n          }\n          let tempIndex = box.boxLabel.indexOf(\"[\");\n          if (tempIndex > 0) box.boxLabel = box.boxLabel.substr(0, tempIndex).trim();\n          box.boxLabel = box.boxLabel + strCategory;\n        });\n        // console.log(\"Changes on Category Box Label\");\n      }\n      // console.log(this.newTransaction.boxLabels);\n    },\n    filterRemarks() {\n      this.filteredRemarks = this.remarksList.filter((newBoxLabel) => {\n        return newBoxLabel.toLowerCase().includes(this.newBoxLabel.toLowerCase());\n      });\n    },\n    onFileChange(e) {\n      var files = e.target.files || e.dataTransfer.files;\n\n      var file = e.target.files[0];\n      const maxSizeInBytes = 2 * 1024 * 1024; // 2MB\n\n      if (file && file.size > maxSizeInBytes) {\n        // File size exceeds the limit\n        alert(\"Please select an image file smaller than 2MB.\");\n        // Clear the file input\n        e.target.value = \"\";\n        return;\n      } else {\n        this.files.push(e.target.files[0]);\n\n        if (!files.length) return;\n        this.createImage(files);\n        this.uploadImageFileName = e.target.files[0].name;\n      }\n    },\n    createImage(files) {\n      var vm = this;\n      for (var index = 0; index < files.length; index++) {\n        var reader = new FileReader();\n        reader.onload = function (event) {\n          const imageUrl = event.target.result;\n          vm.images.push(imageUrl);\n        };\n        reader.readAsDataURL(files[index]);\n      }\n    },\n    removeImage(index) {\n      this.images.splice(index, 1);\n      this.uploadImageFileName = \"Choose an Image\";\n    },\n    clearImage() {\n      document.getElementById(\"formFile\").value = null;\n      frame.src = \"\";\n    },\n    handleFileUploadImage() {\n      console.log(\"image:\", this.files);\n      console.log(\"Transaction ID:\", this.transferTransactionID);\n      const config = {\n        headers: {\n          \"content-type\": \"multipart/form-data\",\n        },\n      };\n\n      if (this.img_counter < this.files.length) {\n        axiosClient\n          .post(\n            \"/upload\",\n            {\n              image: this.files[this.img_counter],\n              company: this.newTransaction.company,\n              branchName: this.newTransaction.branchName,\n              transactionID: this.transferTransactionID,\n            },\n            config\n          )\n          .then((response) => {\n            console.log(\"Success Upload Image\", response.data);\n            this.img_counter++;\n            setTimeout(this.handleFileUploadImage, 2000);\n          })\n          .catch((error) => {\n            console.error(error);\n          });\n      }\n    },\n    handleFileUpload(event) {\n      console.log(\"File Name: \", event.target.files[0]);\n      if (event.target.files.length != 0) {\n        this.uploadExcelFileName = event.target.files[0].name;\n        const file = event.target.files[0];\n        const reader = new FileReader();\n\n        reader.onload = (e) => {\n          const data = new Uint8Array(e.target.result);\n          const workbook = XLSX.read(data, { type: \"array\" });\n\n          const worksheetName = workbook.SheetNames[0];\n          const worksheet = workbook.Sheets[worksheetName];\n\n          const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n          // header: 1 indicates that the first row contains column headers\n\n          // Save the JSON data to a Vue variable\n          console.log(\"Excel Data\", jsonData);\n          this.myData = jsonData;\n          let arrayBox = [];\n          for (var x = 0; x < this.myData.length; x++) {\n            this.dataArray.push(this.myData[x]);\n            arrayBox.push(this.myData[x][1]);\n          }\n\n          console.log(\"Data:\", this.dataArray);\n\n          console.log(\"Import Excel\", this.dataArray.length);\n\n          const filteredArray = arrayBox.filter((value, index, self) => {\n            return self.indexOf(value) === index;\n          });\n\n          let tempBoxLabel = [];\n          for (var x = 0; x < filteredArray.length; x++) {\n            tempBoxLabel = {\n              id: x + 1,\n              boxNumber: x + 1,\n              boxLabel: filteredArray[x],\n            };\n\n            this.newTransaction.boxLabels.push(tempBoxLabel);\n            let tempItem = [];\n\n            if (this.newTransaction.boxLabels.length == 0) {\n              tempItem = {\n                id: this.newTransaction.boxLabels.length + 1,\n              };\n            } else {\n              tempItem = {\n                id:\n                  this.newTransaction.boxLabels[this.newTransaction.boxLabels.length - 1]\n                    .id + 1,\n              };\n            }\n            this.newItemInputBox.push(tempItem);\n          }\n\n          console.log(filteredArray);\n          // for (var x = 0; x < this.dataArray.length; x++) {\n          //   console.log(\"ItemCode\", this.dataArray[x][2]);\n          // }\n          // var y = 0;\n          // while (y < this.dataArray.length) {\n\n          //   y++;\n          // }\n          this.counter = 0;\n          this.saveItemsExcel();\n        };\n\n        reader.readAsArrayBuffer(file);\n      }\n    },\n\n    saveItemsExcel() {\n      if (this.counter < this.dataArray.length) {\n        // console.log(\"Data\", this.dataArray[this.counter - 1]);\n        var boxNumber = this.dataArray[this.counter][0];\n        var quantity = this.dataArray[this.counter][3];\n        axiosClient\n          .get(\"/fetchSameItems\", {\n            params: {\n              company: this.newTransaction.company,\n              ItemNo: this.dataArray[this.counter][2],\n            },\n          })\n          .then((response) => {\n            console.log(\"Data\", response.data);\n            if (response.data.length == 0) {\n              setTimeout(this.saveItemsExcel, 2000);\n            }\n            for (var x = 0; x < response.data.length; x++) {\n              var flag = true;\n\n              for (var i = 0; i < this.newTransaction.items.length; i++) {\n                if (\n                  this.newTransaction.items[i].code == response.data[x].ItemNo &&\n                  this.newTransaction.items[i].boxNumber == boxNumber\n                ) {\n                  this.newTransaction.items[i].quantity =\n                    parseInt(this.newTransaction.items[x].quantity) + 1;\n                  flag = false;\n                  break;\n                }\n              }\n              if (flag) {\n                let tempItem = {\n                  code: response.data[x].ItemNo,\n                  description: response.data[x].ItemDescription,\n                  categorybrand: response.data[x].brandNames,\n                  quantity: quantity,\n                  size: response.data[x].Size,\n                  color: response.data[x].Color,\n                  // boxLabel: label,\n                  boxNumber: parseInt(boxNumber),\n                  category: response.data[x].Category,\n                };\n                this.newTransaction.items.push(tempItem);\n              }\n\n              console.log(\"Items\", this.newTransaction.items);\n\n              this.isAddItem = true;\n              this.notifyVue(\"AddItem\", \"bottom\", \"right\");\n              setTimeout(this.saveItemsExcel, 2000);\n            }\n          })\n          .catch((error) => {\n            console.error(error);\n          });\n      }\n      this.counter++;\n    },\n\n    numberOnly($event) {\n      let keyCode = $event.keyCode ? $event.keyCode : $event.which;\n      if (keyCode < 48 || keyCode > 57) {\n        // 46 is dot\n        $event.preventDefault();\n      }\n    },\n    validateSubmit() {\n      let uniqueItems = [\n        ...new Set(this.newTransaction.items.map((item) => item.boxNumber)),\n      ];\n      let itemsValidation = false;\n      let itemsValidationTemp = false;\n      for (let j in this.newTransaction.boxLabels) {\n        for (let i in uniqueItems) {\n          if (uniqueItems[i] == this.newTransaction.boxLabels[j].id) {\n            itemsValidationTemp = true;\n            itemsValidation = true;\n            break;\n          } else {\n            itemsValidation = false;\n            itemsValidationTemp = false;\n          }\n        }\n      }\n      for (let x in this.newTransaction.items) {\n        if (this.newTransaction.items[x].quantity == 0) {\n          itemsValidation = false;\n          // let tooltip = bootstrap.Tooltip.getInstance(\"#submitBTN\");\n          // tooltip._config.title = \"No items should have a quantity of 0.\";\n          // tooltip.update();\n          const submitTooltip = document.getElementById(\"submitBTN\");\n          const tooltip = new bootstrap.Tooltip(submitTooltip, {\n            title: \"No items should have a quantity of 0.\",\n          });\n          tooltip.update();\n          break;\n        }\n      }\n      if (!itemsValidationTemp) {\n        const submitTooltip = document.getElementById(\"submitBTN\");\n        const tooltip = new bootstrap.Tooltip(submitTooltip, {\n          title: \"Kindly add item/s on every boxes you've added.\",\n        });\n        tooltip.update();\n      }\n      if (\n        !this.newTransaction.company ||\n        !this.newTransaction.chainCode ||\n        !this.newTransaction.branchName ||\n        !this.newTransaction.transactionType\n      ) {\n        const submitTooltip = document.getElementById(\"submitBTN\");\n        const tooltip = new bootstrap.Tooltip(submitTooltip, {\n          title: \"Complete the form above to enable this button.\",\n        });\n        tooltip.update();\n      } else if (this.newTransaction.boxLabels.length <= 0) {\n        const submitTooltip = document.getElementById(\"submitBTN\");\n        const tooltip = new bootstrap.Tooltip(submitTooltip, {\n          title: \"No box added. Kindly add box/es to be able to add item/s.\",\n        });\n        tooltip.update();\n      } else if (this.newTransaction.items.length <= 0) {\n        const submitTooltip = document.getElementById(\"submitBTN\");\n        const tooltip = new bootstrap.Tooltip(submitTooltip, {\n          title: \"No items added. Kindly add item/s for this pull-out request.\",\n        });\n        tooltip.update();\n      }\n      if (\n        this.newTransaction.company &&\n        this.newTransaction.chainCode &&\n        this.newTransaction.branchName &&\n        this.newTransaction.transactionType &&\n        this.newTransaction.boxLabels.length > 0 &&\n        itemsValidation\n      ) {\n        this.isDisabledSubmit = false;\n        let tooltip = bootstrap.Tooltip.getInstance(\"#submitBTN\");\n        tooltip.disable();\n      } else this.isDisabledSubmit = true;\n    },\n    editingBoxLabel({ index, value, tempBL }) {\n      if (value) this.newTransaction.boxLabels[index].boxLabel = value;\n      else this.newTransaction.boxLabels[index].boxLabel = tempBL;\n    },\n    enableDropDowns() {\n      if (this.newTransaction.boxLabels.length == 0) {\n        this.isCompany = false;\n        this.isChainCode = false;\n        this.isBranchName = false;\n        this.isTransactionType = false;\n        this.isEditBLDisabled = true;\n        // console.log(this.newTransaction.boxLabels.length);\n      } else this.isEditBLDisabled = false;\n    },\n    showButtons() {\n      if (\n        this.newTransaction.company &&\n        this.newTransaction.chainCode &&\n        this.newTransaction.branchName &&\n        this.newTransaction.transactionType\n      ) {\n        this.isShowButton = true;\n        if (this.newTransaction.boxLabels.length == 0) this.isEditBLDisabled = true;\n        else this.isEditBLDisabled = false;\n      } else this.isShowButton = false;\n    },\n    fetchEdit() {\n      try {\n        const uri = window.location.href;\n        var transactionID = uri.split(\"?\")[1];\n        var id = transactionID.split(\"=\")[1].split(\"&\")[0];\n        // console.log(\"ID\", id);\n        // console.log(\"Company\", transactionID.split(\"=\")[2]);\n        var company = transactionID.split(\"=\")[2];\n        this.isDraft = true;\n        console.log(\"Draft\", this.isDraft);\n        axiosClient\n          .get(\"/fetchEditDraftBranch\", {\n            params: {\n              company: company,\n              plID: id,\n            },\n          })\n          .then((response) => {\n            // console.log(\"Edit Branch:\", response.data, this.itemss);\n            this.newTransaction.company = response.data[0].company;\n            this.newTransaction.branchName = response.data[0].branchName;\n            this.newTransaction.chainCode = response.data[0].chainCode;\n            this.newTransaction.transactionType = response.data[0].transactionType;\n\n            if (\n              response.data[0].status == \"denied\" ||\n              response.data[0].status == \"endorsement\" ||\n              response.data[0].status == \"unprocessed\"\n            ) {\n              this.isDenied = false;\n              this.isCancel = true;\n            }\n\n            if (response.data[0].status == \"endorsement\") {\n              this.isApproved = true;\n              this.isSubmit = false;\n            }\n\n            axiosClient\n              .get(\"/fetchEditDraftItem\", {\n                params: {\n                  company: company,\n                  plID: id,\n                },\n              })\n              .then((response) => {\n                // console.log(\"Edit Item:\", response.data);\n                for (var x = 0; x < response.data.length; x++) {\n                  this.newTransaction.items.push(response.data[x]);\n                }\n\n                const filteredData = this.newTransaction.items.filter(\n                  (obj, index, self) => {\n                    const boxLabel = obj.boxLabel;\n                    return self.findIndex((o) => o.boxLabel === boxLabel) === index;\n                  }\n                );\n\n                const boxData = filteredData.map((obj) => {\n                  return {\n                    boxLabel: obj.boxLabel,\n                    boxNumber: obj.boxNumber,\n                  };\n                });\n\n                // console.log(\"Filtered Box label:\", boxData);\n\n                for (var x = 0; x < boxData.length; x++) {\n                  // console.log(\"Box Label:\", boxData[x].boxLabel);\n                  this.newTransaction.boxLabels.push({\n                    id: boxData[x].boxNumber,\n                    boxNumber: boxData[x].boxNumber,\n                    boxLabel: boxData[x].boxLabel,\n                  });\n                  this.newItemInputBox.push({\n                    id: boxData[x].boxNumber,\n                  });\n                  console.log(\"New Box Label:\", this.newTransaction.boxLabels);\n                }\n\n                this.isDraft = false;\n                console.log(\"Draft:\", this.isDraft);\n                if (this.newTransaction.company) {\n                  this.isCompany = false;\n                  this.isChainCode = false;\n                  this.fetchCompany();\n                  this.fetchChainCode();\n                }\n\n                if (this.newTransaction.chainCode) {\n                  this.isChainCode = false;\n                  this.isBranchName = false;\n                  this.fetchChainName();\n                  this.fetchChainCode();\n                }\n\n                if (this.newTransaction.branchName) {\n                  this.isBranchName = false;\n                  this.isTransactionType = false;\n                  this.fetchChainName();\n                }\n\n                if (this.newTransaction.transactionType) {\n                  // console.log(\"Yes\", this.isShowButton);\n                  this.isCompany = false;\n                  this.isChainCode = false;\n                  this.isBranchName = false;\n                  this.isTransactionType = false;\n                  // this.isShowButton = true;\n                  // console.log(\"Yes 2\", this.isShowButton);\n                }\n\n                if (this.newTransaction.items.length) {\n                  // console.log(\"Disable\", this.newTransaction.items.length);\n                  this.isCompany = true;\n                  this.isChainCode = true;\n                  this.isBranchName = true;\n                  this.isTransactionType = true;\n                  // this.isShowButton = true;\n                }\n              })\n              .catch((error) => {\n                // console.error(error);\n              });\n          })\n          .catch((error) => {\n            // console.error(error);\n          });\n      } catch {\n        // console.log(\"No Edit\");\n        //Fetching Promo Info\n        axiosClient\n          .get(\"/fetchPromoBranchInfo\", {\n            params: {\n              userID: sessionStorage.getItem(\"UserID\"),\n            },\n          })\n          .then((response) => {\n            // console.log(\"Promo Branch Info:\", response.data);\n            this.newTransaction.company = response.data[0].company;\n            this.newTransaction.chainCode = response.data[0].chainCode;\n            this.newTransaction.branchName = response.data[0].branchName;\n            this.fetchChainCode();\n            this.fetchChainName();\n          })\n          .catch((error) => {\n            // console.error(error);\n          });\n      }\n    },\n    cancelTransaction() {\n      // location.href = \"http://192.168.0.7:4040/#/pull-out/requests\";\n      if (\n        sessionStorage.getItem(\"Position\") == \"Agent\" ||\n        sessionStorage.getItem(\"Position\") == \"Approver\"\n      )\n        this.$router.push({\n          path: \"/pull-out/requests\",\n        });\n      else\n        this.$router.push({\n          path: \"/pull-out/pullout-transaction\",\n        });\n    },\n    updateData(updatedData) {\n      // this.newTransaction.boxLabels = updatedData;\n      // console.log(\"das\", updatedData);\n    },\n    openModal(data) {\n      data.boxLabels.forEach((box) => {\n        let tempIndex = box.boxLabel.indexOf(\"[\");\n        if (tempIndex > 0) box.boxLabel = box.boxLabel.substr(0, tempIndex).trim();\n      });\n      console.log(\"Edit: \", data);\n      this.transferredData = data;\n    },\n    closeModal() {\n      // console.log(\"CLOSE\");\n      this.addCategoryBoxLabel();\n      this.transferredData = \"\";\n    },\n    showButton(itemId) {\n      this.hoveredRow = itemId;\n    },\n    hideButton(itemId) {\n      this.hoveredRow = null;\n    },\n    removeItem(code, boxNumber) {\n      this.validateSubmit();\n      console.log(\"New DATAs\", code, boxNumber);\n      // this.images.splice(index, 1);\n      // this.newTransaction.items = this.newTransaction.items.filter(\n      //   (item) => item.code !== code || item.boxNumber !== boxNumber\n      // );\n      for (let key in this.newTransaction.items) {\n        console.log(\n          \"Condition if will delete\",\n          this.newTransaction.items[key].code === code ||\n            this.newTransaction.items[key].boxNumber === boxNumber\n        );\n\n        console.log(\"Items:\", this.newTransaction.items[key].code);\n        console.log(\"Code:\", code);\n        console.log(\"BoxNumbers:\", this.newTransaction.items[key].boxNumber);\n        console.log(\"BoxNumber:\", boxNumber);\n        if (\n          this.newTransaction.items[key].code === code &&\n          this.newTransaction.items[key].boxNumber === boxNumber\n        ) {\n          console.log(\"Key:\", key);\n          this.newTransaction.items.splice(key, 1);\n          break;\n        }\n      }\n      // this.newTransaction.items.for((key, index) => {\n      //   console.log(\n      //     \"Condition if will delete\",\n      //     key.code === code || key.boxNumber === boxNumber\n      //   );\n      //   if (key.code === code || key.boxNumber === boxNumber) {\n      //     this.newTransaction.items.splice(index, 1);\n      //   }\n      // });\n\n      this.notifyVue(\"DeleteItem\", \"bottom\", \"right\");\n\n      // alert(\"Your data: \" + JSON.stringify(data));\n\n      // console.log(\"New DATA\", data);\n    },\n    fetchItems() {\n      // console.log(\"Barcode\", this.barcode);\n      if (this.newItemInput.length >= 4) {\n        if (\n          this.newTransaction.company == \"NBFI\" ||\n          this.newTransaction.company == \"CMC\" ||\n          this.newTransaction.company == \"ASC\"\n        ) {\n          axiosClient\n            .get(\"/fetchItemsNBFI\", {\n              params: {\n                ItemNo: this.newItemInput,\n                barcode: this.barcode,\n              },\n            }) // Make a GET request to the specified URL\n            .then((response) => {\n              //console.log(\"Item Code Response: \", response.data);\n              this.itemCodeList = response.data; // Update the 'data' variable with the retrieved data\n            })\n            .catch((error) => {\n              // console.error(error.reponse); // Handle any errors that may occur\n            });\n        } else {\n          axiosClient\n            .get(\"/fetchItems\", {\n              params: {\n                ItemNo: this.newItemInput,\n              },\n            }) // Make a GET request to the specified URL\n            .then((response) => {\n              //console.log(\"Item Code Response: \", response.data);\n              this.itemCodeList = response.data; // Update the 'data' variable with the retrieved data\n            })\n            .catch((error) => {\n              // console.error(error.reponse); // Handle any errors that may occur\n            });\n        }\n      } else if (this.newItemInput.length == 0) this.itemCodeList = [];\n    },\n    compareItemCode() {\n      let value = this.newItemInput;\n      if (value.indexOf(\" - \") >= 0) {\n        let parts = value.split(\" - \");\n        this.newItemInput = parts[0];\n      }\n    },\n    handleQuantity(item) {\n      //console.log(\"Item Quantity\", item.quantity);\n      if (!item.quantity) {\n        //console.log(\"Empty\");\n        item.quantity = 0;\n      }\n      this.notifyVue(\"ItemQuantity\", \"bottom\", \"right\");\n    },\n    notifyVue(notify, verticalAlign, horizontalAlign) {\n      var notification = \"\";\n      let notifType = \"\";\n\n      if (notify === \"AddBoxLabel\") {\n        notification = NotifAddBoxLabel;\n        notifType = \"success\";\n      } else if (notify === \"AddItem\") {\n        notification = NotifAddItem;\n        notifType = \"success\";\n      } else if (notify === \"DeleteBoxLabel\") {\n        notification = NotifDeleteBoxLabel;\n        notifType = \"danger\";\n      } else if (notify === \"DeleteItem\") {\n        notification = NotifDeleteItem;\n        notifType = \"danger\";\n      } else if (notify === \"DraftSave\") {\n        notification = NotifDraftSave;\n        notifType = \"success\";\n      } else if (notify === \"ChangeBoxLabel\") {\n        notification = NotifItemChangeBoxLabel;\n        notifType = \"success\";\n      } else if (notify === \"ItemQuantity\") {\n        notification = NotifItemQuantity;\n        notifType = \"success\";\n      } else if (notify === \"RenameBoxLabel\") {\n        notification = NotifRenameBoxLabel;\n        notifType = \"success\";\n      } else {\n        notification = NotifSubmitTransaction;\n        notifType = \"success\";\n      }\n\n      this.$notify({\n        component: notification,\n        // icon: \"nc-icon nc-bell-55\",\n        horizontalAlign: horizontalAlign,\n        verticalAlign: verticalAlign,\n        type: notifType,\n        props: {\n          customValue: \"Success\",\n        },\n      });\n    },\n    fetchCompany() {\n      if (\"User\" != sessionStorage.getItem(\"Position\"))\n        axiosClient\n          .get(\"/fetchCompany\")\n          .then((response) => {\n            this.companyList = response.data;\n          })\n          .catch((error) => {\n            console.error(error);\n          });\n      else\n        axiosClient\n          .get(\"/fetchCompanyByUser\", {\n            params: {\n              userID: sessionStorage.getItem(\"UserID\"),\n            },\n          })\n          .then((response) => {\n            this.companyList = response.data;\n          })\n          .catch((error) => {\n            console.error(error);\n          });\n      var company = sessionStorage.getItem(\"Company\");\n      if (company == \"NBFI\" || company == \"ASC\" || company == \"CMC\")\n        this.showCategoryBrand = true;\n      else this.showCategoryBrand = false;\n\n      // if (sessionStorage.getItem(\"Position\") == \"Admin\") this.showUploadImage = true;\n    },\n    fetchChainCode() {\n      if (\"User\" == sessionStorage.getItem(\"Position\"))\n        axiosClient\n          .get(\"/fetchChainByUser\", {\n            params: {\n              company: this.newTransaction.company,\n              userID: sessionStorage.getItem(\"UserID\"),\n            },\n          })\n          .then((response) => {\n            //console.log(\"Chain Code Response:\", response.data);\n            this.chainCodeList = response.data;\n          })\n          .catch((error) => {\n            console.error(error);\n          });\n      // this.notifyVue(\"bottom\", \"right\");\n      else\n        axiosClient\n          .get(\"/fetchChain\", {\n            params: {\n              company: this.newTransaction.company,\n            },\n          })\n          .then((response) => {\n            //console.log(\"Chain Code Response:\", response.data);\n            this.chainCodeList = response.data;\n          })\n          .catch((error) => {\n            console.error(error);\n          });\n      // this.notifyVue(\"bottom\", \"right\");\n\n      this.isChainCode = false;\n    },\n    fetchChainName() {\n      if (\"User\" == sessionStorage.getItem(\"Position\"))\n        axiosClient\n          .get(\"/fetchChainNameByUser\", {\n            params: {\n              chainCode: this.newTransaction.chainCode,\n              userID: sessionStorage.getItem(\"UserID\"),\n            },\n          })\n          .then((response) => {\n            //console.log(\"Chain Name Response:\", response.data);\n            this.branchNameList = response.data;\n          })\n          .catch((error) => {\n            console.error(error);\n          });\n      else {\n        axiosClient\n          .get(\"/fetchChainName\", {\n            params: {\n              chainCode: this.newTransaction.chainCode,\n              company: this.newTransaction.company,\n            },\n          })\n          .then((response) => {\n            // console.log(\"Chain Name Response:\", response.data);\n            this.branchNameList = response.data;\n          })\n          .catch((error) => {\n            console.error(error);\n          });\n\n        this.isBranchName = false;\n      }\n    },\n    addItem(boxNUMBER) {\n      this.isItem = false;\n      this.isAddItem = false;\n      this.showItemInput = boxNUMBER;\n      // console.log(\"clicked nUMBER:\", this.showItemInput);\n    },\n    saveItem(boxNUMBER) {\n      if (this.barcode == \"item_16\") {\n        if (this.newItemInput.length > 16)\n          this.newItemInput = this.newItemInput.slice(0, 16);\n      } else {\n        this.newItemInput = this.newItemInput.slice(0, 12);\n      }\n      if (this.barcode == \"item_12\") {\n        axiosClient\n          .get(\"/fetchItemsBarcode\", {\n            params: {\n              ItemNo: this.newItemInput,\n              company: this.newTransaction.company,\n            },\n          })\n          .then((response) => {\n            // console.log(\"Item Barcode to Item No: \", response.data[0]);\n            this.newItemInput = response.data[0].ItemNo;\n          })\n          .catch((error) => {\n            console.error(error);\n          });\n      }\n      var checkItemData = true;\n      // console.log(\"Length Item Code:\", this.newItemCode.length > 16);\n      setTimeout(() => {\n        // console.log(\"New Item Input:\", this.newItemInput);\n        axiosClient\n          .get(\"/compareItemCode\", {\n            params: {\n              companyType: this.newTransaction.company,\n              ItemNo: this.newItemInput,\n            },\n          })\n          .then((response) => {\n            // console.log(\"Success Item No:\", response.data);\n            if (response.data.length == 0) {\n              // console.log(\"No Item Retrieved\");\n              checkItemData = false;\n            }\n            //console.log(\"Success Item Description\", response.data[0].ItemDescription);\n            this.newItemCode = response.data[0].ItemNo;\n            this.newItemDescription = response.data[0].ItemDescription;\n            this.newStyleCode = response.data[0].StyleCode;\n\n            let brandCode = response.data[0].ItemNo.toString().substr(1, 2);\n\n            axiosClient\n              .get(\"/fetchBrands\", {\n                params: {\n                  companyType: this.newTransaction.company,\n                  brandCode: brandCode,\n                },\n              })\n              .then((response) => {\n                //console.log(\"Success\", response.data);\n                this.newBrand = response.data[0].brandNames;\n              })\n              .catch((error) => {\n                console.error(error);\n              });\n          })\n          .catch((error) => {\n            this.missItemCode = 0;\n            !this.newItemInput ? true : (this.isRightCode = true);\n            //console.log(\"Not Equal\");\n            //console.error(error);\n          });\n      }, 300);\n      var newResponseData;\n\n      setTimeout(() => {\n        if (checkItemData) {\n          // console.log(\"Check the value of checkItemData\", checkItemData);\n          // console.log(\"Barcode Selected\", this.barcode);\n          let confirmSave = false;\n          this.isNewItem = !this.newItemInput ? true : false;\n\n          if (this.isNewItem) {\n            this.isRightCode = false;\n            return 0;\n          }\n          // console.log(\"Item Code from the input\", this.newItemCode);\n          axiosClient\n            .get(\"/fetchSameItem\", {\n              params: {\n                company: this.newTransaction.company,\n                ItemCode: this.newItemCode,\n                ItemDescription: this.newItemDescription,\n                StyleCode: this.newStyleCode,\n              },\n            })\n            .then((response) => {\n              // console.log(\"Same Item:\", response.data);\n              newResponseData = response.data;\n            })\n            .catch((error) => {\n              //console.error(error);\n            });\n          // console.log(\"Confirm Save: \", confirmSave);\n          // console.log(\"Items: \", this.newTransaction.items);\n          // console.log(this.newListBoxLabel);\n        }\n      }, 500);\n\n      setTimeout(() => {\n        if (checkItemData) {\n          for (var x = 0; x < newResponseData.length; x++) {\n            var flag = true;\n            for (var i = 0; i < this.newTransaction.items.length; i++) {\n              if (\n                this.newTransaction.items[i].code == newResponseData[x].ItemNo &&\n                this.newTransaction.items[i].boxNumber == boxNUMBER\n              ) {\n                // console.log(\"Old Item Code\", this.newTransaction.items[i].code);\n                // console.log(\"New Item Code\", newResponseData[x].ItemNo);\n                // console.log(\"Old Box Number\", this.newTransaction.items[i].boxNumber);\n                // console.log(\"New Box Number\", boxNUMBER);\n                // console.log(\"Same Item Code\");\n                this.newTransaction.items[i].quantity =\n                  parseInt(this.newTransaction.items[x].quantity) + 1;\n                flag = false;\n                break;\n              }\n            }\n            if (flag) {\n              // console.log(\"Company:\", this.newTransaction.company);\n              if (\n                this.newTransaction.company == \"NBFI\" ||\n                this.newTransaction.company == \"CMC\" ||\n                this.newTransaction.company == \"ASC\"\n              ) {\n                var categorybrand = this.newBrand;\n              } else {\n                var categorybrand = newResponseData[x].Category;\n              }\n              let tempItem = {\n                code: newResponseData[x].ItemNo,\n                description: newResponseData[x].ItemDescription,\n                categorybrand: categorybrand,\n                quantity: 0,\n                size: newResponseData[x].Size,\n                color: newResponseData[x].Color,\n                // boxLabel: label,\n                boxNumber: boxNUMBER,\n                category: newResponseData[x].Category,\n              };\n              this.newTransaction.items.push(tempItem);\n            }\n            this.isRightCode = false;\n            this.isItem = false;\n            this.isAddItem = true;\n            this.newItemInput = \"\";\n            this.showItemInput = \"\";\n            this.notifyVue(\"AddItem\", \"bottom\", \"right\");\n          }\n        }\n      }, 1000);\n    },\n    cancelItem() {\n      this.isRightCode = false;\n      this.isNewItem = false;\n      this.isItem = false;\n      this.isAddItem = true;\n      this.showItemInput = \"\";\n      this.newItemInput = \"\";\n    },\n    addBoxLabel() {\n      this.isBoxLabel = true;\n      this.isEditBLDisabled = true;\n    },\n    saveBoxLabel() {\n      this.isNewBoxLabel = !this.newBoxLabel ? true : false;\n\n      if (this.isNewBoxLabel) {\n        return 0;\n      }\n      this.isBoxLabel = false;\n      //console.log(this.newTransaction.boxLabels.length);\n      let tempBoxLabel = [];\n\n      if (this.newTransaction.boxLabels.length == 0) {\n        tempBoxLabel = {\n          id: this.newTransaction.boxLabels.length + 1,\n          boxNumber: this.newTransaction.boxLabels.length + 1,\n          boxLabel: this.newBoxLabel,\n        };\n      } else {\n        tempBoxLabel = {\n          id:\n            parseInt(\n              this.newTransaction.boxLabels[this.newTransaction.boxLabels.length - 1].id\n            ) + 1,\n          boxNumber: this.newTransaction.boxLabels.length + 1,\n          boxLabel: this.newBoxLabel,\n        };\n      }\n\n      let tempItem = [];\n\n      if (this.newTransaction.boxLabels.length == 0) {\n        tempItem = {\n          id: this.newTransaction.boxLabels.length + 1,\n        };\n      } else {\n        console.log(\n          \"Before Add Box\",\n          this.newTransaction.boxLabels[this.newTransaction.boxLabels.length - 1].id\n        );\n        tempItem = {\n          id:\n            parseInt(\n              this.newTransaction.boxLabels[this.newTransaction.boxLabels.length - 1].id\n            ) + 1,\n        };\n        console.log(\"After Add Box\", tempItem);\n      }\n\n      this.newTransaction.boxLabels.push(tempBoxLabel);\n      this.newItemInputBox.push(tempItem);\n      this.newBoxLabel = \"\";\n      // this.notifyVue(\"AddBoxLabel\", \"bottom\", \"right\");\n      console.log(\"New Add Box:\", this.newItemInputBox);\n      //Disable the above select buttons\n      this.isCompany = true;\n      this.isChainCode = true;\n      this.isBranchName = true;\n      this.isTransactionType = true;\n      this.notifyVue(\"AddBoxLabel\", \"bottom\", \"right\");\n      this.isEditBLDisabled = false;\n    },\n    cancelBoxLabel() {\n      this.isNewBoxLabel = false;\n      this.isBoxLabel = false;\n      this.newBoxLabel = \"\";\n      if (this.newTransaction.boxLabels.length == 0) this.isEditBLDisabled = true;\n      else this.isEditBLDisabled = false;\n    },\n    submit(confirmation) {\n      if (confirmation) {\n        try {\n          const uri = window.location.href;\n          var transactionID = uri.split(\"?\")[1];\n          var id = transactionID.split(\"=\")[1].split(\"&\")[0];\n\n          this.isValid.company = !this.newTransaction.company ? true : false;\n          this.isValid.chainCode = !this.newTransaction.chainCode ? true : false;\n          this.isValid.branchName = !this.newTransaction.branchName ? true : false;\n          this.isValid.transactionType = !this.newTransaction.transactionType\n            ? true\n            : false;\n          this.isValid.boxLabel = !this.newTransaction.boxLabels.length ? true : false;\n          this.isValid.item = !this.newTransaction.items.length ? true : false;\n\n          //console.log(\"Company: \", this.isValid.company);\n\n          // console.log(\"company\", this.newTransaction.items);\n          // alert(\"Your data: \" + JSON.stringify(this.newTransaction));\n\n          if (\n            sessionStorage.getItem(\"Position\") == \"Agent\" ||\n            sessionStorage.getItem(\"Position\") == \"Admin\"\n          ) {\n            var status = \"endorsement\";\n          } else if (\n            sessionStorage.getItem(\"Position\") == \"Admin\" ||\n            sessionStorage.getItem(\"Position\") == \"Approver\"\n          ) {\n            var status = \"approved\";\n          } else {\n            var status = \"unprocessed\";\n          }\n          axiosClient\n            .post(\"/updatePullOutBranchRequest\", {\n              id: id,\n              chainCode: this.newTransaction.chainCode,\n              companyType: this.newTransaction.company,\n              branchName: this.newTransaction.branchName,\n              transactionType: this.newTransaction.transactionType,\n              email: sessionStorage.getItem(\"Email\"),\n              status: status,\n            })\n            .then((response) => {\n              //console.log(\"Success Branch Save: \", response.data);\n              this.transferTransactionID = id;\n\n              for (var x = 0; x < this.newTransaction.items.length; x++) {\n                let labelBox = \"\";\n                for (let box of this.newTransaction.boxLabels) {\n                  if (box.id == this.newTransaction.items[x].boxNumber) {\n                    labelBox = box.boxLabel;\n                  }\n                }\n\n                axiosClient\n                  .post(\"/updatePullOutItemRequest\", {\n                    id: this.newTransaction.items[x].id,\n                    plID: id,\n                    companyType: this.newTransaction.company,\n                    brand: this.newTransaction.items[x].categorybrand,\n                    boxNumber: this.newTransaction.items[x].boxNumber,\n                    boxLabel: labelBox,\n                    itemCode: this.newTransaction.items[x].code,\n                    quantity: this.newTransaction.items[x].quantity,\n                    email: sessionStorage.getItem(\"Email\"),\n                    status: status,\n                  })\n                  .then((response) => {\n                    // console.log(\"Success Items Save: \", response.data);\n                    // window.location.href =\n                    //   \"http://192.168.0.7:4040/#/pull-out/requisition-form\";\n                  })\n                  .catch((error) => {\n                    console.error(error);\n                  });\n              }\n              const transactionModal = new bootstrap.Modal(\"#transactionReceipt\");\n              transactionModal.show();\n              this.saving_counter = this.files.length * 2;\n            })\n            .catch((error) => {\n              //console.error(error);\n            });\n          setTimeout(this.handleFileUploadImage, 2000);\n        } catch {\n          this.isValid.company = !this.newTransaction.company ? true : false;\n          this.isValid.chainCode = !this.newTransaction.chainCode ? true : false;\n          this.isValid.branchName = !this.newTransaction.branchName ? true : false;\n          this.isValid.transactionType = !this.newTransaction.transactionType\n            ? true\n            : false;\n          this.isValid.boxLabel = !this.newTransaction.boxLabels.length ? true : false;\n          this.isValid.item = !this.newTransaction.items.length ? true : false;\n\n          //console.log(\"Company: \", this.isValid.company);\n\n          //console.log(\"company\", this.newTransaction.company);\n          // alert(\"Your data: \" + JSON.stringify(this.newTransaction));\n          axiosClient\n            .post(\"/savePullOutBranchRequest\", {\n              chainCode: this.newTransaction.chainCode,\n              companyType: this.newTransaction.company,\n              branchName: this.newTransaction.branchName,\n              transactionType: this.newTransaction.transactionType,\n              email: sessionStorage.getItem(\"Email\"),\n              status: \"unprocessed\",\n            })\n            .then((response) => {\n              //console.log(\"Success Branch Save: \", response.data);\n              this.transferTransactionID = response.data.id;\n\n              for (var x = 0; x < this.newTransaction.items.length; x++) {\n                let labelBox = \"\";\n                for (let box of this.newTransaction.boxLabels) {\n                  if (box.id == this.newTransaction.items[x].boxNumber) {\n                    labelBox = box.boxLabel;\n                  }\n                }\n                axiosClient\n                  .post(\"/savePullOutItemRequest\", {\n                    plID: response.data.id,\n                    companyType: this.newTransaction.company,\n                    brand: this.newTransaction.items[x].categorybrand,\n                    boxNumber: this.newTransaction.items[x].boxNumber,\n                    boxLabel: labelBox,\n                    itemCode: this.newTransaction.items[x].code,\n                    quantity: this.newTransaction.items[x].quantity,\n                    email: sessionStorage.getItem(\"Email\"),\n                    status: \"unprocessed\",\n                  })\n                  .then((response) => {\n                    //console.log(\"Success Items Save: \", response.data);\n                  })\n                  .catch((error) => {\n                    //console.error(error);\n                  });\n              }\n              const transactionModal = new bootstrap.Modal(\"#transactionReceipt\");\n              transactionModal.show();\n              this.saving_counter = this.files.length * 2;\n            })\n            .catch((error) => {\n              //console.error(error);\n            });\n        }\n        setTimeout(this.handleFileUploadImage, 2000);\n      }\n    },\n    draft(confirmation) {\n      if (confirmation) {\n        try {\n          const uri = window.location.href;\n          var transactionID = uri.split(\"?\")[1];\n          var id = transactionID.split(\"=\")[1].split(\"&\")[0];\n\n          axiosClient\n            .post(\"/updatePullOutBranchRequest\", {\n              id: id,\n              chainCode: this.newTransaction.chainCode,\n              companyType: this.newTransaction.company,\n              branchName: this.newTransaction.branchName,\n              transactionType: this.newTransaction.transactionType,\n              status: \"draft\",\n              email: sessionStorage.getItem(\"Email\"),\n            })\n            .then((response) => {\n              // console.log(\"Success Branch Save: \", response.data);\n              //console.log(\"Items Length:\", this.newTransaction.items.length);\n              for (var x = 0; x < this.newTransaction.items.length; x++) {\n                let labelBox = \"\";\n                for (let box of this.newTransaction.boxLabels) {\n                  if (box.id == this.newTransaction.items[x].boxNumber) {\n                    labelBox = box.boxLabel;\n                  }\n                }\n                console.log(\"Items\", this.newTransaction.items);\n                axiosClient\n                  .post(\"/updatePullOutItemRequest\", {\n                    plID: id,\n                    companyType: this.newTransaction.company,\n                    brand: this.newTransaction.items[x].categorybrand,\n                    boxNumber: this.newTransaction.items[x].boxNumber,\n                    boxLabel: labelBox,\n                    itemCode: this.newTransaction.items[x].code,\n                    quantity: this.newTransaction.items[x].quantity,\n                    status: \"draft\",\n                    email: sessionStorage.getItem(\"Email\"),\n                  })\n                  .then((response) => {\n                    console.log(\"Success Items Save: \", response.data);\n                  })\n                  .catch((error) => {\n                    console.error(error);\n                  });\n              }\n              const draftModal = new bootstrap.Modal(\"#draftModal\");\n              draftModal.show();\n            })\n            .catch((error) => {\n              //console.error(error);\n            });\n        } catch {\n          axiosClient\n            .post(\"/savePullOutBranchRequest\", {\n              chainCode: this.newTransaction.chainCode,\n              companyType: this.newTransaction.company,\n              branchName: this.newTransaction.branchName,\n              transactionType: this.newTransaction.transactionType,\n              status: \"draft\",\n              email: sessionStorage.getItem(\"Email\"),\n            })\n            .then((response) => {\n              //console.log(\"Success Branch Save: \", response.data);\n\n              for (var x = 0; x < this.newTransaction.items.length; x++) {\n                let labelBox = \"\";\n                for (let box of this.newTransaction.boxLabels) {\n                  if (box.id == this.newTransaction.items[x].boxNumber) {\n                    labelBox = box.boxLabel;\n                  }\n                }\n                axiosClient\n                  .post(\"/savePullOutItemRequest\", {\n                    plID: response.data.id,\n                    companyType: this.newTransaction.company,\n                    brand: this.newTransaction.items[x].categorybrand,\n                    boxNumber: this.newTransaction.items[x].boxNumber,\n                    boxLabel: labelBox,\n                    itemCode: this.newTransaction.items[x].code,\n                    quantity: this.newTransaction.items[x].quantity,\n                    status: \"draft\",\n                    email: sessionStorage.getItem(\"Email\"),\n                  })\n                  .then((response) => {\n                    //console.log(\"Success Items Save: \", response.data);\n                  })\n                  .catch((error) => {\n                    //console.error(error);\n                  });\n              }\n              const draftModal = new bootstrap.Modal(\"#draftModal\");\n              draftModal.show();\n            })\n            .catch((error) => {\n              //console.error(error);\n            });\n        }\n      }\n    },\n    editBoxLabel(code, quantity, boxNumber) {\n      // console.log(\"Items\", code, quantity, boxNumber);\n      this.validateSubmit();\n      //console.log(\n      //   \"Item Code Edit:\",\n      //   code,\n      //   \" Quantity:\",\n      //   quantity,\n      //   \" Box Number\",\n      //   boxNumber\n      // );\n      //console.log(\" == : \", this.newTransaction.items);\n      var filteredItems = this.newTransaction.items.filter(\n        (item) => item.code === code && item.boxNumber === boxNumber\n      );\n\n      //console.log(\"Filtered Items: \", filteredItems);\n      var uniqueItems = [];\n      filteredItems.forEach((item) => {\n        var existingItem = uniqueItems.find(\n          (uniqueItem) => uniqueItem.code === item.code\n        );\n        if (existingItem) {\n          existingItem.quantity += item.quantity;\n        } else {\n          uniqueItems.push({ ...item });\n        }\n      });\n      // The uniqueItems array will contain unique items based on itemCode, with quantities added up.\n      //console.log(\"Unique Items: 1\", uniqueItems);\n      //console.log(\"Unique Items: Code\", uniqueItems[0].code);\n      //console.log(\"Unique Items: Box Number\", uniqueItems[0].boxNumber);\n\n      this.newTransaction.items = this.newTransaction.items.filter(\n        (item) =>\n          item.code !== uniqueItems[0].code || item.boxNumber !== uniqueItems[0].boxNumber\n      );\n      this.newTransaction.items.push(uniqueItems[0]);\n      this.notifyVue(\"ChangeBoxLabel\", \"bottom\", \"right\");\n    },\n  },\n};\n</script>\n<style>\n.el-select {\n  width: 100%;\n  background-color: white;\n  border: 20px;\n  border-color: blueviolet;\n}\n\n.btn-transparent {\n  background-color: transparent;\n  border: none;\n  color: #000000;\n}\n\n.btn-transparent:hover {\n  background-color: rgba(0, 0, 0, 0.1);\n  color: #ffffff;\n}\n\n.table-font-size {\n  font-size: 14px;\n}\n\n.table-input-box {\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n  padding: 14px;\n  border: 1px solid transparent;\n  transition: border-color 0.3s ease-in-out;\n  background-color: transparent;\n}\n\n.table-select-box {\n  /* border: 5px solid green !important; */\n  transition: border-color 0.3s ease-in-out;\n  /* background-color: yellow; */\n  border-radius: 0px !important;\n  background-color: transparent !important;\n}\n\n.table-select-box.el-select .el-input input {\n  border-radius: 0px !important;\n  border: 5px solid transparent !important;\n  background-color: transparent;\n}\n\ntd {\n  display: table-cell !important;\n  padding: 0px !important;\n  /* background-color: #111111 !important; */\n}\ntable {\n  border-collapse: collapse !important;\n}\n.bold-button {\n  font-weight: bold !important;\n}\n/* .tblItemsCell {\n  padding-top: 10px;\n  padding: 10px;\n  color: red;\n} */\n\n.input-datalist {\n  display: block !important;\n  width: 100% !important;\n  margin-bottom: 10px !important;\n  position: relative !important;\n  appearance: none !important;\n  font-weight: 400 !important;\n  background-clip: padding-box !important;\n  border: 1px solid #66615b !important;\n  border-radius: 5px !important;\n  padding: 9px !important;\n  outline: none;\n  /* border: 1pc solid gray; */\n}\n\n.gendelete-buttons {\n  background-color: transparent;\n  color: red;\n  border: none;\n  cursor: pointer;\n}\n\n.label-font {\n  color: red !important;\n}\n\n/* .table-delete:hover {\n  color: red !important;\n  cursor: pointer;\n} */\n\n.card-attachment {\n  background-color: #66615b;\n}\n\n.card-generator {\n  margin-top: 100px;\n}\n\n.box-with-shadow {\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.06);\n  padding: 10px;\n}\n\n.pic-button {\n  padding-top: 5px;\n  padding-bottom: 5px;\n  font-size: 10px !important;\n}\n\n.w-full {\n  width: 100% !important;\n}\n.h-div-32 {\n  height: 32.2px !important;\n}\n.importBtn {\n  width: 100% !important;\n  height: 100% !important;\n  padding: 0.8vh !important;\n}\n\n.image-container {\n  position: relative;\n  width: fit-content;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.06);\n  border-radius: 6px;\n  padding: 5px;\n  overflow: hidden;\n}\n.image-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  opacity: 0;\n  transition: background 0.5s ease;\n  transition: opacity 0.5s ease;\n  border-radius: 6px;\n}\n.image-overlay:hover {\n  backdrop-filter: blur(1px);\n  background: rgba(0, 0, 0, 0.2);\n  opacity: 1;\n}\n.image-overlay-button {\n  width: 25% !important;\n  height: 25% !important;\n  /* height: 25% !important; */\n}\n.imageUpload {\n  /* position: absolute; */\n  display: block;\n  width: 10vw;\n}\n\n.imageClose {\n  display: block;\n  height: 23px;\n  font-size: 20px;\n  position: absolute;\n  top: -7px;\n  right: 1px;\n  color: red !important;\n  padding: 1.5px;\n  overflow: hidden;\n  text-decoration: none;\n  border-bottom-left-radius: 2.5px;\n  background-color: white;\n}\n\n.span-upload-image {\n  border: solid;\n  border-left: none;\n  border-width: 1px;\n  border-radius: 4px;\n  border-top-left-radius: 0px;\n  border-bottom-left-radius: 0px;\n  padding: 8px 9px;\n  width: fit-content;\n  white-space: nowrap;\n  display: inline-block;\n}\n\n@media (max-width: 767px) {\n  .span-upload-image {\n    text-align: center;\n    border: solid;\n    border-width: 1px;\n    border-radius: 4px;\n    padding: 8px 9px;\n    width: 100%;\n    white-space: nowrap;\n    text-overflow: clip;\n    overflow: hidden;\n    margin-top: 2px;\n    display: inline-block;\n  }\n}\n@media (max-width: 575px) {\n  .imageUpload {\n    width: 40vw;\n  }\n}\n@media (min-width: 576px) {\n  .imageUpload {\n    width: 30vw;\n  }\n}\n@media (min-width: 768px) {\n  .imageUpload {\n    width: 20vw;\n  }\n}\n@media (min-width: 1283px) {\n  .imageUpload {\n    width: 15vw;\n  }\n}\n@media (min-width: 1400px) {\n  .imageUpload {\n    width: 10vw;\n  }\n}\n</style>\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA6tBA,SACAA,QAAA,EACAC,YAAA,EACAC,IAAA,EACAC,OAAA,EACAC,IAAA,EACAC,MAAA,QACA;AAEA,OAAAC,SAAA;AACA,OAAAC,OAAA;AACA,OAAAC,GAAA;AACA,OAAAC,oBAAA;AACA,OAAAC,gBAAA;AACA,OAAAC,YAAA;AACA,OAAAC,mBAAA;AACA,OAAAC,eAAA;AACA,OAAAC,cAAA;AACA,OAAAC,uBAAA;AACA,OAAAC,iBAAA;AACA,OAAAC,mBAAA;AACA,OAAAC,sBAAA;AACA,OAAAC,IAAA;AAEA,OAAAC,WAAA;AACA,OAAAC,iBAAA;AACA,OAAAC,uBAAA;AACA,OAAAC,iCAAA;AACA,OAAAC,UAAA;AACA,OAAAC,QAAA;AACA,OAAAC,8BAAA;AACA,OAAAC,6BAAA;AAEA,YAAAC,IAAA;AAGApB,GAAA,CAAAqB,GAAA,CAAAC,MAAA;AACAtB,GAAA,CAAAqB,GAAA,CAAAE,YAAA;AAEA;EACAC,UAAA;IACA,CAAAC,WAAA,CAAAC,IAAA,GAAAD,WAAA;IACA,CAAAE,WAAA,CAAAD,IAAA,GAAAC,WAAA;IACA,CAAAC,OAAA,CAAAF,IAAA,GAAAE,OAAA;IACA,CAAAC,IAAA,CAAAH,IAAA,GAAAG,IAAA;IACA,CAAAC,MAAA,CAAAJ,IAAA,GAAAI,MAAA;IACA,CAAAjC,MAAA,CAAA6B,IAAA,GAAA7B,MAAA;IACA,CAAAkC,OAAA,CAAAL,IAAA,GAAAK,OAAA;IACA,CAAAC,OAAA,CAAAN,IAAA,GAAAM,OAAA;IACAjC,OAAA;IACAD,SAAA;IACAH,OAAA;IACAD,IAAA;IACAD,YAAA;IACAD,QAAA;IACAI,IAAA;IACAK,oBAAA;IACAC,gBAAA;IACAC,YAAA;IACAC,mBAAA;IACAC,eAAA;IACAC,cAAA;IACAC,uBAAA;IACAC,iBAAA;IACAC,mBAAA;IACAC,sBAAA;IACAG,iBAAA;IACAC,uBAAA;IACAC,iCAAA;IACAC,UAAA;IACAE,8BAAA;IACAC,6BAAA;IACAJ;EACA;EACAkB,KAAA;IACA;MACAC,iBAAA;MACAC,eAAA;MACAC,eAAA;MACAC,SAAA;MACAC,WAAA;MACAC,YAAA;MACAC,iBAAA;MACAC,YAAA;MACAC,YAAA;MACAC,gBAAA;MACAC,UAAA;MACAC,MAAA;MACAC,SAAA;MACAC,gBAAA;MACAC,aAAA;MACAC,WAAA;MACAC,aAAA;MACAC,cAAA;MACAC,cAAA;QAEAC,OAAA;QACAC,SAAA;QACAC,UAAA;QACAC,eAAA;QACAC,SAAA;QACAC,KAAA;MACA;MACAC,eAAA;MACAC,OAAA;QACAP,OAAA;QACAC,SAAA;QACAC,UAAA;QACAC,eAAA;QACAK,QAAA;QACAC,IAAA;MACA;MACAC,UAAA;MACAC,QAAA;MACAC,QAAA;MACAC,UAAA;MACAC,mBAAA;MACAC,mBAAA;MAEAC,mBAAA,GACA;QACAC,KAAA;QACAC,KAAA;QACAlB,OAAA;MACA,GACA;QACAiB,KAAA;QACAC,KAAA;QACAlB,OAAA;MACA,GACA;QACAiB,KAAA;QACAC,KAAA;QACAlB,OAAA;MACA,GACA;QACAiB,KAAA;QACAC,KAAA;QACAlB,OAAA;MACA,GACA;QACAiB,KAAA;QACAC,KAAA;QACAlB,OAAA;MACA,GACA;QACAiB,KAAA;QACAC,KAAA;QACAlB,OAAA;MACA,EAEA;MACAmB,WAAA;MACAC,YAAA;MACAC,QAAA;MACAC,kBAAA;MACAC,YAAA;MACAC,WAAA;MACAC,aAAA;QACAC,SAAA;MACA;MACAC,MAAA;QACAC,OAAA;QACAC,MAAA;QACAC,IAAA;MACA;MACAC,aAAA;MACAC,SAAA;MACAC,WAAA;MACAC,qBAAA;MACAC,YAAA;MACAC,eAAA;MACAC,QAAA;MACAC,SAAA;MACAC,MAAA;MACAC,OAAA;MACAC,WAAA,GACA,oCACA,6CACA,8DACA,iCACA,0CACA,2DACA,gDACA,yDACA,yEACA;MACAC,MAAA;MACAC,KAAA;MACAC,WAAA;MACAC,WAAA;QACAC,SAAA;QACA5B,KAAA;MACA;MACA6B,OAAA;MACAC,OAAA;MACAC,cAAA;MACAC,QAAA;MACAC,eAAA;QACAC,KAAA;MACA;MACAC,SAAA;QACAD,KAAA;QACAE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"},"metadata":{},"sourceType":"module","externalDependencies":[]}