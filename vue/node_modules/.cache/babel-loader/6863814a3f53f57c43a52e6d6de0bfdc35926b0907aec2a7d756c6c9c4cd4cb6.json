{"ast":null,"code":"import _createForOfIteratorHelper from \"/var/www/html/PRESTOv1/vue/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _Option2 from \"element-ui/lib/theme-chalk/option.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Option from \"element-ui/lib/option\";\nimport _Select2 from \"element-ui/lib/theme-chalk/select.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Select from \"element-ui/lib/select\";\nimport _TableColumn2 from \"element-ui/lib/theme-chalk/table-column.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _TableColumn from \"element-ui/lib/table-column\";\nimport _Table2 from \"element-ui/lib/theme-chalk/table.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Table from \"element-ui/lib/table\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport Vue from \"vue\";\nimport axiosClient from \"../../../../../../axios\";\nimport NotificationTemplate from \"../../../Components/Notification/NotificationSuccessfulRename.vue\";\nVue.use(_Table);\nVue.use(_TableColumn);\nVue.use(_Select);\nVue.use(_Option);\nexport default {\n  components: {\n    NotificationTemplate: NotificationTemplate\n  },\n  props: [\"transferredData\"],\n  watch: {\n    transferredData: function transferredData(newValue) {\n      if (newValue === \"\") {\n        console.log(\"Mabuhayaaaaaaaaaaaaaaaaa\");\n        this.$emit(\"closeModal\");\n      }\n    }\n  },\n  computed: {},\n  data: function data() {\n    return {\n      tableColumns: [{\n        prop: \"id\",\n        label: \"Box Number\",\n        minWidth: 200\n      }, {\n        prop: \"boxLabel\",\n        label: \"Box Label\",\n        minWidth: 250\n      }]\n    };\n  },\n  methods: {\n    removeBoxLabel: function removeBoxLabel(deleteboxLabel) {\n      var localData = this.transferredData.boxLabels.findIndex(function (tablerow) {\n        return tablerow.id === deleteboxLabel.id;\n      });\n      console.log(\"dasd\", localData);\n      console.log(\"before\", this.transferredData.boxLabels[localData]);\n      if (localData >= 0) {\n        this.transferredData.boxLabels.splice(localData, 1);\n      }\n      var _iterator = _createForOfIteratorHelper(this.transferredData.boxLabels),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var obj = _step.value;\n          var id = obj.id;\n          if (!groups[id]) {\n            groups[id] = [];\n          }\n          groups[id].push(obj);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    },\n    handleBoxLabel: function handleBoxLabel(boxLabel) {\n      if (!boxLabel) console.log(\"Empty boxlabel\");else this.notifyVue(\"bottom\", \"right\");\n    },\n    notifyVue: function notifyVue(verticalAlign, horizontalAlign) {\n      var color = Math.floor(Math.random() * 4 + 1);\n      this.$notify({\n        component: NotificationTemplate,\n        horizontalAlign: horizontalAlign,\n        verticalAlign: verticalAlign,\n        type: \"success\",\n        props: {\n          customValue: \"Success Add Box\"\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["Vue","axiosClient","NotificationTemplate","use","_Table","_TableColumn","_Select","_Option","components","props","watch","transferredData","newValue","console","log","$emit","computed","data","tableColumns","prop","label","minWidth","methods","removeBoxLabel","deleteboxLabel","localData","boxLabels","findIndex","tablerow","id","splice","_iterator","_createForOfIteratorHelper","_step","s","n","done","obj","value","groups","push","err","e","f","handleBoxLabel","boxLabel","notifyVue","verticalAlign","horizontalAlign","color","Math","floor","random","$notify","component","type","customValue"],"sources":["src/components/Dashboard/Views/PullOut/PullOutRequests/ModalPullOut/EditBoxLabelModal.vue"],"sourcesContent":["<template>\n  <div\n    class=\"modal fade\"\n    id=\"exampleModal\"\n    tabindex=\"-1\"\n    aria-labelledby=\"exampleModalLabel\"\n    aria-hidden=\"true\"\n  >\n    <div class=\"modal-dialog modal-dialog-centered modal-xl\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <h1 class=\"modal-title fs-5 text-weight-bold\" id=\"exampleModalLabel\">\n            List of Branch {{ transferredData }}\n          </h1>\n        </div>\n        <div class=\"modal-body\">\n          <div class=\"row\">\n            <table\n              class=\"table table-bordered table-hover table-responsive-sm table-font-size font-weight-normal\"\n            >\n              <thead>\n                <tr>\n                  <th scope=\"col\" class=\"nowrap\">Item Code</th>\n                  <th scope=\"col\" class=\"nowrap\">Description</th>\n                  <!-- <th scope=\"col\" class=\"nowrap\">Category/Brand</th>\n                  <th scope=\"col\" class=\"nowrap\">Quantity</th>\n                  <th scope=\"col\" class=\"nowrap\">Box Label</th> -->\n                </tr>\n              </thead>\n              <tbody>\n                <tr v-for=\"boxLabel in transferredData.boxLabels\" :key=\"boxLabel.id\">\n                  <th scope=\"row\" class=\"px-3\">\n                    <button\n                      class=\"table-delete pull-left\"\n                      @click.prevent=\"removeBoxLabel(boxLabel)\"\n                    >\n                      <i class=\"nc-icon nc-simple-remove font-weight-bold\"></i>\n                    </button>\n                    {{ boxLabel.id }}\n                  </th>\n                  <!-- <td class=\"cell px-3\">{{ item.description }}</td> -->\n                  <!-- <td class=\"cell px-3\">{{ item.categorybrand }}</td> -->\n                  <td class=\"cell\">\n                    <input\n                      type=\"text\"\n                      @blur=\"handleBoxLabel(boxLabel.boxLabel)\"\n                      v-model=\"boxLabel.boxLabel\"\n                      class=\"table-input-box\"\n                    />\n                  </td>\n                  <!-- <td class=\"cell\">\n                    <el-select\n                      class=\"table-select-box\"\n                      size=\"large\"\n                      v-model=\"item.boxLabel\"\n                      @change=\"editBoxLabel(item.code, item.quantity, item.boxLabel)\"\n                    >\n                      <el-option\n                        v-for=\"boxLabel in newTransaction.boxLabels\"\n                        class=\"table-select-box\"\n                        :value=\"boxLabel.boxLabel\"\n                        :label=\"boxLabel.boxLabel\"\n                        :key=\"boxLabel.id\"\n                      >\n                      </el-option>\n                    </el-select>\n                  </td> -->\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n        <div class=\"modal-footer\">\n          <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">\n            Close\n          </button>\n          <button type=\"button\" class=\"btn btn-primary\">Save changes</button>\n        </div>\n      </div>\n    </div>\n  </div>\n  <!-- </div> -->\n</template>\n<script>\nimport Vue from \"vue\";\nimport { Table, TableColumn, Select, Option } from \"element-ui\";\nimport axiosClient from \"../../../../../../axios\";\nimport NotificationTemplate from \"../../../Components/Notification/NotificationSuccessfulRename.vue\";\n\nVue.use(Table);\nVue.use(TableColumn);\nVue.use(Select);\nVue.use(Option);\nexport default {\n  components: {\n    NotificationTemplate,\n  },\n  props: [\"transferredData\"],\n  // mounted() {\n  //   $(\"#myModal\").modal(\"show\");\n  // },\n  // destroyed() {\n  //   $(\"#myModal\").modal(\"hide\");\n  // },\n  watch: {\n    transferredData(newValue) {\n      if (newValue === \"\") {\n        console.log(\"Mabuhayaaaaaaaaaaaaaaaaa\");\n        this.$emit(\"closeModal\");\n      }\n    },\n  },\n  computed: {\n    /***\n     * Searches through table data and returns a paginated array.\n     * Note that this should not be used for table with a lot of data as it might be slow!\n     * Do the search and the pagination on the server and display the data retrieved from server instead.\n     * @returns {computed.pagedData}\n     */\n  },\n  data() {\n    return {\n      tableColumns: [\n        {\n          prop: \"id\",\n          label: \"Box Number\",\n          minWidth: 200,\n        },\n        {\n          prop: \"boxLabel\",\n          label: \"Box Label\",\n          minWidth: 250,\n        },\n      ],\n    };\n  },\n  methods: {\n    removeBoxLabel(deleteboxLabel) {\n      let localData = this.transferredData.boxLabels.findIndex(\n        (tablerow) => tablerow.id === deleteboxLabel.id\n      );\n\n      console.log(\"dasd\", localData);\n      console.log(\"before\", this.transferredData.boxLabels[localData]);\n\n      if (localData >= 0) {\n        this.transferredData.boxLabels.splice(localData, 1);\n      }\n\n      for (const obj of this.transferredData.boxLabels) {\n        // Retrieve the ID from the current object\n        const id = obj.id;\n\n        // Check if a group exists for the current ID\n        if (!groups[id]) {\n          // Create a new group for the ID\n          groups[id] = [];\n        }\n\n        // Add the object to the corresponding group\n        groups[id].push(obj);\n      }\n      // console.log(\"after\", this.transferredData);\n      // this.$emit(\"closeModal\", this.transferredData);\n    },\n    handleBoxLabel(boxLabel) {\n      if (!boxLabel) console.log(\"Empty boxlabel\");\n      else this.notifyVue(\"bottom\", \"right\");\n    },\n    notifyVue(verticalAlign, horizontalAlign) {\n      const color = Math.floor(Math.random() * 4 + 1);\n      this.$notify({\n        component: NotificationTemplate,\n        // icon: 'nc-icon nc-app',\n        horizontalAlign: horizontalAlign,\n        verticalAlign: verticalAlign,\n        type: \"success\",\n        props: {\n          customValue: \"Success Add Box\",\n        },\n      });\n    },\n  },\n};\n</script>\n"],"mappings":";;;;;;;;;;;;;;;AAoFA,OAAAA,GAAA;AAEA,OAAAC,WAAA;AACA,OAAAC,oBAAA;AAEAF,GAAA,CAAAG,GAAA,CAAAC,MAAA;AACAJ,GAAA,CAAAG,GAAA,CAAAE,YAAA;AACAL,GAAA,CAAAG,GAAA,CAAAG,OAAA;AACAN,GAAA,CAAAG,GAAA,CAAAI,OAAA;AACA;EACAC,UAAA;IACAN,oBAAA,EAAAA;EACA;EACAO,KAAA;EAOAC,KAAA;IACAC,eAAA,WAAAA,gBAAAC,QAAA;MACA,IAAAA,QAAA;QACAC,OAAA,CAAAC,GAAA;QACA,KAAAC,KAAA;MACA;IACA;EACA;EACAC,QAAA,GAOA;EACAC,IAAA,WAAAA,KAAA;IACA;MACAC,YAAA,GACA;QACAC,IAAA;QACAC,KAAA;QACAC,QAAA;MACA,GACA;QACAF,IAAA;QACAC,KAAA;QACAC,QAAA;MACA;IAEA;EACA;EACAC,OAAA;IACAC,cAAA,WAAAA,eAAAC,cAAA;MACA,IAAAC,SAAA,QAAAd,eAAA,CAAAe,SAAA,CAAAC,SAAA,CACA,UAAAC,QAAA;QAAA,OAAAA,QAAA,CAAAC,EAAA,KAAAL,cAAA,CAAAK,EAAA;MAAA,CACA;MAEAhB,OAAA,CAAAC,GAAA,SAAAW,SAAA;MACAZ,OAAA,CAAAC,GAAA,gBAAAH,eAAA,CAAAe,SAAA,CAAAD,SAAA;MAEA,IAAAA,SAAA;QACA,KAAAd,eAAA,CAAAe,SAAA,CAAAI,MAAA,CAAAL,SAAA;MACA;MAAA,IAAAM,SAAA,GAAAC,0BAAA,CAEA,KAAArB,eAAA,CAAAe,SAAA;QAAAO,KAAA;MAAA;QAAA,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA;UAAA,IAAAC,GAAA,GAAAJ,KAAA,CAAAK,KAAA;UAEA,IAAAT,EAAA,GAAAQ,GAAA,CAAAR,EAAA;UAGA,KAAAU,MAAA,CAAAV,EAAA;YAEAU,MAAA,CAAAV,EAAA;UACA;UAGAU,MAAA,CAAAV,EAAA,EAAAW,IAAA,CAAAH,GAAA;QACA;MAAA,SAAAI,GAAA;QAAAV,SAAA,CAAAW,CAAA,CAAAD,GAAA;MAAA;QAAAV,SAAA,CAAAY,CAAA;MAAA;IAGA;IACAC,cAAA,WAAAA,eAAAC,QAAA;MACA,KAAAA,QAAA,EAAAhC,OAAA,CAAAC,GAAA,wBACA,KAAAgC,SAAA;IACA;IACAA,SAAA,WAAAA,UAAAC,aAAA,EAAAC,eAAA;MACA,IAAAC,KAAA,GAAAC,IAAA,CAAAC,KAAA,CAAAD,IAAA,CAAAE,MAAA;MACA,KAAAC,OAAA;QACAC,SAAA,EAAApD,oBAAA;QAEA8C,eAAA,EAAAA,eAAA;QACAD,aAAA,EAAAA,aAAA;QACAQ,IAAA;QACA9C,KAAA;UACA+C,WAAA;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}