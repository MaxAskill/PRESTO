{"ast":null,"code":"import _Select2 from \"element-ui/lib/theme-chalk/select.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Select from \"element-ui/lib/select\";\nimport _Option2 from \"element-ui/lib/theme-chalk/option.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Option from \"element-ui/lib/option\";\nimport _Input2 from \"element-ui/lib/theme-chalk/input.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Input from \"element-ui/lib/input\";\nimport _Tag2 from \"element-ui/lib/theme-chalk/tag.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Tag from \"element-ui/lib/tag\";\nimport _Slider2 from \"element-ui/lib/theme-chalk/slider.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Slider from \"element-ui/lib/slider\";\nimport _TimeSelect2 from \"element-ui/lib/theme-chalk/time-select.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _TimeSelect from \"element-ui/lib/time-select\";\nimport _DatePicker2 from \"element-ui/lib/theme-chalk/date-picker.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _DatePicker from \"element-ui/lib/date-picker\";\nimport _TableColumn2 from \"element-ui/lib/theme-chalk/table-column.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _TableColumn from \"element-ui/lib/table-column\";\nimport _Table2 from \"element-ui/lib/theme-chalk/table.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Table from \"element-ui/lib/table\";\nimport { Collapse, CollapseItem, Tabs, TabPane, Card, Button } from \"src/components/UIComponents\";\nimport PProgress from \"src/components/UIComponents/Progress.vue\";\nimport PSwitch from \"src/components/UIComponents/Switch.vue\";\nimport Vue from \"vue\";\nimport NotificationTemplate from \"../Components/NotificationTemplate\";\nimport NotifAddBoxLabel from \"../Components/Notification/NotifSuccessAddBoxLabel.vue\";\nimport NotifAddItem from \"../Components/Notification/NotifSuccessAddItem.vue\";\nimport NotifDeleteBoxLabel from \"../Components/Notification/NotifSuccessDeleteBoxLabel.vue\";\nimport NotifDeleteItem from \"../Components/Notification/NotifSuccessDeleteItem.vue\";\nimport NotifDraftSave from \"../Components/Notification/NotifSuccessDraftSave.vue\";\nimport NotifItemChangeBoxLabel from \"../Components/Notification/NotifSuccessItemChangeBoxLabel.vue\";\nimport NotifItemQuantity from \"../Components/Notification/NotifSuccessItemQuantity.vue\";\nimport NotifRenameBoxLabel from \"../Components/Notification/NotifSuccessRenameBoxLabel.vue\";\nimport NotifSubmitTransaction from \"../Components/Notification/NotifSuccessSubmitTransaction.vue\";\nimport Swal from \"sweetalert2\";\nimport axiosClient from \"../../../../axios\";\nimport EditBoxLabelModal from \"./PullOutRequests/ModalPullOut/EditBoxLabelModal.vue\";\nimport TransactionReceiptModal from \"./PullOutRequests/ModalPullOut/TransactionReceiptModal.vue\";\nimport DraftModal from \"./PullOutRequests/ModalPullOut/DraftModal.vue\";\nimport linkName from \"../../../../linkName\";\nimport ConfirmationSubmitPullOutModal from \"./PullOutRequests/ModalPullOut/ConfirmationSubmitPullOutModal.vue\";\nVue.use(_Table);\nVue.use(_TableColumn);\nexport default {\n  components: {\n    [_DatePicker.name]: _DatePicker,\n    [_TimeSelect.name]: _TimeSelect,\n    [_Slider.name]: _Slider,\n    [_Tag.name]: _Tag,\n    [_Input.name]: _Input,\n    [Button.name]: Button,\n    [_Option.name]: _Option,\n    [_Select.name]: _Select,\n    PSwitch,\n    PProgress,\n    TabPane,\n    Tabs,\n    CollapseItem,\n    Collapse,\n    Card,\n    NotificationTemplate,\n    NotifAddBoxLabel,\n    NotifAddItem,\n    NotifDeleteBoxLabel,\n    NotifDeleteItem,\n    NotifDraftSave,\n    NotifItemChangeBoxLabel,\n    NotifItemQuantity,\n    NotifRenameBoxLabel,\n    NotifSubmitTransaction,\n    EditBoxLabelModal,\n    TransactionReceiptModal,\n    DraftModal,\n    ConfirmationSubmitPullOutModal\n  },\n  data() {\n    return {\n      transferredData: \"\",\n      isCompany: false,\n      isChainCode: true,\n      isBranchName: true,\n      isTransactionType: true,\n      isShowButton: false,\n      itemCodeList: [],\n      isEditBLDisabled: false,\n      isBoxLabel: false,\n      isItem: false,\n      isAddItem: true,\n      isDisabledSubmit: true,\n      showItemInput: \"\",\n      companyList: [],\n      chainCodeList: [],\n      branchNameList: [],\n      newTransaction: {\n        company: \"\",\n        chainCode: \"\",\n        branchName: \"\",\n        transactionType: \"\",\n        boxLabels: [],\n        items: []\n      },\n      newItemInputBox: [],\n      isValid: {\n        company: false,\n        chainCode: false,\n        branchName: false,\n        transactionType: false,\n        boxLabel: false,\n        item: false\n      },\n      hoveredRow: null,\n      transactionTypeList: [{\n        value: \"CPO - BranchDisposal\",\n        label: \"Concess Pull-Out Item Disposal\"\n      }, {\n        value: \"CPO - Store\",\n        label: \"Concess Pull-Out - Store\"\n      }, {\n        value: \"CPO - Warehouse\",\n        label: \"Concess Pull-Out - Warehouse\"\n      }, {\n        value: \"CPO - Warehouse(DC)\",\n        label: \"Concess Direct Pull-Out\"\n      }],\n      newBoxLabel: \"\",\n      newItemInput: \"\",\n      newBrand: \"\",\n      newItemDescription: \"\",\n      newStyleCode: \"\",\n      newItemCode: \"\",\n      notifications: {\n        topCenter: false\n      },\n      modals: {\n        classic: false,\n        notice: false,\n        mini: false\n      },\n      isNewBoxLabel: false,\n      isNewItem: false,\n      isRightCode: false,\n      transferTransactionID: \"\",\n      itemss: [{\n        id: 1,\n        name: \"Item 1\"\n      }, {\n        id: 2,\n        name: \"Item 2\"\n      }, {\n        id: 1,\n        name: \"Item 3\"\n      }, {\n        id: 3,\n        name: \"Item 4\"\n      }, {\n        id: 2,\n        name: \"Item 5\"\n      }],\n      uniqueItemss: [],\n      duplicateItemss: [],\n      isDenied: true\n    };\n  },\n  mounted() {\n    const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n    const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));\n    this.fetchEdit();\n    this.fetchCompany();\n    if (window.resolveRouteChange) {\n      window.resolveRouteChange();\n      window.resolveRouteChange = null;\n    }\n    linkName.val = \"Pull-Out Requisition Form\";\n  },\n  watch: {\n    newTransaction: {\n      handler(val) {\n        this.validateSubmit();\n      },\n      deep: true\n    },\n    \"newTransaction.boxLabels\": function (val, oldVal) {\n      this.enableDropDowns();\n    },\n    \"newTransaction.company\": function (val, oldVal) {\n      this.showButtons();\n    },\n    \"newTransaction.chainCode\": function (val, oldVal) {\n      this.showButtons();\n    },\n    \"newTransaction.branchName\": function (val, oldVal) {\n      this.showButtons();\n    },\n    \"newTransaction.transactionType\": function (val, oldVal) {\n      this.showButtons();\n    }\n  },\n  methods: {\n    numberOnly($event) {\n      let keyCode = $event.keyCode ? $event.keyCode : $event.which;\n      if (keyCode < 48 || keyCode > 57) {\n        $event.preventDefault();\n      }\n    },\n    validateSubmit() {\n      let uniqueItems = [...new Set(this.newTransaction.items.map(item => item.boxNumber))];\n      let itemsValidation = false;\n      for (let j in this.newTransaction.boxLabels) {\n        for (let i in uniqueItems) {\n          if (uniqueItems[i] == this.newTransaction.boxLabels[j].id) {\n            itemsValidation = true;\n            break;\n          } else itemsValidation = false;\n        }\n      }\n      for (let x in this.newTransaction.items) if (this.newTransaction.items[x].quantity == 0) {\n        itemsValidation = false;\n        break;\n      }\n      if (!itemsValidation) {\n        let tooltip = bootstrap.Tooltip.getInstance(\"#submitBTN\");\n        tooltip._config.title = \"No items should have a quantity with 0.\";\n        tooltip.update();\n      }\n      if (this.newTransaction.company && this.newTransaction.chainCode && this.newTransaction.branchName && this.newTransaction.transactionType && this.newTransaction.boxLabels.length > 0 && itemsValidation) this.isDisabledSubmit = false;else this.isDisabledSubmit = true;\n    },\n    editingBoxLabel({\n      index,\n      value,\n      tempBL\n    }) {\n      if (value) this.newTransaction.boxLabels[index].boxLabel = value;else this.newTransaction.boxLabels[index].boxLabel = tempBL;\n    },\n    enableDropDowns() {\n      if (this.newTransaction.boxLabels.length == 0) {\n        this.isCompany = false;\n        this.isChainCode = false;\n        this.isBranchName = false;\n        this.isTransactionType = false;\n        this.isEditBLDisabled = true;\n        console.log(this.newTransaction.boxLabels.length);\n      } else this.isEditBLDisabled = false;\n    },\n    showButtons() {\n      if (this.newTransaction.company && this.newTransaction.chainCode && this.newTransaction.branchName && this.newTransaction.transactionType) {\n        this.isShowButton = true;\n        if (this.newTransaction.boxLabels.length == 0) this.isEditBLDisabled = true;else this.isEditBLDisabled = false;\n      } else this.isShowButton = false;\n    },\n    fetchEdit() {\n      try {\n        const uri = window.location.href;\n        var transactionID = uri.split(\"?\")[1];\n        var id = transactionID.split(\"=\")[1].split(\"&\")[0];\n        console.log(\"ID\", id);\n        console.log(\"Company\", transactionID.split(\"=\")[2]);\n        var company = transactionID.split(\"=\")[2];\n        axiosClient.get(\"/fetchEditDraftBranch\", {\n          params: {\n            company: company,\n            plID: id\n          }\n        }).then(response => {\n          console.log(\"Edit Branch:\", response.data, this.itemss);\n          this.newTransaction.company = response.data[0].company;\n          this.newTransaction.branchName = response.data[0].branchName;\n          this.newTransaction.chainCode = response.data[0].chainCode;\n          this.newTransaction.transactionType = response.data[0].transactionType;\n          if (response.data[0].status == \"denied\") {\n            this.isDenied = false;\n          }\n          axiosClient.get(\"/fetchEditDraftItem\", {\n            params: {\n              company: company,\n              plID: id\n            }\n          }).then(response => {\n            console.log(\"Edit Item:\", response.data);\n            for (var x = 0; x < response.data.length; x++) {\n              this.newTransaction.items.push(response.data[x]);\n              console.log(\"New Items:\", this.newTransaction.items);\n            }\n            const idMap = new Map();\n            this.newTransaction.items.forEach(item => {\n              if (!idMap.has(item.id)) {\n                idMap.set(item.id, true);\n                this.newTransaction.boxLabels.push({\n                  id: item.boxNumber,\n                  boxLabel: item.boxLabel\n                });\n                this.newItemInputBox.push({\n                  id: item.boxNumber\n                });\n              }\n            });\n            console.log(\"Edit Labels:\", this.newTransaction.boxLabels);\n            console.log(\"this.newTransaction.transactionType:\", this.newTransaction.transactionType);\n            if (this.newTransaction.company) {\n              this.isCompany = false;\n              this.isChainCode = false;\n              this.fetchCompany();\n              this.fetchChainCode();\n            }\n            if (this.newTransaction.chainCode) {\n              this.isChainCode = false;\n              this.isBranchName = false;\n              this.fetchChainName();\n              this.fetchChainCode();\n            }\n            if (this.newTransaction.branchName) {\n              this.isBranchName = false;\n              this.isTransactionType = false;\n              this.fetchChainName();\n            }\n            if (this.newTransaction.transactionType) {\n              this.isCompany = false;\n              this.isChainCode = false;\n              this.isBranchName = false;\n              this.isTransactionType = false;\n            }\n            if (this.newTransaction.items.length) {\n              console.log(\"Disable\", this.newTransaction.items.length);\n              this.isCompany = true;\n              this.isChainCode = true;\n              this.isBranchName = true;\n              this.isTransactionType = true;\n            }\n          }).catch(error => {\n            console.error(error);\n          });\n        }).catch(error => {\n          console.error(error);\n        });\n      } catch {\n        console.log(\"No Edit\");\n      }\n    },\n    updateData(updatedData) {\n      console.log(\"das\", updatedData);\n    },\n    openModal(data) {\n      this.transferredData = data;\n    },\n    closeModal() {\n      this.transferredData = \"\";\n    },\n    showButton(itemId) {\n      this.hoveredRow = itemId;\n    },\n    hideButton(itemId) {\n      this.hoveredRow = null;\n    },\n    removeItem(code, boxNumber) {\n      this.validateSubmit();\n      console.log(\"New DATAs\", code, boxNumber);\n      this.newTransaction.items = this.newTransaction.items.filter(item => item.code !== code || item.boxNumber !== boxNumber);\n      this.notifyVue(\"DeleteItem\", \"bottom\", \"right\");\n    },\n    fetchItems() {\n      if (this.newItemInput.length >= 4) {\n        if (this.newTransaction.company == \"NBFI\" || this.newTransaction.company == \"CMC\" || this.newTransaction.company == \"ASC\") {\n          axiosClient.get(\"/fetchItemsNBFI\", {\n            params: {\n              ItemNo: this.newItemInput\n            }\n          }).then(response => {\n            console.log(\"Item Code Response: \", response.data);\n            this.itemCodeList = response.data;\n          }).catch(error => {});\n        } else {\n          axiosClient.get(\"/fetchItems\", {\n            params: {\n              ItemNo: this.newItemInput\n            }\n          }).then(response => {\n            console.log(\"Item Code Response: \", response.data);\n            this.itemCodeList = response.data;\n          }).catch(error => {});\n        }\n      }\n    },\n    compareItemCode() {\n      let value = this.newItemInput;\n      if (value.indexOf(\" - \") >= 0) {\n        let parts = value.split(\" - \");\n        this.newItemInput = parts[0];\n      }\n      if (this.newItemInput.length > 16) {\n        this.newItemInput = this.newItemInput.slice(0, 16);\n      } else {}\n      axiosClient.get(\"/compareItemCode\", {\n        params: {\n          companyType: this.newTransaction.company,\n          ItemNo: this.newItemInput\n        }\n      }).then(response => {\n        console.log(\"Success Item No:\", response.data);\n        console.log(\"Success Item Description\", response.data[0].ItemDescription);\n        this.newItemCode = response.data[0].ItemNo;\n        this.newItemDescription = response.data[0].ItemDescription;\n        this.newStyleCode = response.data[0].StyleCode;\n        let brandCode = response.data[0].ItemNo.toString().substr(1, 2);\n        axiosClient.get(\"/fetchBrands\", {\n          params: {\n            companyType: this.newTransaction.company,\n            brandCode: brandCode\n          }\n        }).then(response => {\n          console.log(\"Success\", response.data);\n          this.newBrand = response.data[0].brandNames;\n        }).catch(error => {\n          console.error(error);\n        });\n      }).catch(error => {\n        this.missItemCode = 0;\n        !this.newItemInput ? true : this.isRightCode = true;\n        console.log(\"Not Equal\");\n        console.error(error);\n      });\n    },\n    handleQuantity(item) {\n      console.log(\"Item Quantity\", item.quantity);\n      if (!item.quantity) {\n        console.log(\"Empty\");\n        item.quantity = 0;\n      }\n      this.notifyVue(\"ItemQuantity\", \"bottom\", \"right\");\n    },\n    notifyVue(notify, verticalAlign, horizontalAlign) {\n      var notification = \"\";\n      let notifType = \"\";\n      if (notify === \"AddBoxLabel\") {\n        notification = NotifAddBoxLabel;\n        notifType = \"success\";\n      } else if (notify === \"AddItem\") {\n        notification = NotifAddItem;\n        notifType = \"success\";\n      } else if (notify === \"DeleteBoxLabel\") {\n        notification = NotifDeleteBoxLabel;\n        notifType = \"danger\";\n      } else if (notify === \"DeleteItem\") {\n        notification = NotifDeleteItem;\n        notifType = \"danger\";\n      } else if (notify === \"DraftSave\") {\n        notification = NotifDraftSave;\n        notifType = \"success\";\n      } else if (notify === \"ChangeBoxLabel\") {\n        notification = NotifItemChangeBoxLabel;\n        notifType = \"success\";\n      } else if (notify === \"ItemQuantity\") {\n        notification = NotifItemQuantity;\n        notifType = \"success\";\n      } else if (notify === \"RenameBoxLabel\") {\n        notification = NotifRenameBoxLabel;\n        notifType = \"success\";\n      } else {\n        notification = NotifSubmitTransaction;\n        notifType = \"success\";\n      }\n      this.$notify({\n        component: notification,\n        horizontalAlign: horizontalAlign,\n        verticalAlign: verticalAlign,\n        type: notifType,\n        props: {\n          customValue: \"Success\"\n        }\n      });\n    },\n    fetchCompany() {\n      axiosClient.get(\"/fetchCompany\").then(response => {\n        console.log(\"Company Response:\", response.data);\n        this.companyList = response.data;\n      }).catch(error => {\n        console.error(error);\n      });\n    },\n    fetchChainCode() {\n      axiosClient.get(\"/fetchChain\", {\n        params: {\n          company: this.newTransaction.company\n        }\n      }).then(response => {\n        console.log(\"Chain Code Response:\", response.data);\n        this.chainCodeList = response.data;\n      }).catch(error => {\n        console.error(error);\n      });\n      this.isChainCode = false;\n    },\n    fetchChainName() {\n      axiosClient.get(\"/fetchChainName\", {\n        params: {\n          chainCode: this.newTransaction.chainCode\n        }\n      }).then(response => {\n        console.log(\"Chain Name Response:\", response.data);\n        this.branchNameList = response.data;\n      }).catch(error => {\n        console.error(error);\n      });\n      this.isBranchName = false;\n    },\n    addItem(id) {\n      this.isItem = false;\n      this.isAddItem = false;\n      this.showItemInput = id;\n      console.log(\"clicked ID:\", this.showItemInput);\n    },\n    saveItem(boxID) {\n      this.isNewItem = !this.newItemInput ? true : false;\n      console.log(\"item\", this.newItemInput);\n      console.log(\"condition\", this.isNewItem);\n      if (this.isNewItem) {\n        this.isRightCode = false;\n        return 0;\n      }\n      console.log(this.newTransaction.items.length);\n      console.log(\"Items: \", this.newTransaction.items);\n      console.log(\"Item No:\", this.newItemCode);\n      console.log(\"Item Description:\", this.newItemDescription);\n      console.log(\"Style Code:\", this.newStyleCode);\n      axiosClient.get(\"/fetchSameItem\", {\n        params: {\n          company: this.newTransaction.company,\n          ItemCode: this.newItemCode,\n          ItemDescription: this.newItemDescription,\n          StyleCode: this.newStyleCode\n        }\n      }).then(response => {\n        console.log(\"Same Item:\", response.data);\n        for (var x = 0; x < response.data.length; x++) {\n          var flag = true;\n          for (var i = 0; i < this.newTransaction.items.length; i++) {\n            if (this.newTransaction.items[i].code == response.data[x].ItemNo && this.newTransaction.items[i].boxNumber == boxID) {\n              this.newTransaction.items[i].quantity = parseInt(this.newTransaction.items[x].quantity) + 1;\n              flag = false;\n              break;\n            }\n          }\n          if (flag) {\n            let tempItem = {\n              code: response.data[x].ItemNo,\n              description: response.data[x].ItemDescription,\n              categorybrand: this.newBrand,\n              quantity: 0,\n              size: response.data[x].Size,\n              color: response.data[x].Color,\n              boxNumber: boxID\n            };\n            this.newTransaction.items.push(tempItem);\n          }\n          this.isRightCode = false;\n          this.isItem = false;\n          this.isAddItem = true;\n          this.newItemInput = \"\";\n          this.showItemInput = \"\";\n          this.notifyVue(\"AddItem\", \"bottom\", \"right\");\n        }\n      }).catch(error => {\n        console.error(error);\n      });\n      console.log(\"Items: \", this.newTransaction.items);\n    },\n    cancelItem() {\n      this.isRightCode = false;\n      this.isNewItem = false;\n      this.isItem = false;\n      this.isAddItem = true;\n      this.showItemInput = \"\";\n      this.newItemInput = \"\";\n    },\n    addBoxLabel() {\n      this.isBoxLabel = true;\n      this.isEditBLDisabled = true;\n    },\n    saveBoxLabel() {\n      this.isNewBoxLabel = !this.newBoxLabel ? true : false;\n      if (this.isNewBoxLabel) {\n        return 0;\n      }\n      this.isBoxLabel = false;\n      console.log(this.newTransaction.boxLabels.length);\n      let tempBoxLabel = [];\n      if (this.newTransaction.boxLabels.length == 0) {\n        tempBoxLabel = {\n          id: this.newTransaction.boxLabels.length + 1,\n          boxNumber: this.newTransaction.boxLabels.length + 1,\n          boxLabel: this.newBoxLabel\n        };\n      } else {\n        tempBoxLabel = {\n          id: this.newTransaction.boxLabels[this.newTransaction.boxLabels.length - 1].id + 1,\n          boxNumber: this.newTransaction.boxLabels.length + 1,\n          boxLabel: this.newBoxLabel\n        };\n      }\n      let tempItem = [];\n      if (this.newTransaction.boxLabels.length == 0) {\n        tempItem = {\n          id: this.newTransaction.boxLabels.length + 1\n        };\n      } else {\n        tempItem = {\n          id: this.newTransaction.boxLabels[this.newTransaction.boxLabels.length - 1].id + 1\n        };\n      }\n      this.newTransaction.boxLabels.push(tempBoxLabel);\n      this.newItemInputBox.push(tempItem);\n      this.newBoxLabel = \"\";\n      this.isCompany = true;\n      this.isChainCode = true;\n      this.isBranchName = true;\n      this.isTransactionType = true;\n      this.notifyVue(\"AddBoxLabel\", \"bottom\", \"right\");\n      this.isEditBLDisabled = false;\n    },\n    cancelBoxLabel() {\n      this.isNewBoxLabel = false;\n      this.isBoxLabel = false;\n      this.newBoxLabel = \"\";\n      if (this.newTransaction.boxLabels.length == 0) this.isEditBLDisabled = true;else this.isEditBLDisabled = false;\n    },\n    submit(confirmation) {\n      if (confirmation) try {\n        const uri = window.location.href;\n        var transactionID = uri.split(\"?\")[1];\n        var id = transactionID.split(\"=\")[1].split(\"&\")[0];\n        this.isValid.company = !this.newTransaction.company ? true : false;\n        this.isValid.chainCode = !this.newTransaction.chainCode ? true : false;\n        this.isValid.branchName = !this.newTransaction.branchName ? true : false;\n        this.isValid.transactionType = !this.newTransaction.transactionType ? true : false;\n        this.isValid.boxLabel = !this.newTransaction.boxLabels.length ? true : false;\n        this.isValid.item = !this.newTransaction.items.length ? true : false;\n        console.log(\"Company: \", this.isValid.company);\n        console.log(\"company\", this.newTransaction.company);\n        if (sessionStorage.getItem(\"Position\") == \"Agent\" || sessionStorage.getItem(\"Position\") == \"Admin\") {\n          var status = \"endorsement\";\n        } else {\n          var status = \"unprocessed\";\n        }\n        axiosClient.post(\"/updatePullOutBranchRequest\", {\n          id: id,\n          chainCode: this.newTransaction.chainCode,\n          companyType: this.newTransaction.company,\n          branchName: this.newTransaction.branchName,\n          transactionType: this.newTransaction.transactionType,\n          email: sessionStorage.getItem(\"Email\"),\n          status: status\n        }).then(response => {\n          console.log(\"Success Branch Save: \", response.data);\n          this.transferTransactionID = id;\n          for (var x = 0; x < this.newTransaction.items.length; x++) {\n            let labelBox = \"\";\n            for (let box of this.newTransaction.boxLabels) {\n              if (box.id == this.newTransaction.items[x].boxNumber) {\n                labelBox = box.boxLabel;\n              }\n            }\n            axiosClient.post(\"/updatePullOutItemRequest\", {\n              plID: id,\n              companyType: this.newTransaction.company,\n              brand: this.newTransaction.items[x].categorybrand,\n              boxNumber: this.newTransaction.items[x].boxNumber,\n              boxLabel: labelBox,\n              itemCode: this.newTransaction.items[x].code,\n              quantity: this.newTransaction.items[x].quantity,\n              email: sessionStorage.getItem(\"Email\"),\n              status: status\n            }).then(response => {\n              console.log(\"Success Items Save: \", response.data);\n            }).catch(error => {\n              console.error(error);\n            });\n          }\n          const transactionModal = new bootstrap.Modal(\"#transactionReceipt\");\n          transactionModal.show();\n        }).catch(error => {\n          console.error(error);\n        });\n      } catch {\n        this.isValid.company = !this.newTransaction.company ? true : false;\n        this.isValid.chainCode = !this.newTransaction.chainCode ? true : false;\n        this.isValid.branchName = !this.newTransaction.branchName ? true : false;\n        this.isValid.transactionType = !this.newTransaction.transactionType ? true : false;\n        this.isValid.boxLabel = !this.newTransaction.boxLabels.length ? true : false;\n        this.isValid.item = !this.newTransaction.items.length ? true : false;\n        console.log(\"Company: \", this.isValid.company);\n        console.log(\"company\", this.newTransaction.company);\n        axiosClient.post(\"/savePullOutBranchRequest\", {\n          chainCode: this.newTransaction.chainCode,\n          companyType: this.newTransaction.company,\n          branchName: this.newTransaction.branchName,\n          transactionType: this.newTransaction.transactionType,\n          email: sessionStorage.getItem(\"Email\"),\n          status: \"unprocessed\"\n        }).then(response => {\n          console.log(\"Success Branch Save: \", response.data);\n          this.transferTransactionID = response.data.id;\n          for (var x = 0; x < this.newTransaction.items.length; x++) {\n            let labelBox = \"\";\n            for (let box of this.newTransaction.boxLabels) {\n              if (box.id == this.newTransaction.items[x].boxNumber) {\n                labelBox = box.boxLabel;\n              }\n            }\n            axiosClient.post(\"/savePullOutItemRequest\", {\n              plID: response.data.id,\n              companyType: this.newTransaction.company,\n              brand: this.newTransaction.items[x].categorybrand,\n              boxNumber: this.newTransaction.items[x].boxNumber,\n              boxLabel: labelBox,\n              itemCode: this.newTransaction.items[x].code,\n              quantity: this.newTransaction.items[x].quantity,\n              email: sessionStorage.getItem(\"Email\"),\n              status: \"unprocessed\"\n            }).then(response => {\n              console.log(\"Success Items Save: \", response.data);\n            }).catch(error => {\n              console.error(error);\n            });\n          }\n          const transactionModal = new bootstrap.Modal(\"#transactionReceipt\");\n          transactionModal.show();\n        }).catch(error => {\n          console.error(error);\n        });\n      }\n    },\n    draft() {\n      try {\n        const uri = window.location.href;\n        var transactionID = uri.split(\"?\")[1];\n        var id = transactionID.split(\"=\")[1].split(\"&\")[0];\n        axiosClient.post(\"/updatePullOutBranchRequest\", {\n          id: id,\n          chainCode: this.newTransaction.chainCode,\n          companyType: this.newTransaction.company,\n          branchName: this.newTransaction.branchName,\n          transactionType: this.newTransaction.transactionType,\n          status: \"draft\",\n          email: sessionStorage.getItem(\"Email\")\n        }).then(response => {\n          console.log(\"Success Branch Save: \", response.data);\n          console.log(\"Items Length:\", this.newTransaction.items.length);\n          for (var x = 0; x < this.newTransaction.items.length; x++) {\n            let labelBox = \"\";\n            for (let box of this.newTransaction.boxLabels) {\n              if (box.id == this.newTransaction.items[x].boxNumber) {\n                labelBox = box.boxLabel;\n              }\n            }\n            axiosClient.post(\"/updatePullOutItemRequest\", {\n              plID: id,\n              companyType: this.newTransaction.company,\n              brand: this.newTransaction.items[x].categorybrand,\n              boxNumber: this.newTransaction.items[x].boxNumber,\n              boxLabel: labelBox,\n              itemCode: this.newTransaction.items[x].code,\n              quantity: this.newTransaction.items[x].quantity,\n              status: \"draft\",\n              email: sessionStorage.getItem(\"Email\")\n            }).then(response => {\n              console.log(\"Success Items Save: \", response.data);\n            }).catch(error => {\n              console.error(error);\n            });\n          }\n          const draftModal = new bootstrap.Modal(\"#draftModal\");\n          draftModal.show();\n        }).catch(error => {\n          console.error(error);\n        });\n      } catch {\n        axiosClient.post(\"/savePullOutBranchRequest\", {\n          chainCode: this.newTransaction.chainCode,\n          companyType: this.newTransaction.company,\n          branchName: this.newTransaction.branchName,\n          transactionType: this.newTransaction.transactionType,\n          status: \"draft\",\n          email: sessionStorage.getItem(\"Email\")\n        }).then(response => {\n          console.log(\"Success Branch Save: \", response.data);\n          for (var x = 0; x < this.newTransaction.items.length; x++) {\n            let labelBox = \"\";\n            for (let box of this.newTransaction.boxLabels) {\n              if (box.id == this.newTransaction.items[x].boxNumber) {\n                labelBox = box.boxLabel;\n              }\n            }\n            axiosClient.post(\"/savePullOutItemRequest\", {\n              plID: response.data.id,\n              companyType: this.newTransaction.company,\n              brand: this.newTransaction.items[x].categorybrand,\n              boxNumber: this.newTransaction.items[x].boxNumber,\n              boxLabel: labelBox,\n              itemCode: this.newTransaction.items[x].code,\n              quantity: this.newTransaction.items[x].quantity,\n              status: \"draft\",\n              email: sessionStorage.getItem(\"Email\")\n            }).then(response => {\n              console.log(\"Success Items Save: \", response.data);\n            }).catch(error => {\n              console.error(error);\n            });\n          }\n          const draftModal = new bootstrap.Modal(\"#draftModal\");\n          draftModal.show();\n        }).catch(error => {\n          console.error(error);\n        });\n      }\n    },\n    editBoxLabel(code, quantity, boxNumber) {\n      this.validateSubmit();\n      console.log(\"Item Code Edit:\", code, \" Quantity:\", quantity, \" Box Number\", boxNumber);\n      console.log(\" == : \", this.newTransaction.items);\n      var filteredItems = this.newTransaction.items.filter(item => item.code === code && item.boxNumber === boxNumber);\n      console.log(\"Filtered Items: \", filteredItems);\n      var uniqueItems = [];\n      filteredItems.forEach(item => {\n        var existingItem = uniqueItems.find(uniqueItem => uniqueItem.code === item.code);\n        if (existingItem) {\n          existingItem.quantity += item.quantity;\n        } else {\n          uniqueItems.push({\n            ...item\n          });\n        }\n      });\n      console.log(\"Unique Items: 1\", uniqueItems);\n      console.log(\"Unique Items: Code\", uniqueItems[0].code);\n      console.log(\"Unique Items: Box Number\", uniqueItems[0].boxNumber);\n      this.newTransaction.items = this.newTransaction.items.filter(item => item.code !== uniqueItems[0].code || item.boxNumber !== uniqueItems[0].boxNumber);\n      this.newTransaction.items.push(uniqueItems[0]);\n      this.notifyVue(\"ChangeBoxLabel\", \"bottom\", \"right\");\n    }\n  }\n};","map":{"version":3,"names":["Collapse","CollapseItem","Tabs","TabPane","Card","Button","PProgress","PSwitch","Vue","NotificationTemplate","NotifAddBoxLabel","NotifAddItem","NotifDeleteBoxLabel","NotifDeleteItem","NotifDraftSave","NotifItemChangeBoxLabel","NotifItemQuantity","NotifRenameBoxLabel","NotifSubmitTransaction","Swal","axiosClient","EditBoxLabelModal","TransactionReceiptModal","DraftModal","linkName","ConfirmationSubmitPullOutModal","use","_Table","_TableColumn","components","_DatePicker","name","_TimeSelect","_Slider","_Tag","_Input","_Option","_Select","data","transferredData","isCompany","isChainCode","isBranchName","isTransactionType","isShowButton","itemCodeList","isEditBLDisabled","isBoxLabel","isItem","isAddItem","isDisabledSubmit","showItemInput","companyList","chainCodeList","branchNameList","newTransaction","company","chainCode","branchName","transactionType","boxLabels","items","newItemInputBox","isValid","boxLabel","item","hoveredRow","transactionTypeList","value","label","newBoxLabel","newItemInput","newBrand","newItemDescription","newStyleCode","newItemCode","notifications","topCenter","modals","classic","notice","mini","isNewBoxLabel","isNewItem","isRightCode","transferTransactionID","itemss","id","uniqueItemss","duplicateItemss","isDenied","mounted","tooltipTriggerList","document","querySelectorAll","tooltipList","map","tooltipTriggerEl","bootstrap","Tooltip","fetchEdit","fetchCompany","window","resolveRouteChange","val","watch","handler","validateSubmit","deep","newTransaction.boxLabels","oldVal","enableDropDowns","newTransaction.company","showButtons","newTransaction.chainCode","newTransaction.branchName","newTransaction.transactionType","methods","numberOnly","$event","keyCode","which","preventDefault","uniqueItems","Set","boxNumber","itemsValidation","j","i","x","quantity","tooltip","getInstance","_config","title","update","length","editingBoxLabel","index","tempBL","console","log","uri","location","href","transactionID","split","get","params","plID","then","response","status","push","idMap","Map","forEach","has","set","fetchChainCode","fetchChainName","catch","error","updateData","updatedData","openModal","closeModal","showButton","itemId","hideButton","removeItem","code","filter","notifyVue","fetchItems","ItemNo","compareItemCode","indexOf","parts","slice","companyType","ItemDescription","StyleCode","brandCode","toString","substr","brandNames","missItemCode","handleQuantity","notify","verticalAlign","horizontalAlign","notification","notifType","$notify","component","type","props","customValue","addItem","saveItem","boxID","ItemCode","flag","parseInt","tempItem","description","categorybrand","size","Size","color","Color","cancelItem","addBoxLabel","saveBoxLabel","tempBoxLabel","cancelBoxLabel","submit","confirmation","sessionStorage","getItem","post","email","labelBox","box","brand","itemCode","transactionModal","Modal","show","draft","draftModal","editBoxLabel","filteredItems","existingItem","find","uniqueItem"],"sources":["src/components/Dashboard/Views/PullOut/PullOutGenerator.vue"],"sourcesContent":["<template>\n  <div class=\"card\">\n    <!-- <div class=\"card-header\">\n      <h4 class=\"title\">Pull-Out Requisition Form</h4>\n    </div> -->\n    <div class=\"card-body\">\n      <form>\n        <div class=\"row\">\n          <div class=\"col-sm-3\">\n            <fg-input label=\"Company\">\n              <el-select\n                class=\"select-default\"\n                size=\"large\"\n                placeholder=\"Select Company\"\n                v-model=\"newTransaction.company\"\n                @change=\"\n                  fetchChainCode(),\n                    (newTransaction.chainCode = ''),\n                    (newTransaction.branchName = ''),\n                    (newTransaction.transactionType = '')\n                \"\n                :disabled=\"isCompany\"\n              >\n                <el-option\n                  v-for=\"option in companyList\"\n                  class=\"select-default\"\n                  :value=\"option.shortName\"\n                  :label=\"option.name + ' (' + option.shortName + ') '\"\n                  :key=\"option.id\"\n                >\n                </el-option>\n              </el-select>\n              <label v-show=\"isValid.company\" class=\"label-font\"\n                >Company is required.</label\n              >\n            </fg-input>\n          </div>\n          <div class=\"col-sm-3\">\n            <fg-input label=\"Chain Code\">\n              <el-select\n                class=\"select-default\"\n                size=\"large\"\n                placeholder=\"Select Chain Code\"\n                v-model=\"newTransaction.chainCode\"\n                @change=\"\n                  fetchChainName(),\n                    (newTransaction.branchName = ''),\n                    (newTransaction.transactionType = '')\n                \"\n                :disabled=\"isChainCode\"\n              >\n                <el-option\n                  v-for=\"option in chainCodeList\"\n                  class=\"select-default\"\n                  :value=\"option.chainCode\"\n                  :label=\"option.chainCode\"\n                  :key=\"option.chainCode\"\n                >\n                </el-option>\n              </el-select>\n              <label v-show=\"isValid.chainCode\" class=\"label-font\"\n                >Chain Code is required.</label\n              >\n            </fg-input>\n          </div>\n          <div class=\"col-sm-3\">\n            <fg-input label=\"Branch Name\">\n              <el-select\n                class=\"select-default\"\n                size=\"large\"\n                placeholder=\"Select Branch Name\"\n                v-model=\"newTransaction.branchName\"\n                @change=\"\n                  (isTransactionType = false), (newTransaction.transactionType = '')\n                \"\n                :disabled=\"isBranchName\"\n              >\n                <el-option\n                  v-for=\"option in branchNameList\"\n                  class=\"select-default\"\n                  :value=\"option.branchName\"\n                  :label=\"option.branchName\"\n                  :key=\"option.branchName\"\n                >\n                </el-option>\n              </el-select>\n              <label v-show=\"isValid.branchName\" class=\"label-font\"\n                >Branch Name is required.</label\n              >\n            </fg-input>\n          </div>\n          <div class=\"col-sm-3\">\n            <fg-input label=\"Transaction Type\">\n              <el-select\n                class=\"select-default\"\n                size=\"large\"\n                placeholder=\"Select Transaction Type\"\n                v-model=\"newTransaction.transactionType\"\n                :disabled=\"isTransactionType\"\n              >\n                <el-option\n                  v-for=\"option in transactionTypeList\"\n                  class=\"select-default\"\n                  :value=\"option.value\"\n                  :label=\"option.label\"\n                  :key=\"option.label\"\n                >\n                </el-option>\n              </el-select>\n              <label v-show=\"isValid.transactionType\" class=\"label-font\"\n                >Transaction Type is required.</label\n              >\n            </fg-input>\n          </div>\n        </div>\n        <div class=\"col-sm-12\">\n          <card type=\"plain\">\n            <div class=\"row\">\n              <div class=\"col-sm-12\" v-show=\"isShowButton\">\n                <p-button\n                  type=\"default\"\n                  link\n                  class=\"font-weight-bold\"\n                  @click.prevent=\"addBoxLabel()\"\n                >\n                  <i class=\"nc-icon nc-simple-add font-weight-bold\"></i> Add Box Label\n                </p-button>\n                <p-button\n                  :disabled=\"isEditBLDisabled\"\n                  type=\"default\"\n                  link\n                  class=\"font-weight-bold\"\n                  data-bs-toggle=\"modal\"\n                  data-bs-target=\"#editboxlabelModal\"\n                  @click=\"openModal(newTransaction)\"\n                >\n                  <i class=\"nc-icon nc-ruler-pencil font-weight-bold\"></i> Edit Box Label\n                </p-button>\n              </div>\n              <form @submit.prevent=\"saveBoxLabel()\">\n                <div class=\"col-sm-12 mx-n3\" v-show=\"isBoxLabel\">\n                  <div class=\"col-sm-12\">\n                    <fg-input\n                      placeholder=\"Box Label\"\n                      v-model=\"newBoxLabel\"\n                      class=\"w-100\"\n                    ></fg-input>\n                  </div>\n                  <div class=\"col-sm-2 mt-n3\">\n                    <p-button\n                      native-type=\"submit\"\n                      type=\"default\"\n                      size=\"sm\"\n                      outline\n                      class=\"font-weight-bold\"\n                    >\n                      <i class=\"nc-icon nc-check-2 font-weight-bold\"></i>\n                    </p-button>\n                    <p-button\n                      type=\"default\"\n                      size=\"sm\"\n                      outline\n                      class=\"font-weight-bold\"\n                      @click.prevent=\"cancelBoxLabel()\"\n                    >\n                      <i class=\"nc-icon nc-simple-remove font-weight-bold\"></i>\n                    </p-button>\n                  </div>\n                  <label v-show=\"isNewBoxLabel\" class=\"label-font pl-3\"\n                    >Box Label is empty.</label\n                  >\n                </div>\n              </form>\n              <label v-show=\"isValid.boxLabel\" class=\"label-font\"\n                >Box Label is required.</label\n              >\n            </div>\n            <collapse>\n              <collapse-item\n                v-for=\"boxLabel in newTransaction.boxLabels\"\n                :key=\"boxLabel.id\"\n                :title=\"`Box Number: ${boxLabel.boxNumber} Box Label: ${boxLabel.boxLabel}`\"\n                name=\"1\"\n                class=\"font-weight-bold\"\n              >\n                <div class=\"row\" v-show=\"isAddItem\">\n                  <button\n                    class=\"btn btn-transparent text-left bold-button\"\n                    @click.prevent=\"addItem(boxLabel.id)\"\n                  >\n                    <i class=\"nc-icon nc-simple-add font-weight-bold\"></i> Add Item\n                  </button>\n                </div>\n                <div>\n                  <form @submit.prevent=\"saveItem(boxLabel.id)\">\n                    <div\n                      class=\"row\"\n                      v-for=\"newItem in newItemInputBox\"\n                      v-show=\"newItem.id === boxLabel.id\"\n                    >\n                      <div\n                        class=\"col-sm-12 d-flex mt-2\"\n                        v-if=\"newItem.id == showItemInput\"\n                      >\n                        <input\n                          type=\"text\"\n                          placeholder=\"Item Code\"\n                          v-model=\"newItemInput\"\n                          @input=\"fetchItems\"\n                          @change=\"compareItemCode\"\n                          list=\"items\"\n                          class=\"input-datalist\"\n                        />\n                        <!-- <input\n                        :disabled=\"switchItemCode\"\n                        type=\"text\"\n                        v-model=\"newItemInput\"\n                        @input=\"fetchItems\"\n                        @change=\"compareItemCode\"\n                        list=\"items\"\n                        class=\"input-datalist\"\n                      /> -->\n                        <datalist id=\"items\">\n                          <option\n                            v-for=\"item in itemCodeList\"\n                            :value=\"item.ItemNo + ' - ' + item.ItemDescription\"\n                            :key=\"item.ItemNo\"\n                          ></option>\n                        </datalist>\n                        <!-- <fg-input placeholder=\"Item\" v-model=\"newItemInput\" class=\"w-100\"></fg-input> -->\n                        <!-- <label> showItemInput: {{ showItemInput }}</label>\n                          <label> newItem.id: {{ newItem.id }}</label> -->\n                        <p-button\n                          native-type=\"submit\"\n                          type=\"default\"\n                          size=\"sm\"\n                          class=\"font-weight-bold\"\n                        >\n                          <i class=\"nc-icon nc-check-2 font-weight-bold\"></i>\n                        </p-button>\n                        <p-button\n                          type=\"default\"\n                          size=\"sm\"\n                          class=\"font-weight-bold\"\n                          @click.prevent=\"cancelItem()\"\n                        >\n                          <i class=\"nc-icon nc-simple-remove font-weight-bold\"></i>\n                        </p-button>\n                      </div>\n                      <label v-show=\"isRightCode\" class=\"label-font font-weight-normal\"\n                        >Invalid Item Code.</label\n                      >\n                      <label v-show=\"isNewItem\" class=\"label-font font-weight-normal\"\n                        >Item code is empty.</label\n                      >\n\n                      <!-- <div class=\"col-sm-12 d-flex\" v-show=\"newItem.id != showItemInput\">\n                          <fg-input :placeholder=\"newItem.id \" v-model=\"newItem.item\" class=\"w-100\"></fg-input>\n                          <p-button type=\"default\" size=\"sm\"   class=\"font-weight-bold\" @click.prevent=\"saveItem(boxLabel.boxLabel)\">\n                            <i class=\"nc-icon nc-check-2 font-weight-bold\"></i> {{ newItem.id }}\n                          </p-button>\n                          <p-button type=\"default\" size=\"sm\"   class=\"font-weight-bold\" @click.prevent=\"cancelItem()\">\n                            <i class=\"nc-icon nc-simple-remove font-weight-bold\"></i>\n                          </p-button>\n                        </div> -->\n                    </div>\n                  </form>\n                </div>\n\n                <div class=\"row\">\n                  <table\n                    class=\"table table-bordered table-hover table-responsive-sm table-font-size font-weight-normal\"\n                  >\n                    <thead>\n                      <tr>\n                        <th scope=\"col\" class=\"text-nowrap\">Item Code</th>\n                        <th scope=\"col\" class=\"text-nowrap\">Description</th>\n                        <th scope=\"col\" class=\"text-nowrap\">Size</th>\n                        <th scope=\"col\" class=\"text-nowrap\">Color</th>\n                        <th scope=\"col\" class=\"text-nowrap\">Category/Brand</th>\n                        <th scope=\"col\" class=\"text-nowrap\">Quantity</th>\n                        <th scope=\"col\" class=\"text-nowrap\">Box Label</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr\n                        v-show=\"boxLabel.id == item.boxNumber\"\n                        v-for=\"item in newTransaction.items\"\n                        :key=\"item.code\"\n                      >\n                        <th scope=\"row\" class=\"px-3 d-flex\">\n                          <button\n                            class=\"table-delete-button\"\n                            @click.prevent=\"removeItem(item.code, item.boxNumber)\"\n                          >\n                            <i class=\"nc-icon nc-simple-remove font-weight-bold\"></i>\n                          </button>\n                          {{ item.code }}\n                        </th>\n                        <td class=\"cell px-3\" style=\"width: 550px\">\n                          {{ item.description }}\n                        </td>\n                        <td class=\"cell px-3\" style=\"width: 10px\">\n                          {{ item.size }}\n                        </td>\n                        <td class=\"cell px-3\" style=\"width: 20px\">\n                          {{ item.color }}\n                        </td>\n                        <td class=\"cell px-3\" style=\"width: 300px\">\n                          {{ item.categorybrand }}\n                        </td>\n                        <!-- <td class=\"cell\" style=\"width: 50px\">\n                          <input\n                            type=\"number\"\n                            @blur=\"handleQuantity(item.id)\"\n                            v-model=\"item.quantity\"\n                            class=\"table-input-box\"\n                            @keypress=\"numberOnly\"\n                          />\n                        </td> -->\n                        <td class=\"cell\">\n                          <span>\n                            <div class=\"btn-group btn-group-sm d-flex flex-row\">\n                              <p-button\n                                type=\"default\"\n                                round\n                                outline\n                                size=\"xs\"\n                                @click=\"item.quantity > 0 ? item.quantity-- : 0\"\n                              >\n                                <i class=\"nc-icon nc-simple-delete\"></i>\n                              </p-button>\n                              <input\n                                type=\"text\"\n                                @blur=\"handleQuantity(item)\"\n                                v-model=\"item.quantity\"\n                                class=\"table-input-box\"\n                                style=\"width: 75px; text-align: center\"\n                                @keypress=\"numberOnly\"\n                              />\n                              <p-button\n                                type=\"default\"\n                                round\n                                outline\n                                size=\"xs\"\n                                @click=\"item.quantity++\"\n                              >\n                                <i class=\"nc-icon nc-simple-add\"></i>\n                              </p-button>\n                            </div>\n                          </span>\n                        </td>\n                        <td class=\"cell\" style=\"width: 300px\">\n                          <el-select\n                            class=\"table-select-box\"\n                            size=\"large\"\n                            v-model=\"item.boxNumber\"\n                            @change=\"\n                              editBoxLabel(item.code, item.quantity, item.boxNumber)\n                            \"\n                          >\n                            <el-option\n                              v-for=\"boxLabel in newTransaction.boxLabels\"\n                              class=\"table-select-box\"\n                              :value=\"boxLabel.id\"\n                              :label=\"boxLabel.boxLabel\"\n                              :key=\"boxLabel.id\"\n                            >\n                            </el-option>\n                          </el-select>\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n              </collapse-item>\n              <label v-show=\"isValid.item\" class=\"label-font\">Item is required.</label>\n            </collapse>\n          </card>\n        </div>\n\n        <div class=\"text-center\">\n          <button\n            type=\"submit\"\n            class=\"btn btn-warning btn-fill btn-wd\"\n            @click.prevent=\"draft\"\n            v-show=\"isDenied\"\n          >\n            Draft\n          </button>\n          <span\n            id=\"submitBTN\"\n            class=\"d-inline-block\"\n            tabindex=\"0\"\n            data-bs-toggle=\"tooltip\"\n            data-bs-placement=\"bottom\"\n            data-bs-title=\"Complete the form above to enable this button.\"\n          >\n            <button\n              :disabled=\"isDisabledSubmit\"\n              type=\"submit\"\n              class=\"btn btn-info btn-fill btn-wd\"\n              data-bs-target=\"#confirmationSubmitPullOut\"\n              data-bs-toggle=\"modal\"\n            >\n              Submit\n            </button></span\n          >\n        </div>\n        <div class=\"clearfix\"></div>\n      </form>\n      <EditBoxLabelModal\n        :transferredData=\"transferredData\"\n        :newItemInputBox=\"newItemInputBox\"\n        @closeModal=\"transferredData\"\n        @renameBoxLabel=\"editingBoxLabel($event)\"\n      ></EditBoxLabelModal>\n    </div>\n    <TransactionReceiptModal\n      :transferTransactionID=\"transferTransactionID\"\n    ></TransactionReceiptModal>\n    <DraftModal :transferTransactionID=\"transferTransactionID\"></DraftModal>\n    <ConfirmationSubmitPullOutModal\n      @confirm=\"submit($event)\"\n    ></ConfirmationSubmitPullOutModal>\n  </div>\n</template>\n<script>\nimport {\n  Collapse,\n  CollapseItem,\n  Tabs,\n  TabPane,\n  Card,\n  Button,\n} from \"src/components/UIComponents\";\nimport { DatePicker, TimeSelect, Slider, Tag, Input, Select, Option } from \"element-ui\";\nimport PProgress from \"src/components/UIComponents/Progress.vue\";\nimport PSwitch from \"src/components/UIComponents/Switch.vue\";\nimport Vue from \"vue\";\nimport NotificationTemplate from \"../Components/NotificationTemplate\";\nimport NotifAddBoxLabel from \"../Components/Notification/NotifSuccessAddBoxLabel.vue\";\nimport NotifAddItem from \"../Components/Notification/NotifSuccessAddItem.vue\";\nimport NotifDeleteBoxLabel from \"../Components/Notification/NotifSuccessDeleteBoxLabel.vue\";\nimport NotifDeleteItem from \"../Components/Notification/NotifSuccessDeleteItem.vue\";\nimport NotifDraftSave from \"../Components/Notification/NotifSuccessDraftSave.vue\";\nimport NotifItemChangeBoxLabel from \"../Components/Notification/NotifSuccessItemChangeBoxLabel.vue\";\nimport NotifItemQuantity from \"../Components/Notification/NotifSuccessItemQuantity.vue\";\nimport NotifRenameBoxLabel from \"../Components/Notification/NotifSuccessRenameBoxLabel.vue\";\nimport NotifSubmitTransaction from \"../Components/Notification/NotifSuccessSubmitTransaction.vue\";\nimport Swal from \"sweetalert2\";\nimport { Table, TableColumn } from \"element-ui\";\nimport axiosClient from \"../../../../axios\";\nimport EditBoxLabelModal from \"./PullOutRequests/ModalPullOut/EditBoxLabelModal.vue\";\nimport TransactionReceiptModal from \"./PullOutRequests/ModalPullOut/TransactionReceiptModal.vue\";\nimport DraftModal from \"./PullOutRequests/ModalPullOut/DraftModal.vue\";\nimport linkName from \"../../../../linkName\";\nimport ConfirmationSubmitPullOutModal from \"./PullOutRequests/ModalPullOut/ConfirmationSubmitPullOutModal.vue\";\n\nVue.use(Table);\nVue.use(TableColumn);\n\nexport default {\n  components: {\n    [DatePicker.name]: DatePicker,\n    [TimeSelect.name]: TimeSelect,\n    [Slider.name]: Slider,\n    [Tag.name]: Tag,\n    [Input.name]: Input,\n    [Button.name]: Button,\n    [Option.name]: Option,\n    [Select.name]: Select,\n    PSwitch,\n    PProgress,\n    TabPane,\n    Tabs,\n    CollapseItem,\n    Collapse,\n    Card,\n    NotificationTemplate,\n    NotifAddBoxLabel,\n    NotifAddItem,\n    NotifDeleteBoxLabel,\n    NotifDeleteItem,\n    NotifDraftSave,\n    NotifItemChangeBoxLabel,\n    NotifItemQuantity,\n    NotifRenameBoxLabel,\n    NotifSubmitTransaction,\n    EditBoxLabelModal,\n    TransactionReceiptModal,\n    DraftModal,\n    ConfirmationSubmitPullOutModal,\n  },\n  data() {\n    return {\n      transferredData: \"\",\n      isCompany: false,\n      isChainCode: true,\n      isBranchName: true,\n      isTransactionType: true,\n      isShowButton: false,\n      itemCodeList: [],\n      isEditBLDisabled: false,\n      isBoxLabel: false,\n      isItem: false,\n      isAddItem: true,\n      isDisabledSubmit: true,\n      showItemInput: \"\",\n      companyList: [],\n      chainCodeList: [],\n      branchNameList: [],\n      newTransaction: {\n        //input variable\n        company: \"\",\n        chainCode: \"\",\n        branchName: \"\",\n        transactionType: \"\",\n        boxLabels: [], //list of inputted box label\n        items: [], //list of inputted item\n      },\n      newItemInputBox: [],\n      isValid: {\n        company: false,\n        chainCode: false,\n        branchName: false,\n        transactionType: false,\n        boxLabel: false,\n        item: false,\n      },\n      hoveredRow: null,\n\n      transactionTypeList: [\n        { value: \"CPO - BranchDisposal\", label: \"Concess Pull-Out Item Disposal\" },\n        { value: \"CPO - Store\", label: \"Concess Pull-Out - Store\" },\n        { value: \"CPO - Warehouse\", label: \"Concess Pull-Out - Warehouse\" },\n        { value: \"CPO - Warehouse(DC)\", label: \"Concess Direct Pull-Out\" },\n      ],\n      newBoxLabel: \"\",\n      newItemInput: \"\",\n      newBrand: \"\",\n      newItemDescription: \"\",\n      newStyleCode: \"\",\n      newItemCode: \"\",\n      notifications: {\n        topCenter: false,\n      },\n      modals: {\n        classic: false,\n        notice: false,\n        mini: false,\n      },\n      isNewBoxLabel: false,\n      isNewItem: false,\n      isRightCode: false,\n      transferTransactionID: \"\",\n      itemss: [\n        { id: 1, name: \"Item 1\" },\n        { id: 2, name: \"Item 2\" },\n        { id: 1, name: \"Item 3\" },\n        { id: 3, name: \"Item 4\" },\n        { id: 2, name: \"Item 5\" },\n      ],\n      uniqueItemss: [],\n      duplicateItemss: [],\n      isDenied: true,\n    };\n  },\n  mounted() {\n    const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n    const tooltipList = [...tooltipTriggerList].map(\n      (tooltipTriggerEl) => new bootstrap.Tooltip(tooltipTriggerEl)\n    );\n    // this.processData();\n    this.fetchEdit();\n    this.fetchCompany();\n    if (window.resolveRouteChange) {\n      window.resolveRouteChange();\n      window.resolveRouteChange = null;\n    }\n    linkName.val = \"Pull-Out Requisition Form\";\n  },\n  watch: {\n    newTransaction: {\n      handler(val) {\n        this.validateSubmit();\n      },\n      deep: true,\n    },\n    \"newTransaction.boxLabels\": function (val, oldVal) {\n      this.enableDropDowns();\n    },\n    \"newTransaction.company\": function (val, oldVal) {\n      this.showButtons();\n    },\n    \"newTransaction.chainCode\": function (val, oldVal) {\n      this.showButtons();\n    },\n    \"newTransaction.branchName\": function (val, oldVal) {\n      this.showButtons();\n    },\n    \"newTransaction.transactionType\": function (val, oldVal) {\n      this.showButtons();\n    },\n  },\n  methods: {\n    numberOnly($event) {\n      let keyCode = $event.keyCode ? $event.keyCode : $event.which;\n      if (keyCode < 48 || keyCode > 57) {\n        // 46 is dot\n        $event.preventDefault();\n      }\n    },\n    validateSubmit() {\n      let uniqueItems = [\n        ...new Set(this.newTransaction.items.map((item) => item.boxNumber)),\n      ];\n      let itemsValidation = false;\n      for (let j in this.newTransaction.boxLabels) {\n        for (let i in uniqueItems) {\n          if (uniqueItems[i] == this.newTransaction.boxLabels[j].id) {\n            itemsValidation = true;\n            break;\n          } else itemsValidation = false;\n        }\n      }\n      for (let x in this.newTransaction.items)\n        if (this.newTransaction.items[x].quantity == 0) {\n          itemsValidation = false;\n          break;\n        }\n      if (!itemsValidation) {\n        let tooltip = bootstrap.Tooltip.getInstance(\"#submitBTN\");\n        tooltip._config.title = \"No items should have a quantity with 0.\";\n        tooltip.update();\n      }\n      if (\n        this.newTransaction.company &&\n        this.newTransaction.chainCode &&\n        this.newTransaction.branchName &&\n        this.newTransaction.transactionType &&\n        this.newTransaction.boxLabels.length > 0 &&\n        itemsValidation\n      )\n        this.isDisabledSubmit = false;\n      else this.isDisabledSubmit = true;\n    },\n    editingBoxLabel({ index, value, tempBL }) {\n      if (value) this.newTransaction.boxLabels[index].boxLabel = value;\n      else this.newTransaction.boxLabels[index].boxLabel = tempBL;\n    },\n    enableDropDowns() {\n      if (this.newTransaction.boxLabels.length == 0) {\n        this.isCompany = false;\n        this.isChainCode = false;\n        this.isBranchName = false;\n        this.isTransactionType = false;\n        this.isEditBLDisabled = true;\n        console.log(this.newTransaction.boxLabels.length);\n      } else this.isEditBLDisabled = false;\n    },\n    showButtons() {\n      if (\n        this.newTransaction.company &&\n        this.newTransaction.chainCode &&\n        this.newTransaction.branchName &&\n        this.newTransaction.transactionType\n      ) {\n        this.isShowButton = true;\n        if (this.newTransaction.boxLabels.length == 0) this.isEditBLDisabled = true;\n        else this.isEditBLDisabled = false;\n      } else this.isShowButton = false;\n    },\n    fetchEdit() {\n      try {\n        const uri = window.location.href;\n        var transactionID = uri.split(\"?\")[1];\n        var id = transactionID.split(\"=\")[1].split(\"&\")[0];\n        console.log(\"ID\", id);\n        console.log(\"Company\", transactionID.split(\"=\")[2]);\n        var company = transactionID.split(\"=\")[2];\n        axiosClient\n          .get(\"/fetchEditDraftBranch\", {\n            params: {\n              company: company,\n              plID: id,\n            },\n          })\n          .then((response) => {\n            console.log(\"Edit Branch:\", response.data, this.itemss);\n            this.newTransaction.company = response.data[0].company;\n            this.newTransaction.branchName = response.data[0].branchName;\n            this.newTransaction.chainCode = response.data[0].chainCode;\n            this.newTransaction.transactionType = response.data[0].transactionType;\n\n            if (response.data[0].status == \"denied\") {\n              this.isDenied = false;\n            }\n            axiosClient\n              .get(\"/fetchEditDraftItem\", {\n                params: {\n                  company: company,\n                  plID: id,\n                },\n              })\n              .then((response) => {\n                console.log(\"Edit Item:\", response.data);\n                for (var x = 0; x < response.data.length; x++) {\n                  this.newTransaction.items.push(response.data[x]);\n                  console.log(\"New Items:\", this.newTransaction.items);\n                }\n\n                const idMap = new Map();\n\n                this.newTransaction.items.forEach((item) => {\n                  if (!idMap.has(item.id)) {\n                    // Unique ID\n                    idMap.set(item.id, true);\n                    this.newTransaction.boxLabels.push({\n                      id: item.boxNumber,\n                      boxLabel: item.boxLabel,\n                    });\n                    this.newItemInputBox.push({\n                      id: item.boxNumber,\n                    });\n                  }\n                });\n                console.log(\"Edit Labels:\", this.newTransaction.boxLabels);\n\n                console.log(\n                  \"this.newTransaction.transactionType:\",\n                  this.newTransaction.transactionType\n                );\n\n                if (this.newTransaction.company) {\n                  this.isCompany = false;\n                  this.isChainCode = false;\n                  this.fetchCompany();\n                  this.fetchChainCode();\n                }\n\n                if (this.newTransaction.chainCode) {\n                  this.isChainCode = false;\n                  this.isBranchName = false;\n                  this.fetchChainName();\n                  this.fetchChainCode();\n                }\n\n                if (this.newTransaction.branchName) {\n                  this.isBranchName = false;\n                  this.isTransactionType = false;\n                  this.fetchChainName();\n                }\n\n                if (this.newTransaction.transactionType) {\n                  // console.log(\"Yes\", this.isShowButton);\n                  this.isCompany = false;\n                  this.isChainCode = false;\n                  this.isBranchName = false;\n                  this.isTransactionType = false;\n                  // this.isShowButton = true;\n                  // console.log(\"Yes 2\", this.isShowButton);\n                }\n\n                if (this.newTransaction.items.length) {\n                  console.log(\"Disable\", this.newTransaction.items.length);\n                  this.isCompany = true;\n                  this.isChainCode = true;\n                  this.isBranchName = true;\n                  this.isTransactionType = true;\n                  // this.isShowButton = true;\n                }\n              })\n              .catch((error) => {\n                console.error(error);\n              });\n          })\n          .catch((error) => {\n            console.error(error);\n          });\n      } catch {\n        console.log(\"No Edit\");\n      }\n    },\n\n    updateData(updatedData) {\n      // this.newTransaction.boxLabels = updatedData;\n      console.log(\"das\", updatedData);\n    },\n    openModal(data) {\n      this.transferredData = data;\n    },\n    closeModal() {\n      this.transferredData = \"\";\n    },\n    showButton(itemId) {\n      this.hoveredRow = itemId;\n    },\n    hideButton(itemId) {\n      this.hoveredRow = null;\n    },\n    removeItem(code, boxNumber) {\n      this.validateSubmit();\n      console.log(\"New DATAs\", code, boxNumber);\n      this.newTransaction.items = this.newTransaction.items.filter(\n        (item) => item.code !== code || item.boxNumber !== boxNumber\n      );\n\n      this.notifyVue(\"DeleteItem\", \"bottom\", \"right\");\n\n      // alert(\"Your data: \" + JSON.stringify(data));\n\n      // console.log(\"New DATA\", data);\n    },\n    fetchItems() {\n      if (this.newItemInput.length >= 4) {\n        if (\n          this.newTransaction.company == \"NBFI\" ||\n          this.newTransaction.company == \"CMC\" ||\n          this.newTransaction.company == \"ASC\"\n        ) {\n          axiosClient\n            .get(\"/fetchItemsNBFI\", {\n              params: {\n                ItemNo: this.newItemInput,\n              },\n            }) // Make a GET request to the specified URL\n            .then((response) => {\n              console.log(\"Item Code Response: \", response.data);\n              this.itemCodeList = response.data; // Update the 'data' variable with the retrieved data\n\n              // // this.itemCodeArray = Object.keys(this.itemCodeList).map((ItemNo) => ({\n              // //   ItemNo: ItemNo,\n              // // }));\n              //     console.log(\"Success Array Item: \", this.itemCodeArray);\n              //    console.log(\"Success Item: \", response.data);\n              //this.validateItemCode();\n            })\n            .catch((error) => {\n              // console.error(error.reponse); // Handle any errors that may occur\n            });\n        } else {\n          axiosClient\n            .get(\"/fetchItems\", {\n              params: {\n                ItemNo: this.newItemInput,\n              },\n            }) // Make a GET request to the specified URL\n            .then((response) => {\n              console.log(\"Item Code Response: \", response.data);\n              this.itemCodeList = response.data; // Update the 'data' variable with the retrieved data\n\n              // // this.itemCodeArray = Object.keys(this.itemCodeList).map((ItemNo) => ({\n              // //   ItemNo: ItemNo,\n              // // }));\n              //     console.log(\"Success Array Item: \", this.itemCodeArray);\n              //    console.log(\"Success Item: \", response.data);\n              //this.validateItemCode();\n            })\n            .catch((error) => {\n              // console.error(error.reponse); // Handle any errors that may occur\n            });\n        }\n      }\n    },\n    compareItemCode() {\n      let value = this.newItemInput;\n      if (value.indexOf(\" - \") >= 0) {\n        let parts = value.split(\" - \");\n        this.newItemInput = parts[0];\n      }\n      // console.log(\"Length Item Code:\", this.newItemCode.length > 16);\n      if (this.newItemInput.length > 16) {\n        // this.showTooltip = true;\n        this.newItemInput = this.newItemInput.slice(0, 16);\n      } else {\n        // this.showTooltip = false;\n      }\n      axiosClient\n        .get(\"/compareItemCode\", {\n          params: {\n            companyType: this.newTransaction.company,\n            ItemNo: this.newItemInput,\n          },\n        })\n        .then((response) => {\n          console.log(\"Success Item No:\", response.data);\n          console.log(\"Success Item Description\", response.data[0].ItemDescription);\n          this.newItemCode = response.data[0].ItemNo;\n          this.newItemDescription = response.data[0].ItemDescription;\n          this.newStyleCode = response.data[0].StyleCode;\n          // console.log(\n          //   \"Convert to String Item Description\",\n          //   response.data[0].ItemDescription.toString()\n          // );\n          let brandCode = response.data[0].ItemNo.toString().substr(1, 2);\n\n          // console.log(\"Brand Code\", brandCode);\n\n          axiosClient\n            .get(\"/fetchBrands\", {\n              params: {\n                companyType: this.newTransaction.company,\n                brandCode: brandCode,\n              },\n            })\n            .then((response) => {\n              console.log(\"Success\", response.data);\n              this.newBrand = response.data[0].brandNames;\n              // console.log(\"Box Data:\", this.boxes);\n              // console.log(\"Box Count:\", this.boxes.length);\n              // if (this.boxes.length == 1) {\n              //   this.newItemBoxType = this.boxes[0].boxType + \"-\" + this.boxes[0].id;\n              //   // console.log(\"TEst\", this.boxes[0].boxType);\n              // }\n              // this.$refs.Quantity.focus();\n            })\n            .catch((error) => {\n              console.error(error);\n            });\n        })\n        .catch((error) => {\n          this.missItemCode = 0;\n          !this.newItemInput ? true : (this.isRightCode = true);\n          console.log(\"Not Equal\");\n          console.error(error);\n        });\n    },\n    handleQuantity(item) {\n      console.log(\"Item Quantity\", item.quantity);\n      if (!item.quantity) {\n        console.log(\"Empty\");\n        item.quantity = 0;\n      }\n      this.notifyVue(\"ItemQuantity\", \"bottom\", \"right\");\n    },\n    notifyVue(notify, verticalAlign, horizontalAlign) {\n      var notification = \"\";\n      let notifType = \"\";\n\n      if (notify === \"AddBoxLabel\") {\n        notification = NotifAddBoxLabel;\n        notifType = \"success\";\n      } else if (notify === \"AddItem\") {\n        notification = NotifAddItem;\n        notifType = \"success\";\n      } else if (notify === \"DeleteBoxLabel\") {\n        notification = NotifDeleteBoxLabel;\n        notifType = \"danger\";\n      } else if (notify === \"DeleteItem\") {\n        notification = NotifDeleteItem;\n        notifType = \"danger\";\n      } else if (notify === \"DraftSave\") {\n        notification = NotifDraftSave;\n        notifType = \"success\";\n      } else if (notify === \"ChangeBoxLabel\") {\n        notification = NotifItemChangeBoxLabel;\n        notifType = \"success\";\n      } else if (notify === \"ItemQuantity\") {\n        notification = NotifItemQuantity;\n        notifType = \"success\";\n      } else if (notify === \"RenameBoxLabel\") {\n        notification = NotifRenameBoxLabel;\n        notifType = \"success\";\n      } else {\n        notification = NotifSubmitTransaction;\n        notifType = \"success\";\n      }\n\n      this.$notify({\n        component: notification,\n        // icon: \"nc-icon nc-bell-55\",\n        horizontalAlign: horizontalAlign,\n        verticalAlign: verticalAlign,\n        type: notifType,\n        props: {\n          customValue: \"Success\",\n        },\n      });\n    },\n    fetchCompany() {\n      axiosClient\n        .get(\"/fetchCompany\")\n        .then((response) => {\n          console.log(\"Company Response:\", response.data);\n          this.companyList = response.data;\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    },\n    fetchChainCode() {\n      axiosClient\n        .get(\"/fetchChain\", {\n          params: {\n            company: this.newTransaction.company,\n          },\n        })\n        .then((response) => {\n          console.log(\"Chain Code Response:\", response.data);\n          this.chainCodeList = response.data;\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n      // this.notifyVue(\"bottom\", \"right\");\n      this.isChainCode = false;\n    },\n    fetchChainName() {\n      axiosClient\n        .get(\"/fetchChainName\", {\n          params: {\n            chainCode: this.newTransaction.chainCode,\n          },\n        })\n        .then((response) => {\n          console.log(\"Chain Name Response:\", response.data);\n          this.branchNameList = response.data;\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n      this.isBranchName = false;\n    },\n    addItem(id) {\n      this.isItem = false;\n      this.isAddItem = false;\n      this.showItemInput = id;\n      console.log(\"clicked ID:\", this.showItemInput);\n    },\n    saveItem(boxID) {\n      this.isNewItem = !this.newItemInput ? true : false;\n      console.log(\"item\", this.newItemInput);\n      console.log(\"condition\", this.isNewItem);\n\n      if (this.isNewItem) {\n        this.isRightCode = false;\n        return 0;\n      }\n\n      console.log(this.newTransaction.items.length);\n      console.log(\"Items: \", this.newTransaction.items);\n\n      // let str = label.toLowerCase();\n      console.log(\"Item No:\", this.newItemCode);\n      console.log(\"Item Description:\", this.newItemDescription);\n      console.log(\"Style Code:\", this.newStyleCode);\n      axiosClient\n        .get(\"/fetchSameItem\", {\n          params: {\n            company: this.newTransaction.company,\n            ItemCode: this.newItemCode,\n            ItemDescription: this.newItemDescription,\n            StyleCode: this.newStyleCode,\n          },\n        })\n        .then((response) => {\n          console.log(\"Same Item:\", response.data);\n          for (var x = 0; x < response.data.length; x++) {\n            var flag = true;\n\n            for (var i = 0; i < this.newTransaction.items.length; i++) {\n              if (\n                this.newTransaction.items[i].code == response.data[x].ItemNo &&\n                this.newTransaction.items[i].boxNumber == boxID\n              ) {\n                this.newTransaction.items[i].quantity =\n                  parseInt(this.newTransaction.items[x].quantity) + 1;\n                flag = false;\n                break;\n              }\n            }\n            if (flag) {\n              let tempItem = {\n                code: response.data[x].ItemNo,\n                description: response.data[x].ItemDescription,\n                categorybrand: this.newBrand,\n                quantity: 0,\n                size: response.data[x].Size,\n                color: response.data[x].Color,\n                // boxLabel: label,\n                boxNumber: boxID,\n              };\n              this.newTransaction.items.push(tempItem);\n            }\n            this.isRightCode = false;\n            this.isItem = false;\n            this.isAddItem = true;\n            this.newItemInput = \"\";\n            this.showItemInput = \"\";\n            this.notifyVue(\"AddItem\", \"bottom\", \"right\");\n          }\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n\n      console.log(\"Items: \", this.newTransaction.items);\n\n      // console.log(this.newListBoxLabel);\n    },\n    cancelItem() {\n      this.isRightCode = false;\n      this.isNewItem = false;\n      this.isItem = false;\n      this.isAddItem = true;\n      this.showItemInput = \"\";\n      this.newItemInput = \"\";\n    },\n    addBoxLabel() {\n      this.isBoxLabel = true;\n      this.isEditBLDisabled = true;\n    },\n    saveBoxLabel() {\n      this.isNewBoxLabel = !this.newBoxLabel ? true : false;\n\n      if (this.isNewBoxLabel) {\n        return 0;\n      }\n      this.isBoxLabel = false;\n      console.log(this.newTransaction.boxLabels.length);\n      let tempBoxLabel = [];\n\n      if (this.newTransaction.boxLabels.length == 0) {\n        tempBoxLabel = {\n          id: this.newTransaction.boxLabels.length + 1,\n          boxNumber: this.newTransaction.boxLabels.length + 1,\n          boxLabel: this.newBoxLabel,\n        };\n      } else {\n        tempBoxLabel = {\n          id:\n            this.newTransaction.boxLabels[this.newTransaction.boxLabels.length - 1].id +\n            1,\n          boxNumber: this.newTransaction.boxLabels.length + 1,\n          boxLabel: this.newBoxLabel,\n        };\n      }\n\n      let tempItem = [];\n\n      if (this.newTransaction.boxLabels.length == 0) {\n        tempItem = {\n          id: this.newTransaction.boxLabels.length + 1,\n        };\n      } else {\n        tempItem = {\n          id:\n            this.newTransaction.boxLabels[this.newTransaction.boxLabels.length - 1].id +\n            1,\n        };\n      }\n\n      this.newTransaction.boxLabels.push(tempBoxLabel);\n      this.newItemInputBox.push(tempItem);\n      this.newBoxLabel = \"\";\n      // this.notifyVue(\"AddBoxLabel\", \"bottom\", \"right\");\n      // console.log(\"Console:\", this.newTransaction.boxLabels);\n      //Disable the above select buttons\n      this.isCompany = true;\n      this.isChainCode = true;\n      this.isBranchName = true;\n      this.isTransactionType = true;\n      this.notifyVue(\"AddBoxLabel\", \"bottom\", \"right\");\n      this.isEditBLDisabled = false;\n    },\n    cancelBoxLabel() {\n      this.isNewBoxLabel = false;\n      this.isBoxLabel = false;\n      this.newBoxLabel = \"\";\n      if (this.newTransaction.boxLabels.length == 0) this.isEditBLDisabled = true;\n      else this.isEditBLDisabled = false;\n    },\n    submit(confirmation) {\n      if (confirmation)\n        try {\n          const uri = window.location.href;\n          var transactionID = uri.split(\"?\")[1];\n          var id = transactionID.split(\"=\")[1].split(\"&\")[0];\n\n          this.isValid.company = !this.newTransaction.company ? true : false;\n          this.isValid.chainCode = !this.newTransaction.chainCode ? true : false;\n          this.isValid.branchName = !this.newTransaction.branchName ? true : false;\n          this.isValid.transactionType = !this.newTransaction.transactionType\n            ? true\n            : false;\n          this.isValid.boxLabel = !this.newTransaction.boxLabels.length ? true : false;\n          this.isValid.item = !this.newTransaction.items.length ? true : false;\n\n          console.log(\"Company: \", this.isValid.company);\n\n          console.log(\"company\", this.newTransaction.company);\n          // alert(\"Your data: \" + JSON.stringify(this.newTransaction));\n\n          if (\n            sessionStorage.getItem(\"Position\") == \"Agent\" ||\n            sessionStorage.getItem(\"Position\") == \"Admin\"\n          ) {\n            var status = \"endorsement\";\n          } else {\n            var status = \"unprocessed\";\n          }\n          axiosClient\n            .post(\"/updatePullOutBranchRequest\", {\n              id: id,\n              chainCode: this.newTransaction.chainCode,\n              companyType: this.newTransaction.company,\n              branchName: this.newTransaction.branchName,\n              transactionType: this.newTransaction.transactionType,\n              email: sessionStorage.getItem(\"Email\"),\n              status: status,\n            })\n            .then((response) => {\n              console.log(\"Success Branch Save: \", response.data);\n              this.transferTransactionID = id;\n\n              for (var x = 0; x < this.newTransaction.items.length; x++) {\n                let labelBox = \"\";\n                for (let box of this.newTransaction.boxLabels) {\n                  if (box.id == this.newTransaction.items[x].boxNumber) {\n                    labelBox = box.boxLabel;\n                  }\n                }\n                axiosClient\n                  .post(\"/updatePullOutItemRequest\", {\n                    plID: id,\n                    companyType: this.newTransaction.company,\n                    brand: this.newTransaction.items[x].categorybrand,\n                    boxNumber: this.newTransaction.items[x].boxNumber,\n                    boxLabel: labelBox,\n                    itemCode: this.newTransaction.items[x].code,\n                    quantity: this.newTransaction.items[x].quantity,\n                    email: sessionStorage.getItem(\"Email\"),\n                    status: status,\n                  })\n                  .then((response) => {\n                    console.log(\"Success Items Save: \", response.data);\n                    // window.location.href =\n                    //   \"http://192.168.0.7:4040/#/pull-out/requisition-form\";\n                  })\n                  .catch((error) => {\n                    console.error(error);\n                  });\n              }\n              const transactionModal = new bootstrap.Modal(\"#transactionReceipt\");\n              transactionModal.show();\n            })\n            .catch((error) => {\n              console.error(error);\n            });\n        } catch {\n          this.isValid.company = !this.newTransaction.company ? true : false;\n          this.isValid.chainCode = !this.newTransaction.chainCode ? true : false;\n          this.isValid.branchName = !this.newTransaction.branchName ? true : false;\n          this.isValid.transactionType = !this.newTransaction.transactionType\n            ? true\n            : false;\n          this.isValid.boxLabel = !this.newTransaction.boxLabels.length ? true : false;\n          this.isValid.item = !this.newTransaction.items.length ? true : false;\n\n          console.log(\"Company: \", this.isValid.company);\n\n          console.log(\"company\", this.newTransaction.company);\n          // alert(\"Your data: \" + JSON.stringify(this.newTransaction));\n          axiosClient\n            .post(\"/savePullOutBranchRequest\", {\n              chainCode: this.newTransaction.chainCode,\n              companyType: this.newTransaction.company,\n              branchName: this.newTransaction.branchName,\n              transactionType: this.newTransaction.transactionType,\n              email: sessionStorage.getItem(\"Email\"),\n              status: \"unprocessed\",\n            })\n            .then((response) => {\n              console.log(\"Success Branch Save: \", response.data);\n              this.transferTransactionID = response.data.id;\n\n              for (var x = 0; x < this.newTransaction.items.length; x++) {\n                let labelBox = \"\";\n                for (let box of this.newTransaction.boxLabels) {\n                  if (box.id == this.newTransaction.items[x].boxNumber) {\n                    labelBox = box.boxLabel;\n                  }\n                }\n                axiosClient\n                  .post(\"/savePullOutItemRequest\", {\n                    plID: response.data.id,\n                    companyType: this.newTransaction.company,\n                    brand: this.newTransaction.items[x].categorybrand,\n                    boxNumber: this.newTransaction.items[x].boxNumber,\n                    boxLabel: labelBox,\n                    itemCode: this.newTransaction.items[x].code,\n                    quantity: this.newTransaction.items[x].quantity,\n                    email: sessionStorage.getItem(\"Email\"),\n                    status: \"unprocessed\",\n                  })\n                  .then((response) => {\n                    console.log(\"Success Items Save: \", response.data);\n                  })\n                  .catch((error) => {\n                    console.error(error);\n                  });\n              }\n              const transactionModal = new bootstrap.Modal(\"#transactionReceipt\");\n              transactionModal.show();\n            })\n            .catch((error) => {\n              console.error(error);\n            });\n        }\n    },\n    draft() {\n      try {\n        const uri = window.location.href;\n        var transactionID = uri.split(\"?\")[1];\n        var id = transactionID.split(\"=\")[1].split(\"&\")[0];\n\n        axiosClient\n          .post(\"/updatePullOutBranchRequest\", {\n            id: id,\n            chainCode: this.newTransaction.chainCode,\n            companyType: this.newTransaction.company,\n            branchName: this.newTransaction.branchName,\n            transactionType: this.newTransaction.transactionType,\n            status: \"draft\",\n            email: sessionStorage.getItem(\"Email\"),\n          })\n          .then((response) => {\n            console.log(\"Success Branch Save: \", response.data);\n            console.log(\"Items Length:\", this.newTransaction.items.length);\n            for (var x = 0; x < this.newTransaction.items.length; x++) {\n              let labelBox = \"\";\n              for (let box of this.newTransaction.boxLabels) {\n                if (box.id == this.newTransaction.items[x].boxNumber) {\n                  labelBox = box.boxLabel;\n                }\n              }\n              axiosClient\n                .post(\"/updatePullOutItemRequest\", {\n                  plID: id,\n                  companyType: this.newTransaction.company,\n                  brand: this.newTransaction.items[x].categorybrand,\n                  boxNumber: this.newTransaction.items[x].boxNumber,\n                  boxLabel: labelBox,\n                  itemCode: this.newTransaction.items[x].code,\n                  quantity: this.newTransaction.items[x].quantity,\n                  status: \"draft\",\n                  email: sessionStorage.getItem(\"Email\"),\n                })\n                .then((response) => {\n                  console.log(\"Success Items Save: \", response.data);\n                })\n                .catch((error) => {\n                  console.error(error);\n                });\n            }\n            const draftModal = new bootstrap.Modal(\"#draftModal\");\n            draftModal.show();\n          })\n          .catch((error) => {\n            console.error(error);\n          });\n      } catch {\n        axiosClient\n          .post(\"/savePullOutBranchRequest\", {\n            chainCode: this.newTransaction.chainCode,\n            companyType: this.newTransaction.company,\n            branchName: this.newTransaction.branchName,\n            transactionType: this.newTransaction.transactionType,\n            status: \"draft\",\n            email: sessionStorage.getItem(\"Email\"),\n          })\n          .then((response) => {\n            console.log(\"Success Branch Save: \", response.data);\n\n            for (var x = 0; x < this.newTransaction.items.length; x++) {\n              let labelBox = \"\";\n              for (let box of this.newTransaction.boxLabels) {\n                if (box.id == this.newTransaction.items[x].boxNumber) {\n                  labelBox = box.boxLabel;\n                }\n              }\n              axiosClient\n                .post(\"/savePullOutItemRequest\", {\n                  plID: response.data.id,\n                  companyType: this.newTransaction.company,\n                  brand: this.newTransaction.items[x].categorybrand,\n                  boxNumber: this.newTransaction.items[x].boxNumber,\n                  boxLabel: labelBox,\n                  itemCode: this.newTransaction.items[x].code,\n                  quantity: this.newTransaction.items[x].quantity,\n                  status: \"draft\",\n                  email: sessionStorage.getItem(\"Email\"),\n                })\n                .then((response) => {\n                  console.log(\"Success Items Save: \", response.data);\n                })\n                .catch((error) => {\n                  console.error(error);\n                });\n            }\n            const draftModal = new bootstrap.Modal(\"#draftModal\");\n            draftModal.show();\n          })\n          .catch((error) => {\n            console.error(error);\n          });\n      }\n    },\n    editBoxLabel(code, quantity, boxNumber) {\n      this.validateSubmit();\n      console.log(\n        \"Item Code Edit:\",\n        code,\n        \" Quantity:\",\n        quantity,\n        \" Box Number\",\n        boxNumber\n      );\n      console.log(\" == : \", this.newTransaction.items);\n      var filteredItems = this.newTransaction.items.filter(\n        (item) => item.code === code && item.boxNumber === boxNumber\n      );\n\n      console.log(\"Filtered Items: \", filteredItems);\n      var uniqueItems = [];\n      filteredItems.forEach((item) => {\n        var existingItem = uniqueItems.find(\n          (uniqueItem) => uniqueItem.code === item.code\n        );\n        if (existingItem) {\n          existingItem.quantity += item.quantity;\n        } else {\n          uniqueItems.push({ ...item });\n        }\n      });\n      // The uniqueItems array will contain unique items based on itemCode, with quantities added up.\n      console.log(\"Unique Items: 1\", uniqueItems);\n      console.log(\"Unique Items: Code\", uniqueItems[0].code);\n      console.log(\"Unique Items: Box Number\", uniqueItems[0].boxNumber);\n\n      this.newTransaction.items = this.newTransaction.items.filter(\n        (item) =>\n          item.code !== uniqueItems[0].code || item.boxNumber !== uniqueItems[0].boxNumber\n      );\n      this.newTransaction.items.push(uniqueItems[0]);\n      this.notifyVue(\"ChangeBoxLabel\", \"bottom\", \"right\");\n    },\n  },\n};\n</script>\n<style>\n.el-select {\n  width: 100%;\n  background-color: white;\n  border: 20px;\n  border-color: blueviolet;\n}\n\n.btn-transparent {\n  background-color: transparent;\n  border: none;\n  color: #000000;\n}\n\n.btn-transparent:hover {\n  background-color: rgba(0, 0, 0, 0.1);\n  color: #ffffff;\n}\n\n.table-font-size {\n  font-size: 14px;\n}\n\n.table-input-box {\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n  padding: 14px;\n  border: 1px solid transparent;\n  transition: border-color 0.3s ease-in-out;\n  background-color: transparent;\n}\n\n.table-select-box {\n  /* border: 5px solid green !important; */\n  transition: border-color 0.3s ease-in-out;\n  /* background-color: yellow; */\n  border-radius: 0px !important;\n  background-color: transparent !important;\n}\n\n.table-select-box.el-select .el-input input {\n  border-radius: 0px !important;\n  border: 5px solid transparent !important;\n  background-color: transparent;\n}\n\ntd {\n  display: table-cell !important;\n  padding: 0px !important;\n  /* background-color: #111111 !important; */\n}\ntable {\n  border-collapse: collapse !important;\n}\n.bold-button {\n  font-weight: bold !important;\n}\n\n.input-datalist {\n  display: block !important;\n  width: 100% !important;\n  margin-bottom: 10px !important;\n  position: relative !important;\n  appearance: none !important;\n  font-weight: 400 !important;\n  background-clip: padding-box !important;\n  border: 1px solid #66615b !important;\n  border-radius: 5px !important;\n  padding: 9px !important;\n  outline: none;\n  /* border: 1pc solid gray; */\n}\n\n.table-delete-button {\n  background-color: transparent;\n  color: red;\n  border: none;\n  cursor: pointer;\n}\n\n.label-font {\n  color: red !important;\n}\n\n/* .table-delete:hover {\n  color: red !important;\n  cursor: pointer;\n} */\n</style>\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA4aA,SACAA,QAAA,EACAC,YAAA,EACAC,IAAA,EACAC,OAAA,EACAC,IAAA,EACAC,MAAA,QACA;AAEA,OAAAC,SAAA;AACA,OAAAC,OAAA;AACA,OAAAC,GAAA;AACA,OAAAC,oBAAA;AACA,OAAAC,gBAAA;AACA,OAAAC,YAAA;AACA,OAAAC,mBAAA;AACA,OAAAC,eAAA;AACA,OAAAC,cAAA;AACA,OAAAC,uBAAA;AACA,OAAAC,iBAAA;AACA,OAAAC,mBAAA;AACA,OAAAC,sBAAA;AACA,OAAAC,IAAA;AAEA,OAAAC,WAAA;AACA,OAAAC,iBAAA;AACA,OAAAC,uBAAA;AACA,OAAAC,UAAA;AACA,OAAAC,QAAA;AACA,OAAAC,8BAAA;AAEAjB,GAAA,CAAAkB,GAAA,CAAAC,MAAA;AACAnB,GAAA,CAAAkB,GAAA,CAAAE,YAAA;AAEA;EACAC,UAAA;IACA,CAAAC,WAAA,CAAAC,IAAA,GAAAD,WAAA;IACA,CAAAE,WAAA,CAAAD,IAAA,GAAAC,WAAA;IACA,CAAAC,OAAA,CAAAF,IAAA,GAAAE,OAAA;IACA,CAAAC,IAAA,CAAAH,IAAA,GAAAG,IAAA;IACA,CAAAC,MAAA,CAAAJ,IAAA,GAAAI,MAAA;IACA,CAAA9B,MAAA,CAAA0B,IAAA,GAAA1B,MAAA;IACA,CAAA+B,OAAA,CAAAL,IAAA,GAAAK,OAAA;IACA,CAAAC,OAAA,CAAAN,IAAA,GAAAM,OAAA;IACA9B,OAAA;IACAD,SAAA;IACAH,OAAA;IACAD,IAAA;IACAD,YAAA;IACAD,QAAA;IACAI,IAAA;IACAK,oBAAA;IACAC,gBAAA;IACAC,YAAA;IACAC,mBAAA;IACAC,eAAA;IACAC,cAAA;IACAC,uBAAA;IACAC,iBAAA;IACAC,mBAAA;IACAC,sBAAA;IACAG,iBAAA;IACAC,uBAAA;IACAC,UAAA;IACAE;EACA;EACAa,KAAA;IACA;MACAC,eAAA;MACAC,SAAA;MACAC,WAAA;MACAC,YAAA;MACAC,iBAAA;MACAC,YAAA;MACAC,YAAA;MACAC,gBAAA;MACAC,UAAA;MACAC,MAAA;MACAC,SAAA;MACAC,gBAAA;MACAC,aAAA;MACAC,WAAA;MACAC,aAAA;MACAC,cAAA;MACAC,cAAA;QAEAC,OAAA;QACAC,SAAA;QACAC,UAAA;QACAC,eAAA;QACAC,SAAA;QACAC,KAAA;MACA;MACAC,eAAA;MACAC,OAAA;QACAP,OAAA;QACAC,SAAA;QACAC,UAAA;QACAC,eAAA;QACAK,QAAA;QACAC,IAAA;MACA;MACAC,UAAA;MAEAC,mBAAA,GACA;QAAAC,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,KAAA;MAAA,EACA;MACAC,WAAA;MACAC,YAAA;MACAC,QAAA;MACAC,kBAAA;MACAC,YAAA;MACAC,WAAA;MACAC,aAAA;QACAC,SAAA;MACA;MACAC,MAAA;QACAC,OAAA;QACAC,MAAA;QACAC,IAAA;MACA;MACAC,aAAA;MACAC,SAAA;MACAC,WAAA;MACAC,qBAAA;MACAC,MAAA,GACA;QAAAC,EAAA;QAAAxD,IAAA;MAAA,GACA;QAAAwD,EAAA;QAAAxD,IAAA;MAAA,GACA;QAAAwD,EAAA;QAAAxD,IAAA;MAAA,GACA;QAAAwD,EAAA;QAAAxD,IAAA;MAAA,GACA;QAAAwD,EAAA;QAAAxD,IAAA;MAAA,EACA;MACAyD,YAAA;MACAC,eAAA;MACAC,QAAA;IACA;EACA;EACAC,QAAA;IACA,MAAAC,kBAAA,GAAAC,QAAA,CAAAC,gBAAA;IACA,MAAAC,WAAA,OAAAH,kBAAA,EAAAI,GAAA,CACAC,gBAAA,QAAAC,SAAA,CAAAC,OAAA,CAAAF,gBAAA,CACA;IAEA,KAAAG,SAAA;IACA,KAAAC,YAAA;IACA,IAAAC,MAAA,CAAAC,kBAAA;MACAD,MAAA,CAAAC,kBAAA;MACAD,MAAA,CAAAC,kBAAA;IACA;IACA/E,QAAA,CAAAgF,GAAA;EACA;EACAC,KAAA;IACAlD,cAAA;MACAmD,QAAAF,GAAA;QACA,KAAAG,cAAA;MACA;MACAC,IAAA;IACA;IACA,qCAAAC,CAAAL,GAAA,EAAAM,MAAA;MACA,KAAAC,eAAA;IACA;IACA,mCAAAC,CAAAR,GAAA,EAAAM,MAAA;MACA,KAAAG,WAAA;IACA;IACA,qCAAAC,CAAAV,GAAA,EAAAM,MAAA;MACA,KAAAG,WAAA;IACA;IACA,sCAAAE,CAAAX,GAAA,EAAAM,MAAA;MACA,KAAAG,WAAA;IACA;IACA,2CAAAG,CAAAZ,GAAA,EAAAM,MAAA;MACA,KAAAG,WAAA;IACA;EACA;EACAI,OAAA;IACAC,WAAAC,MAAA;MACA,IAAAC,OAAA,GAAAD,MAAA,CAAAC,OAAA,GAAAD,MAAA,CAAAC,OAAA,GAAAD,MAAA,CAAAE,KAAA;MACA,IAAAD,OAAA,SAAAA,OAAA;QAEAD,MAAA,CAAAG,cAAA;MACA;IACA;IACAf,eAAA;MACA,IAAAgB,WAAA,IACA,OAAAC,GAAA,MAAArE,cAAA,CAAAM,KAAA,CAAAmC,GAAA,CAAA/B,IAAA,IAAAA,IAAA,CAAA4D,SAAA,GACA;MACA,IAAAC,eAAA;MACA,SAAAC,CAAA,SAAAxE,cAAA,CAAAK,SAAA;QACA,SAAAoE,CAAA,IAAAL,WAAA;UACA,IAAAA,WAAA,CAAAK,CAAA,UAAAzE,cAAA,CAAAK,SAAA,CAAAmE,CAAA,EAAAxC,EAAA;YACAuC,eAAA;YACA;UACA,OAAAA,eAAA;QACA;MACA;MACA,SAAAG,CAAA,SAAA1E,cAAA,CAAAM,KAAA,EACA,SAAAN,cAAA,CAAAM,KAAA,CAAAoE,CAAA,EAAAC,QAAA;QACAJ,eAAA;QACA;MACA;MACA,KAAAA,eAAA;QACA,IAAAK,OAAA,GAAAjC,SAAA,CAAAC,OAAA,CAAAiC,WAAA;QACAD,OAAA,CAAAE,OAAA,CAAAC,KAAA;QACAH,OAAA,CAAAI,MAAA;MACA;MACA,IACA,KAAAhF,cAAA,CAAAC,OAAA,IACA,KAAAD,cAAA,CAAAE,SAAA,IACA,KAAAF,cAAA,CAAAG,UAAA,IACA,KAAAH,cAAA,CAAAI,eAAA,IACA,KAAAJ,cAAA,CAAAK,SAAA,CAAA4E,MAAA,QACAV,eAAA,EAEA,KAAA5E,gBAAA,cACA,KAAAA,gBAAA;IACA;IACAuF,gBAAA;MAAAC,KAAA;MAAAtE,KAAA;MAAAuE;IAAA;MACA,IAAAvE,KAAA,OAAAb,cAAA,CAAAK,SAAA,CAAA8E,KAAA,EAAA1E,QAAA,GAAAI,KAAA,MACA,KAAAb,cAAA,CAAAK,SAAA,CAAA8E,KAAA,EAAA1E,QAAA,GAAA2E,MAAA;IACA;IACA5B,gBAAA;MACA,SAAAxD,cAAA,CAAAK,SAAA,CAAA4E,MAAA;QACA,KAAAhG,SAAA;QACA,KAAAC,WAAA;QACA,KAAAC,YAAA;QACA,KAAAC,iBAAA;QACA,KAAAG,gBAAA;QACA8F,OAAA,CAAAC,GAAA,MAAAtF,cAAA,CAAAK,SAAA,CAAA4E,MAAA;MACA,YAAA1F,gBAAA;IACA;IACAmE,YAAA;MACA,IACA,KAAA1D,cAAA,CAAAC,OAAA,IACA,KAAAD,cAAA,CAAAE,SAAA,IACA,KAAAF,cAAA,CAAAG,UAAA,IACA,KAAAH,cAAA,CAAAI,eAAA,EACA;QACA,KAAAf,YAAA;QACA,SAAAW,cAAA,CAAAK,SAAA,CAAA4E,MAAA,YAAA1F,gBAAA,aACA,KAAAA,gBAAA;MACA,YAAAF,YAAA;IACA;IACAwD,UAAA;MACA;QACA,MAAA0C,GAAA,GAAAxC,MAAA,CAAAyC,QAAA,CAAAC,IAAA;QACA,IAAAC,aAAA,GAAAH,GAAA,CAAAI,KAAA;QACA,IAAA3D,EAAA,GAAA0D,aAAA,CAAAC,KAAA,SAAAA,KAAA;QACAN,OAAA,CAAAC,GAAA,OAAAtD,EAAA;QACAqD,OAAA,CAAAC,GAAA,YAAAI,aAAA,CAAAC,KAAA;QACA,IAAA1F,OAAA,GAAAyF,aAAA,CAAAC,KAAA;QACA9H,WAAA,CACA+H,GAAA;UACAC,MAAA;YACA5F,OAAA,EAAAA,OAAA;YACA6F,IAAA,EAAA9D;UACA;QACA,GACA+D,IAAA,CAAAC,QAAA;UACAX,OAAA,CAAAC,GAAA,iBAAAU,QAAA,CAAAjH,IAAA,OAAAgD,MAAA;UACA,KAAA/B,cAAA,CAAAC,OAAA,GAAA+F,QAAA,CAAAjH,IAAA,IAAAkB,OAAA;UACA,KAAAD,cAAA,CAAAG,UAAA,GAAA6F,QAAA,CAAAjH,IAAA,IAAAoB,UAAA;UACA,KAAAH,cAAA,CAAAE,SAAA,GAAA8F,QAAA,CAAAjH,IAAA,IAAAmB,SAAA;UACA,KAAAF,cAAA,CAAAI,eAAA,GAAA4F,QAAA,CAAAjH,IAAA,IAAAqB,eAAA;UAEA,IAAA4F,QAAA,CAAAjH,IAAA,IAAAkH,MAAA;YACA,KAAA9D,QAAA;UACA;UACAtE,WAAA,CACA+H,GAAA;YACAC,MAAA;cACA5F,OAAA,EAAAA,OAAA;cACA6F,IAAA,EAAA9D;YACA;UACA,GACA+D,IAAA,CAAAC,QAAA;YACAX,OAAA,CAAAC,GAAA,eAAAU,QAAA,CAAAjH,IAAA;YACA,SAAA2F,CAAA,MAAAA,CAAA,GAAAsB,QAAA,CAAAjH,IAAA,CAAAkG,MAAA,EAAAP,CAAA;cACA,KAAA1E,cAAA,CAAAM,KAAA,CAAA4F,IAAA,CAAAF,QAAA,CAAAjH,IAAA,CAAA2F,CAAA;cACAW,OAAA,CAAAC,GAAA,oBAAAtF,cAAA,CAAAM,KAAA;YACA;YAEA,MAAA6F,KAAA,OAAAC,GAAA;YAEA,KAAApG,cAAA,CAAAM,KAAA,CAAA+F,OAAA,CAAA3F,IAAA;cACA,KAAAyF,KAAA,CAAAG,GAAA,CAAA5F,IAAA,CAAAsB,EAAA;gBAEAmE,KAAA,CAAAI,GAAA,CAAA7F,IAAA,CAAAsB,EAAA;gBACA,KAAAhC,cAAA,CAAAK,SAAA,CAAA6F,IAAA;kBACAlE,EAAA,EAAAtB,IAAA,CAAA4D,SAAA;kBACA7D,QAAA,EAAAC,IAAA,CAAAD;gBACA;gBACA,KAAAF,eAAA,CAAA2F,IAAA;kBACAlE,EAAA,EAAAtB,IAAA,CAAA4D;gBACA;cACA;YACA;YACAe,OAAA,CAAAC,GAAA,sBAAAtF,cAAA,CAAAK,SAAA;YAEAgF,OAAA,CAAAC,GAAA,CACA,wCACA,KAAAtF,cAAA,CAAAI,eACA;YAEA,SAAAJ,cAAA,CAAAC,OAAA;cACA,KAAAhB,SAAA;cACA,KAAAC,WAAA;cACA,KAAA4D,YAAA;cACA,KAAA0D,cAAA;YACA;YAEA,SAAAxG,cAAA,CAAAE,SAAA;cACA,KAAAhB,WAAA;cACA,KAAAC,YAAA;cACA,KAAAsH,cAAA;cACA,KAAAD,cAAA;YACA;YAEA,SAAAxG,cAAA,CAAAG,UAAA;cACA,KAAAhB,YAAA;cACA,KAAAC,iBAAA;cACA,KAAAqH,cAAA;YACA;YAEA,SAAAzG,cAAA,CAAAI,eAAA;cAEA,KAAAnB,SAAA;cACA,KAAAC,WAAA;cACA,KAAAC,YAAA;cACA,KAAAC,iBAAA;YAGA;YAEA,SAAAY,cAAA,CAAAM,KAAA,CAAA2E,MAAA;cACAI,OAAA,CAAAC,GAAA,iBAAAtF,cAAA,CAAAM,KAAA,CAAA2E,MAAA;cACA,KAAAhG,SAAA;cACA,KAAAC,WAAA;cACA,KAAAC,YAAA;cACA,KAAAC,iBAAA;YAEA;UACA,GACAsH,KAAA,CAAAC,KAAA;YACAtB,OAAA,CAAAsB,KAAA,CAAAA,KAAA;UACA;QACA,GACAD,KAAA,CAAAC,KAAA;UACAtB,OAAA,CAAAsB,KAAA,CAAAA,KAAA;QACA;MACA;QACAtB,OAAA,CAAAC,GAAA;MACA;IACA;IAEAsB,WAAAC,WAAA;MAEAxB,OAAA,CAAAC,GAAA,QAAAuB,WAAA;IACA;IACAC,UAAA/H,IAAA;MACA,KAAAC,eAAA,GAAAD,IAAA;IACA;IACAgI,WAAA;MACA,KAAA/H,eAAA;IACA;IACAgI,WAAAC,MAAA;MACA,KAAAtG,UAAA,GAAAsG,MAAA;IACA;IACAC,WAAAD,MAAA;MACA,KAAAtG,UAAA;IACA;IACAwG,WAAAC,IAAA,EAAA9C,SAAA;MACA,KAAAlB,cAAA;MACAiC,OAAA,CAAAC,GAAA,cAAA8B,IAAA,EAAA9C,SAAA;MACA,KAAAtE,cAAA,CAAAM,KAAA,QAAAN,cAAA,CAAAM,KAAA,CAAA+G,MAAA,CACA3G,IAAA,IAAAA,IAAA,CAAA0G,IAAA,KAAAA,IAAA,IAAA1G,IAAA,CAAA4D,SAAA,KAAAA,SACA;MAEA,KAAAgD,SAAA;IAKA;IACAC,WAAA;MACA,SAAAvG,YAAA,CAAAiE,MAAA;QACA,IACA,KAAAjF,cAAA,CAAAC,OAAA,cACA,KAAAD,cAAA,CAAAC,OAAA,aACA,KAAAD,cAAA,CAAAC,OAAA,WACA;UACApC,WAAA,CACA+H,GAAA;YACAC,MAAA;cACA2B,MAAA,OAAAxG;YACA;UACA,GACA+E,IAAA,CAAAC,QAAA;YACAX,OAAA,CAAAC,GAAA,yBAAAU,QAAA,CAAAjH,IAAA;YACA,KAAAO,YAAA,GAAA0G,QAAA,CAAAjH,IAAA;UAQA,GACA2H,KAAA,CAAAC,KAAA,KAEA;QACA;UACA9I,WAAA,CACA+H,GAAA;YACAC,MAAA;cACA2B,MAAA,OAAAxG;YACA;UACA,GACA+E,IAAA,CAAAC,QAAA;YACAX,OAAA,CAAAC,GAAA,yBAAAU,QAAA,CAAAjH,IAAA;YACA,KAAAO,YAAA,GAAA0G,QAAA,CAAAjH,IAAA;UAQA,GACA2H,KAAA,CAAAC,KAAA,KAEA;QACA;MACA;IACA;IACAc,gBAAA;MACA,IAAA5G,KAAA,QAAAG,YAAA;MACA,IAAAH,KAAA,CAAA6G,OAAA;QACA,IAAAC,KAAA,GAAA9G,KAAA,CAAA8E,KAAA;QACA,KAAA3E,YAAA,GAAA2G,KAAA;MACA;MAEA,SAAA3G,YAAA,CAAAiE,MAAA;QAEA,KAAAjE,YAAA,QAAAA,YAAA,CAAA4G,KAAA;MACA,QAEA;MACA/J,WAAA,CACA+H,GAAA;QACAC,MAAA;UACAgC,WAAA,OAAA7H,cAAA,CAAAC,OAAA;UACAuH,MAAA,OAAAxG;QACA;MACA,GACA+E,IAAA,CAAAC,QAAA;QACAX,OAAA,CAAAC,GAAA,qBAAAU,QAAA,CAAAjH,IAAA;QACAsG,OAAA,CAAAC,GAAA,6BAAAU,QAAA,CAAAjH,IAAA,IAAA+I,eAAA;QACA,KAAA1G,WAAA,GAAA4E,QAAA,CAAAjH,IAAA,IAAAyI,MAAA;QACA,KAAAtG,kBAAA,GAAA8E,QAAA,CAAAjH,IAAA,IAAA+I,eAAA;QACA,KAAA3G,YAAA,GAAA6E,QAAA,CAAAjH,IAAA,IAAAgJ,SAAA;QAKA,IAAAC,SAAA,GAAAhC,QAAA,CAAAjH,IAAA,IAAAyI,MAAA,CAAAS,QAAA,GAAAC,MAAA;QAIArK,WAAA,CACA+H,GAAA;UACAC,MAAA;YACAgC,WAAA,OAAA7H,cAAA,CAAAC,OAAA;YACA+H,SAAA,EAAAA;UACA;QACA,GACAjC,IAAA,CAAAC,QAAA;UACAX,OAAA,CAAAC,GAAA,YAAAU,QAAA,CAAAjH,IAAA;UACA,KAAAkC,QAAA,GAAA+E,QAAA,CAAAjH,IAAA,IAAAoJ,UAAA;QAQA,GACAzB,KAAA,CAAAC,KAAA;UACAtB,OAAA,CAAAsB,KAAA,CAAAA,KAAA;QACA;MACA,GACAD,KAAA,CAAAC,KAAA;QACA,KAAAyB,YAAA;QACA,MAAApH,YAAA,eAAAa,WAAA;QACAwD,OAAA,CAAAC,GAAA;QACAD,OAAA,CAAAsB,KAAA,CAAAA,KAAA;MACA;IACA;IACA0B,eAAA3H,IAAA;MACA2E,OAAA,CAAAC,GAAA,kBAAA5E,IAAA,CAAAiE,QAAA;MACA,KAAAjE,IAAA,CAAAiE,QAAA;QACAU,OAAA,CAAAC,GAAA;QACA5E,IAAA,CAAAiE,QAAA;MACA;MACA,KAAA2C,SAAA;IACA;IACAA,UAAAgB,MAAA,EAAAC,aAAA,EAAAC,eAAA;MACA,IAAAC,YAAA;MACA,IAAAC,SAAA;MAEA,IAAAJ,MAAA;QACAG,YAAA,GAAAtL,gBAAA;QACAuL,SAAA;MACA,WAAAJ,MAAA;QACAG,YAAA,GAAArL,YAAA;QACAsL,SAAA;MACA,WAAAJ,MAAA;QACAG,YAAA,GAAApL,mBAAA;QACAqL,SAAA;MACA,WAAAJ,MAAA;QACAG,YAAA,GAAAnL,eAAA;QACAoL,SAAA;MACA,WAAAJ,MAAA;QACAG,YAAA,GAAAlL,cAAA;QACAmL,SAAA;MACA,WAAAJ,MAAA;QACAG,YAAA,GAAAjL,uBAAA;QACAkL,SAAA;MACA,WAAAJ,MAAA;QACAG,YAAA,GAAAhL,iBAAA;QACAiL,SAAA;MACA,WAAAJ,MAAA;QACAG,YAAA,GAAA/K,mBAAA;QACAgL,SAAA;MACA;QACAD,YAAA,GAAA9K,sBAAA;QACA+K,SAAA;MACA;MAEA,KAAAC,OAAA;QACAC,SAAA,EAAAH,YAAA;QAEAD,eAAA,EAAAA,eAAA;QACAD,aAAA,EAAAA,aAAA;QACAM,IAAA,EAAAH,SAAA;QACAI,KAAA;UACAC,WAAA;QACA;MACA;IACA;IACAjG,aAAA;MACAjF,WAAA,CACA+H,GAAA,kBACAG,IAAA,CAAAC,QAAA;QACAX,OAAA,CAAAC,GAAA,sBAAAU,QAAA,CAAAjH,IAAA;QACA,KAAAc,WAAA,GAAAmG,QAAA,CAAAjH,IAAA;MACA,GACA2H,KAAA,CAAAC,KAAA;QACAtB,OAAA,CAAAsB,KAAA,CAAAA,KAAA;MACA;IACA;IACAH,eAAA;MACA3I,WAAA,CACA+H,GAAA;QACAC,MAAA;UACA5F,OAAA,OAAAD,cAAA,CAAAC;QACA;MACA,GACA8F,IAAA,CAAAC,QAAA;QACAX,OAAA,CAAAC,GAAA,yBAAAU,QAAA,CAAAjH,IAAA;QACA,KAAAe,aAAA,GAAAkG,QAAA,CAAAjH,IAAA;MACA,GACA2H,KAAA,CAAAC,KAAA;QACAtB,OAAA,CAAAsB,KAAA,CAAAA,KAAA;MACA;MAEA,KAAAzH,WAAA;IACA;IACAuH,eAAA;MACA5I,WAAA,CACA+H,GAAA;QACAC,MAAA;UACA3F,SAAA,OAAAF,cAAA,CAAAE;QACA;MACA,GACA6F,IAAA,CAAAC,QAAA;QACAX,OAAA,CAAAC,GAAA,yBAAAU,QAAA,CAAAjH,IAAA;QACA,KAAAgB,cAAA,GAAAiG,QAAA,CAAAjH,IAAA;MACA,GACA2H,KAAA,CAAAC,KAAA;QACAtB,OAAA,CAAAsB,KAAA,CAAAA,KAAA;MACA;MACA,KAAAxH,YAAA;IACA;IACA6J,QAAAhH,EAAA;MACA,KAAAvC,MAAA;MACA,KAAAC,SAAA;MACA,KAAAE,aAAA,GAAAoC,EAAA;MACAqD,OAAA,CAAAC,GAAA,qBAAA1F,aAAA;IACA;IACAqJ,SAAAC,KAAA;MACA,KAAAtH,SAAA,SAAAZ,YAAA;MACAqE,OAAA,CAAAC,GAAA,cAAAtE,YAAA;MACAqE,OAAA,CAAAC,GAAA,mBAAA1D,SAAA;MAEA,SAAAA,SAAA;QACA,KAAAC,WAAA;QACA;MACA;MAEAwD,OAAA,CAAAC,GAAA,MAAAtF,cAAA,CAAAM,KAAA,CAAA2E,MAAA;MACAI,OAAA,CAAAC,GAAA,iBAAAtF,cAAA,CAAAM,KAAA;MAGA+E,OAAA,CAAAC,GAAA,kBAAAlE,WAAA;MACAiE,OAAA,CAAAC,GAAA,2BAAApE,kBAAA;MACAmE,OAAA,CAAAC,GAAA,qBAAAnE,YAAA;MACAtD,WAAA,CACA+H,GAAA;QACAC,MAAA;UACA5F,OAAA,OAAAD,cAAA,CAAAC,OAAA;UACAkJ,QAAA,OAAA/H,WAAA;UACA0G,eAAA,OAAA5G,kBAAA;UACA6G,SAAA,OAAA5G;QACA;MACA,GACA4E,IAAA,CAAAC,QAAA;QACAX,OAAA,CAAAC,GAAA,eAAAU,QAAA,CAAAjH,IAAA;QACA,SAAA2F,CAAA,MAAAA,CAAA,GAAAsB,QAAA,CAAAjH,IAAA,CAAAkG,MAAA,EAAAP,CAAA;UACA,IAAA0E,IAAA;UAEA,SAAA3E,CAAA,MAAAA,CAAA,QAAAzE,cAAA,CAAAM,KAAA,CAAA2E,MAAA,EAAAR,CAAA;YACA,IACA,KAAAzE,cAAA,CAAAM,KAAA,CAAAmE,CAAA,EAAA2C,IAAA,IAAApB,QAAA,CAAAjH,IAAA,CAAA2F,CAAA,EAAA8C,MAAA,IACA,KAAAxH,cAAA,CAAAM,KAAA,CAAAmE,CAAA,EAAAH,SAAA,IAAA4E,KAAA,EACA;cACA,KAAAlJ,cAAA,CAAAM,KAAA,CAAAmE,CAAA,EAAAE,QAAA,GACA0E,QAAA,MAAArJ,cAAA,CAAAM,KAAA,CAAAoE,CAAA,EAAAC,QAAA;cACAyE,IAAA;cACA;YACA;UACA;UACA,IAAAA,IAAA;YACA,IAAAE,QAAA;cACAlC,IAAA,EAAApB,QAAA,CAAAjH,IAAA,CAAA2F,CAAA,EAAA8C,MAAA;cACA+B,WAAA,EAAAvD,QAAA,CAAAjH,IAAA,CAAA2F,CAAA,EAAAoD,eAAA;cACA0B,aAAA,OAAAvI,QAAA;cACA0D,QAAA;cACA8E,IAAA,EAAAzD,QAAA,CAAAjH,IAAA,CAAA2F,CAAA,EAAAgF,IAAA;cACAC,KAAA,EAAA3D,QAAA,CAAAjH,IAAA,CAAA2F,CAAA,EAAAkF,KAAA;cAEAtF,SAAA,EAAA4E;YACA;YACA,KAAAlJ,cAAA,CAAAM,KAAA,CAAA4F,IAAA,CAAAoD,QAAA;UACA;UACA,KAAAzH,WAAA;UACA,KAAApC,MAAA;UACA,KAAAC,SAAA;UACA,KAAAsB,YAAA;UACA,KAAApB,aAAA;UACA,KAAA0H,SAAA;QACA;MACA,GACAZ,KAAA,CAAAC,KAAA;QACAtB,OAAA,CAAAsB,KAAA,CAAAA,KAAA;MACA;MAEAtB,OAAA,CAAAC,GAAA,iBAAAtF,cAAA,CAAAM,KAAA;IAGA;IACAuJ,WAAA;MACA,KAAAhI,WAAA;MACA,KAAAD,SAAA;MACA,KAAAnC,MAAA;MACA,KAAAC,SAAA;MACA,KAAAE,aAAA;MACA,KAAAoB,YAAA;IACA;IACA8I,YAAA;MACA,KAAAtK,UAAA;MACA,KAAAD,gBAAA;IACA;IACAwK,aAAA;MACA,KAAApI,aAAA,SAAAZ,WAAA;MAEA,SAAAY,aAAA;QACA;MACA;MACA,KAAAnC,UAAA;MACA6F,OAAA,CAAAC,GAAA,MAAAtF,cAAA,CAAAK,SAAA,CAAA4E,MAAA;MACA,IAAA+E,YAAA;MAEA,SAAAhK,cAAA,CAAAK,SAAA,CAAA4E,MAAA;QACA+E,YAAA;UACAhI,EAAA,OAAAhC,cAAA,CAAAK,SAAA,CAAA4E,MAAA;UACAX,SAAA,OAAAtE,cAAA,CAAAK,SAAA,CAAA4E,MAAA;UACAxE,QAAA,OAAAM;QACA;MACA;QACAiJ,YAAA;UACAhI,EAAA,EACA,KAAAhC,cAAA,CAAAK,SAAA,MAAAL,cAAA,CAAAK,SAAA,CAAA4E,MAAA,MAAAjD,EAAA,GACA;UACAsC,SAAA,OAAAtE,cAAA,CAAAK,SAAA,CAAA4E,MAAA;UACAxE,QAAA,OAAAM;QACA;MACA;MAEA,IAAAuI,QAAA;MAEA,SAAAtJ,cAAA,CAAAK,SAAA,CAAA4E,MAAA;QACAqE,QAAA;UACAtH,EAAA,OAAAhC,cAAA,CAAAK,SAAA,CAAA4E,MAAA;QACA;MACA;QACAqE,QAAA;UACAtH,EAAA,EACA,KAAAhC,cAAA,CAAAK,SAAA,MAAAL,cAAA,CAAAK,SAAA,CAAA4E,MAAA,MAAAjD,EAAA,GACA;QACA;MACA;MAEA,KAAAhC,cAAA,CAAAK,SAAA,CAAA6F,IAAA,CAAA8D,YAAA;MACA,KAAAzJ,eAAA,CAAA2F,IAAA,CAAAoD,QAAA;MACA,KAAAvI,WAAA;MAIA,KAAA9B,SAAA;MACA,KAAAC,WAAA;MACA,KAAAC,YAAA;MACA,KAAAC,iBAAA;MACA,KAAAkI,SAAA;MACA,KAAA/H,gBAAA;IACA;IACA0K,eAAA;MACA,KAAAtI,aAAA;MACA,KAAAnC,UAAA;MACA,KAAAuB,WAAA;MACA,SAAAf,cAAA,CAAAK,SAAA,CAAA4E,MAAA,YAAA1F,gBAAA,aACA,KAAAA,gBAAA;IACA;IACA2K,OAAAC,YAAA;MACA,IAAAA,YAAA,EACA;QACA,MAAA5E,GAAA,GAAAxC,MAAA,CAAAyC,QAAA,CAAAC,IAAA;QACA,IAAAC,aAAA,GAAAH,GAAA,CAAAI,KAAA;QACA,IAAA3D,EAAA,GAAA0D,aAAA,CAAAC,KAAA,SAAAA,KAAA;QAEA,KAAAnF,OAAA,CAAAP,OAAA,SAAAD,cAAA,CAAAC,OAAA;QACA,KAAAO,OAAA,CAAAN,SAAA,SAAAF,cAAA,CAAAE,SAAA;QACA,KAAAM,OAAA,CAAAL,UAAA,SAAAH,cAAA,CAAAG,UAAA;QACA,KAAAK,OAAA,CAAAJ,eAAA,SAAAJ,cAAA,CAAAI,eAAA,GACA,OACA;QACA,KAAAI,OAAA,CAAAC,QAAA,SAAAT,cAAA,CAAAK,SAAA,CAAA4E,MAAA;QACA,KAAAzE,OAAA,CAAAE,IAAA,SAAAV,cAAA,CAAAM,KAAA,CAAA2E,MAAA;QAEAI,OAAA,CAAAC,GAAA,mBAAA9E,OAAA,CAAAP,OAAA;QAEAoF,OAAA,CAAAC,GAAA,iBAAAtF,cAAA,CAAAC,OAAA;QAGA,IACAmK,cAAA,CAAAC,OAAA,2BACAD,cAAA,CAAAC,OAAA,yBACA;UACA,IAAApE,MAAA;QACA;UACA,IAAAA,MAAA;QACA;QACApI,WAAA,CACAyM,IAAA;UACAtI,EAAA,EAAAA,EAAA;UACA9B,SAAA,OAAAF,cAAA,CAAAE,SAAA;UACA2H,WAAA,OAAA7H,cAAA,CAAAC,OAAA;UACAE,UAAA,OAAAH,cAAA,CAAAG,UAAA;UACAC,eAAA,OAAAJ,cAAA,CAAAI,eAAA;UACAmK,KAAA,EAAAH,cAAA,CAAAC,OAAA;UACApE,MAAA,EAAAA;QACA,GACAF,IAAA,CAAAC,QAAA;UACAX,OAAA,CAAAC,GAAA,0BAAAU,QAAA,CAAAjH,IAAA;UACA,KAAA+C,qBAAA,GAAAE,EAAA;UAEA,SAAA0C,CAAA,MAAAA,CAAA,QAAA1E,cAAA,CAAAM,KAAA,CAAA2E,MAAA,EAAAP,CAAA;YACA,IAAA8F,QAAA;YACA,SAAAC,GAAA,SAAAzK,cAAA,CAAAK,SAAA;cACA,IAAAoK,GAAA,CAAAzI,EAAA,SAAAhC,cAAA,CAAAM,KAAA,CAAAoE,CAAA,EAAAJ,SAAA;gBACAkG,QAAA,GAAAC,GAAA,CAAAhK,QAAA;cACA;YACA;YACA5C,WAAA,CACAyM,IAAA;cACAxE,IAAA,EAAA9D,EAAA;cACA6F,WAAA,OAAA7H,cAAA,CAAAC,OAAA;cACAyK,KAAA,OAAA1K,cAAA,CAAAM,KAAA,CAAAoE,CAAA,EAAA8E,aAAA;cACAlF,SAAA,OAAAtE,cAAA,CAAAM,KAAA,CAAAoE,CAAA,EAAAJ,SAAA;cACA7D,QAAA,EAAA+J,QAAA;cACAG,QAAA,OAAA3K,cAAA,CAAAM,KAAA,CAAAoE,CAAA,EAAA0C,IAAA;cACAzC,QAAA,OAAA3E,cAAA,CAAAM,KAAA,CAAAoE,CAAA,EAAAC,QAAA;cACA4F,KAAA,EAAAH,cAAA,CAAAC,OAAA;cACApE,MAAA,EAAAA;YACA,GACAF,IAAA,CAAAC,QAAA;cACAX,OAAA,CAAAC,GAAA,yBAAAU,QAAA,CAAAjH,IAAA;YAGA,GACA2H,KAAA,CAAAC,KAAA;cACAtB,OAAA,CAAAsB,KAAA,CAAAA,KAAA;YACA;UACA;UACA,MAAAiE,gBAAA,OAAAjI,SAAA,CAAAkI,KAAA;UACAD,gBAAA,CAAAE,IAAA;QACA,GACApE,KAAA,CAAAC,KAAA;UACAtB,OAAA,CAAAsB,KAAA,CAAAA,KAAA;QACA;MACA;QACA,KAAAnG,OAAA,CAAAP,OAAA,SAAAD,cAAA,CAAAC,OAAA;QACA,KAAAO,OAAA,CAAAN,SAAA,SAAAF,cAAA,CAAAE,SAAA;QACA,KAAAM,OAAA,CAAAL,UAAA,SAAAH,cAAA,CAAAG,UAAA;QACA,KAAAK,OAAA,CAAAJ,eAAA,SAAAJ,cAAA,CAAAI,eAAA,GACA,OACA;QACA,KAAAI,OAAA,CAAAC,QAAA,SAAAT,cAAA,CAAAK,SAAA,CAAA4E,MAAA;QACA,KAAAzE,OAAA,CAAAE,IAAA,SAAAV,cAAA,CAAAM,KAAA,CAAA2E,MAAA;QAEAI,OAAA,CAAAC,GAAA,mBAAA9E,OAAA,CAAAP,OAAA;QAEAoF,OAAA,CAAAC,GAAA,iBAAAtF,cAAA,CAAAC,OAAA;QAEApC,WAAA,CACAyM,IAAA;UACApK,SAAA,OAAAF,cAAA,CAAAE,SAAA;UACA2H,WAAA,OAAA7H,cAAA,CAAAC,OAAA;UACAE,UAAA,OAAAH,cAAA,CAAAG,UAAA;UACAC,eAAA,OAAAJ,cAAA,CAAAI,eAAA;UACAmK,KAAA,EAAAH,cAAA,CAAAC,OAAA;UACApE,MAAA;QACA,GACAF,IAAA,CAAAC,QAAA;UACAX,OAAA,CAAAC,GAAA,0BAAAU,QAAA,CAAAjH,IAAA;UACA,KAAA+C,qBAAA,GAAAkE,QAAA,CAAAjH,IAAA,CAAAiD,EAAA;UAEA,SAAA0C,CAAA,MAAAA,CAAA,QAAA1E,cAAA,CAAAM,KAAA,CAAA2E,MAAA,EAAAP,CAAA;YACA,IAAA8F,QAAA;YACA,SAAAC,GAAA,SAAAzK,cAAA,CAAAK,SAAA;cACA,IAAAoK,GAAA,CAAAzI,EAAA,SAAAhC,cAAA,CAAAM,KAAA,CAAAoE,CAAA,EAAAJ,SAAA;gBACAkG,QAAA,GAAAC,GAAA,CAAAhK,QAAA;cACA;YACA;YACA5C,WAAA,CACAyM,IAAA;cACAxE,IAAA,EAAAE,QAAA,CAAAjH,IAAA,CAAAiD,EAAA;cACA6F,WAAA,OAAA7H,cAAA,CAAAC,OAAA;cACAyK,KAAA,OAAA1K,cAAA,CAAAM,KAAA,CAAAoE,CAAA,EAAA8E,aAAA;cACAlF,SAAA,OAAAtE,cAAA,CAAAM,KAAA,CAAAoE,CAAA,EAAAJ,SAAA;cACA7D,QAAA,EAAA+J,QAAA;cACAG,QAAA,OAAA3K,cAAA,CAAAM,KAAA,CAAAoE,CAAA,EAAA0C,IAAA;cACAzC,QAAA,OAAA3E,cAAA,CAAAM,KAAA,CAAAoE,CAAA,EAAAC,QAAA;cACA4F,KAAA,EAAAH,cAAA,CAAAC,OAAA;cACApE,MAAA;YACA,GACAF,IAAA,CAAAC,QAAA;cACAX,OAAA,CAAAC,GAAA,yBAAAU,QAAA,CAAAjH,IAAA;YACA,GACA2H,KAAA,CAAAC,KAAA;cACAtB,OAAA,CAAAsB,KAAA,CAAAA,KAAA;YACA;UACA;UACA,MAAAiE,gBAAA,OAAAjI,SAAA,CAAAkI,KAAA;UACAD,gBAAA,CAAAE,IAAA;QACA,GACApE,KAAA,CAAAC,KAAA;UACAtB,OAAA,CAAAsB,KAAA,CAAAA,KAAA;QACA;MACA;IACA;IACAoE,MAAA;MACA;QACA,MAAAxF,GAAA,GAAAxC,MAAA,CAAAyC,QAAA,CAAAC,IAAA;QACA,IAAAC,aAAA,GAAAH,GAAA,CAAAI,KAAA;QACA,IAAA3D,EAAA,GAAA0D,aAAA,CAAAC,KAAA,SAAAA,KAAA;QAEA9H,WAAA,CACAyM,IAAA;UACAtI,EAAA,EAAAA,EAAA;UACA9B,SAAA,OAAAF,cAAA,CAAAE,SAAA;UACA2H,WAAA,OAAA7H,cAAA,CAAAC,OAAA;UACAE,UAAA,OAAAH,cAAA,CAAAG,UAAA;UACAC,eAAA,OAAAJ,cAAA,CAAAI,eAAA;UACA6F,MAAA;UACAsE,KAAA,EAAAH,cAAA,CAAAC,OAAA;QACA,GACAtE,IAAA,CAAAC,QAAA;UACAX,OAAA,CAAAC,GAAA,0BAAAU,QAAA,CAAAjH,IAAA;UACAsG,OAAA,CAAAC,GAAA,uBAAAtF,cAAA,CAAAM,KAAA,CAAA2E,MAAA;UACA,SAAAP,CAAA,MAAAA,CAAA,QAAA1E,cAAA,CAAAM,KAAA,CAAA2E,MAAA,EAAAP,CAAA;YACA,IAAA8F,QAAA;YACA,SAAAC,GAAA,SAAAzK,cAAA,CAAAK,SAAA;cACA,IAAAoK,GAAA,CAAAzI,EAAA,SAAAhC,cAAA,CAAAM,KAAA,CAAAoE,CAAA,EAAAJ,SAAA;gBACAkG,QAAA,GAAAC,GAAA,CAAAhK,QAAA;cACA;YACA;YACA5C,WAAA,CACAyM,IAAA;cACAxE,IAAA,EAAA9D,EAAA;cACA6F,WAAA,OAAA7H,cAAA,CAAAC,OAAA;cACAyK,KAAA,OAAA1K,cAAA,CAAAM,KAAA,CAAAoE,CAAA,EAAA8E,aAAA;cACAlF,SAAA,OAAAtE,cAAA,CAAAM,KAAA,CAAAoE,CAAA,EAAAJ,SAAA;cACA7D,QAAA,EAAA+J,QAAA;cACAG,QAAA,OAAA3K,cAAA,CAAAM,KAAA,CAAAoE,CAAA,EAAA0C,IAAA;cACAzC,QAAA,OAAA3E,cAAA,CAAAM,KAAA,CAAAoE,CAAA,EAAAC,QAAA;cACAsB,MAAA;cACAsE,KAAA,EAAAH,cAAA,CAAAC,OAAA;YACA,GACAtE,IAAA,CAAAC,QAAA;cACAX,OAAA,CAAAC,GAAA,yBAAAU,QAAA,CAAAjH,IAAA;YACA,GACA2H,KAAA,CAAAC,KAAA;cACAtB,OAAA,CAAAsB,KAAA,CAAAA,KAAA;YACA;UACA;UACA,MAAAqE,UAAA,OAAArI,SAAA,CAAAkI,KAAA;UACAG,UAAA,CAAAF,IAAA;QACA,GACApE,KAAA,CAAAC,KAAA;UACAtB,OAAA,CAAAsB,KAAA,CAAAA,KAAA;QACA;MACA;QACA9I,WAAA,CACAyM,IAAA;UACApK,SAAA,OAAAF,cAAA,CAAAE,SAAA;UACA2H,WAAA,OAAA7H,cAAA,CAAAC,OAAA;UACAE,UAAA,OAAAH,cAAA,CAAAG,UAAA;UACAC,eAAA,OAAAJ,cAAA,CAAAI,eAAA;UACA6F,MAAA;UACAsE,KAAA,EAAAH,cAAA,CAAAC,OAAA;QACA,GACAtE,IAAA,CAAAC,QAAA;UACAX,OAAA,CAAAC,GAAA,0BAAAU,QAAA,CAAAjH,IAAA;UAEA,SAAA2F,CAAA,MAAAA,CAAA,QAAA1E,cAAA,CAAAM,KAAA,CAAA2E,MAAA,EAAAP,CAAA;YACA,IAAA8F,QAAA;YACA,SAAAC,GAAA,SAAAzK,cAAA,CAAAK,SAAA;cACA,IAAAoK,GAAA,CAAAzI,EAAA,SAAAhC,cAAA,CAAAM,KAAA,CAAAoE,CAAA,EAAAJ,SAAA;gBACAkG,QAAA,GAAAC,GAAA,CAAAhK,QAAA;cACA;YACA;YACA5C,WAAA,CACAyM,IAAA;cACAxE,IAAA,EAAAE,QAAA,CAAAjH,IAAA,CAAAiD,EAAA;cACA6F,WAAA,OAAA7H,cAAA,CAAAC,OAAA;cACAyK,KAAA,OAAA1K,cAAA,CAAAM,KAAA,CAAAoE,CAAA,EAAA8E,aAAA;cACAlF,SAAA,OAAAtE,cAAA,CAAAM,KAAA,CAAAoE,CAAA,EAAAJ,SAAA;cACA7D,QAAA,EAAA+J,QAAA;cACAG,QAAA,OAAA3K,cAAA,CAAAM,KAAA,CAAAoE,CAAA,EAAA0C,IAAA;cACAzC,QAAA,OAAA3E,cAAA,CAAAM,KAAA,CAAAoE,CAAA,EAAAC,QAAA;cACAsB,MAAA;cACAsE,KAAA,EAAAH,cAAA,CAAAC,OAAA;YACA,GACAtE,IAAA,CAAAC,QAAA;cACAX,OAAA,CAAAC,GAAA,yBAAAU,QAAA,CAAAjH,IAAA;YACA,GACA2H,KAAA,CAAAC,KAAA;cACAtB,OAAA,CAAAsB,KAAA,CAAAA,KAAA;YACA;UACA;UACA,MAAAqE,UAAA,OAAArI,SAAA,CAAAkI,KAAA;UACAG,UAAA,CAAAF,IAAA;QACA,GACApE,KAAA,CAAAC,KAAA;UACAtB,OAAA,CAAAsB,KAAA,CAAAA,KAAA;QACA;MACA;IACA;IACAsE,aAAA7D,IAAA,EAAAzC,QAAA,EAAAL,SAAA;MACA,KAAAlB,cAAA;MACAiC,OAAA,CAAAC,GAAA,CACA,mBACA8B,IAAA,EACA,cACAzC,QAAA,EACA,eACAL,SACA;MACAe,OAAA,CAAAC,GAAA,gBAAAtF,cAAA,CAAAM,KAAA;MACA,IAAA4K,aAAA,QAAAlL,cAAA,CAAAM,KAAA,CAAA+G,MAAA,CACA3G,IAAA,IAAAA,IAAA,CAAA0G,IAAA,KAAAA,IAAA,IAAA1G,IAAA,CAAA4D,SAAA,KAAAA,SACA;MAEAe,OAAA,CAAAC,GAAA,qBAAA4F,aAAA;MACA,IAAA9G,WAAA;MACA8G,aAAA,CAAA7E,OAAA,CAAA3F,IAAA;QACA,IAAAyK,YAAA,GAAA/G,WAAA,CAAAgH,IAAA,CACAC,UAAA,IAAAA,UAAA,CAAAjE,IAAA,KAAA1G,IAAA,CAAA0G,IACA;QACA,IAAA+D,YAAA;UACAA,YAAA,CAAAxG,QAAA,IAAAjE,IAAA,CAAAiE,QAAA;QACA;UACAP,WAAA,CAAA8B,IAAA;YAAA,GAAAxF;UAAA;QACA;MACA;MAEA2E,OAAA,CAAAC,GAAA,oBAAAlB,WAAA;MACAiB,OAAA,CAAAC,GAAA,uBAAAlB,WAAA,IAAAgD,IAAA;MACA/B,OAAA,CAAAC,GAAA,6BAAAlB,WAAA,IAAAE,SAAA;MAEA,KAAAtE,cAAA,CAAAM,KAAA,QAAAN,cAAA,CAAAM,KAAA,CAAA+G,MAAA,CACA3G,IAAA,IACAA,IAAA,CAAA0G,IAAA,KAAAhD,WAAA,IAAAgD,IAAA,IAAA1G,IAAA,CAAA4D,SAAA,KAAAF,WAAA,IAAAE,SACA;MACA,KAAAtE,cAAA,CAAAM,KAAA,CAAA4F,IAAA,CAAA9B,WAAA;MACA,KAAAkD,SAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}