{"ast":null,"code":"import _Select2 from \"element-ui/lib/theme-chalk/select.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Select from \"element-ui/lib/select\";\nimport _Option2 from \"element-ui/lib/theme-chalk/option.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Option from \"element-ui/lib/option\";\nimport _Input2 from \"element-ui/lib/theme-chalk/input.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Input from \"element-ui/lib/input\";\nimport _Tag2 from \"element-ui/lib/theme-chalk/tag.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Tag from \"element-ui/lib/tag\";\nimport _Slider2 from \"element-ui/lib/theme-chalk/slider.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Slider from \"element-ui/lib/slider\";\nimport _TimeSelect2 from \"element-ui/lib/theme-chalk/time-select.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _TimeSelect from \"element-ui/lib/time-select\";\nimport _DatePicker2 from \"element-ui/lib/theme-chalk/date-picker.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _DatePicker from \"element-ui/lib/date-picker\";\nimport _TableColumn2 from \"element-ui/lib/theme-chalk/table-column.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _TableColumn from \"element-ui/lib/table-column\";\nimport _Table2 from \"element-ui/lib/theme-chalk/table.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Table from \"element-ui/lib/table\";\nimport { Collapse, CollapseItem, Tabs, TabPane, Card, Button } from \"src/components/UIComponents\";\nimport PProgress from \"src/components/UIComponents/Progress.vue\";\nimport PSwitch from \"src/components/UIComponents/Switch.vue\";\nimport Vue from \"vue\";\nimport NotificationTemplate from \"../Components/NotificationTemplate\";\nimport NotifAddBoxLabel from \"../Components/Notification/NotifSuccessAddBoxLabel.vue\";\nimport NotifAddItem from \"../Components/Notification/NotifSuccessAddItem.vue\";\nimport NotifDeleteBoxLabel from \"../Components/Notification/NotifSuccessDeleteBoxLabel.vue\";\nimport NotifDeleteItem from \"../Components/Notification/NotifSuccessDeleteItem.vue\";\nimport NotifDraftSave from \"../Components/Notification/NotifSuccessDraftSave.vue\";\nimport NotifItemChangeBoxLabel from \"../Components/Notification/NotifSuccessItemChangeBoxLabel.vue\";\nimport NotifItemQuantity from \"../Components/Notification/NotifSuccessItemQuantity.vue\";\nimport NotifRenameBoxLabel from \"../Components/Notification/NotifSuccessRenameBoxLabel.vue\";\nimport NotifSubmitTransaction from \"../Components/Notification/NotifSuccessSubmitTransaction.vue\";\nimport Swal from \"sweetalert2\";\nimport axiosClient from \"../../../../axios\";\nimport EditBoxLabelModal from \"./PullOutRequests/ModalPullOut/EditBoxLabelModal.vue\";\nimport TransactionReceiptModal from \"./PullOutRequests/ModalPullOut/TransactionReceiptModal.vue\";\nimport DraftModal from \"./PullOutRequests/ModalPullOut/DraftModal.vue\";\nimport linkName from \"../../../../linkName\";\nimport ConfirmationSubmitPullOutModal from \"./PullOutRequests/ModalPullOut/ConfirmationSubmitPullOutModal.vue\";\nimport ConfirmationDraftPullOutModal from \"./PullOutRequests/ModalPullOut/ConfirmationDraftPullOutModal.vue\";\nimport axios, { isCancel } from \"axios\";\nimport * as XLSX from \"xlsx\";\nVue.use(_Table);\nVue.use(_TableColumn);\nexport default {\n  components: {\n    [_DatePicker.name]: _DatePicker,\n    [_TimeSelect.name]: _TimeSelect,\n    [_Slider.name]: _Slider,\n    [_Tag.name]: _Tag,\n    [_Input.name]: _Input,\n    [Button.name]: Button,\n    [_Option.name]: _Option,\n    [_Select.name]: _Select,\n    PSwitch,\n    PProgress,\n    TabPane,\n    Tabs,\n    CollapseItem,\n    Collapse,\n    Card,\n    NotificationTemplate,\n    NotifAddBoxLabel,\n    NotifAddItem,\n    NotifDeleteBoxLabel,\n    NotifDeleteItem,\n    NotifDraftSave,\n    NotifItemChangeBoxLabel,\n    NotifItemQuantity,\n    NotifRenameBoxLabel,\n    NotifSubmitTransaction,\n    EditBoxLabelModal,\n    TransactionReceiptModal,\n    DraftModal,\n    ConfirmationSubmitPullOutModal,\n    ConfirmationDraftPullOutModal\n  },\n  data() {\n    return {\n      transferredData: \"\",\n      isCompany: false,\n      isChainCode: true,\n      isBranchName: true,\n      isTransactionType: true,\n      isShowButton: false,\n      itemCodeList: [],\n      isEditBLDisabled: false,\n      isBoxLabel: false,\n      isItem: false,\n      isAddItem: true,\n      isDisabledSubmit: true,\n      showItemInput: \"\",\n      companyList: [],\n      chainCodeList: [],\n      branchNameList: [],\n      newTransaction: {\n        company: \"\",\n        chainCode: \"\",\n        branchName: \"\",\n        transactionType: \"\",\n        boxLabels: [],\n        items: []\n      },\n      newItemInputBox: [],\n      isValid: {\n        company: false,\n        chainCode: false,\n        branchName: false,\n        transactionType: false,\n        boxLabel: false,\n        item: false\n      },\n      isApproved: false,\n      isCancel: false,\n      isSubmit: true,\n      hoveredRow: null,\n      transactionTypeList: [{\n        value: \"CPO - BranchDisposal\",\n        label: \"CPO Item for Disposal in the Store c/o Supervisor\"\n      }, {\n        value: \"CPO - Store\",\n        label: \"CPO for Transfer to Another Store\"\n      }, {\n        value: \"CPO - Warehouse\",\n        label: \"CPO Back to WH via In-House Service\"\n      }, {\n        value: \"CPO - Warehouse\",\n        label: \"CPO Back to WH via Chain Distribution Center\"\n      }, {\n        value: \"CPO - Warehouse\",\n        label: \"CPO Back to WH via 3rd Party Trucking\"\n      }, {\n        value: \"CPO - Warehouse\",\n        label: \"CPO Back to WH c/o Supervisor\"\n      }, {\n        value: \"CPO - Warehouse(DC)\",\n        label: \"Concess Direct Pull-Out\"\n      }],\n      newBoxLabel: \"\",\n      newItemInput: \"\",\n      newBrand: \"\",\n      newItemDescription: \"\",\n      newStyleCode: \"\",\n      newItemCode: \"\",\n      notifications: {\n        topCenter: false\n      },\n      modals: {\n        classic: false,\n        notice: false,\n        mini: false\n      },\n      isNewBoxLabel: false,\n      isNewItem: false,\n      isRightCode: false,\n      transferTransactionID: \"\",\n      uniqueItemss: [],\n      duplicateItemss: [],\n      isDenied: true,\n      dataArray: [],\n      myData: [],\n      counter: 0,\n      remarks: \"\",\n      remarksList: [\"GOOD\", \"DAMAGED/DIRTY\", \"DISPOSAL\"],\n      images: [],\n      files: [],\n      img_counter: 0\n    };\n  },\n  computed: {\n    filteredRemarks() {\n      return this.remarksList.filter(remark => {\n        return remark.toLowerCase().includes(this.remarks.toLowerCase());\n      });\n    },\n    sortedBoxes() {\n      return this.newTransaction.boxLabels.sort((a, b) => a.boxNumber - b.boxNumber);\n    },\n    getItemBoxLabel() {\n      return boxNumber => {\n        const boxLabel = this.newTransaction.boxLabels.find(label => label.boxNumber === boxNumber);\n        return boxLabel ? boxLabel.boxLabel : \"\";\n      };\n    }\n  },\n  mounted() {\n    const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n    const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));\n    this.fetchEdit();\n    this.fetchCompany();\n    if (window.resolveRouteChange) {\n      window.resolveRouteChange();\n      window.resolveRouteChange = null;\n    }\n    linkName.val = \"Pull-Out Requisition Form\";\n    console.log(this.isCompany, this.isChainCode, this.isBranchName, this.isTransactionType);\n  },\n  watch: {\n    newTransaction: {\n      handler(val) {\n        this.validateSubmit();\n      },\n      deep: true\n    },\n    \"newTransaction.items\": function (val, oldVal) {\n      this.addCategoryBoxLabel();\n    },\n    \"newTransaction.boxLabels\": function (val, oldVal) {\n      this.enableDropDowns();\n    },\n    \"newTransaction.company\": function (val, oldVal) {\n      this.showButtons();\n    },\n    \"newTransaction.chainCode\": function (val, oldVal) {\n      this.showButtons();\n    },\n    \"newTransaction.branchName\": function (val, oldVal) {\n      this.showButtons();\n    },\n    \"newTransaction.transactionType\": function (val, oldVal) {\n      this.showButtons();\n    },\n    sortedBoxes(newSortedBoxes) {\n      Vue.set(this, \"newTransaction.boxLabels\", newSortedBoxes);\n    }\n  },\n  methods: {\n    addCategoryBoxLabel() {},\n    filterRemarks() {\n      this.filteredRemarks = this.remarksList.filter(remark => {\n        return remark.toLowerCase().includes(this.remarks.toLowerCase());\n      });\n    },\n    onFileChange(e) {\n      var files = e.target.files || e.dataTransfer.files;\n      this.files.push(e.target.files[0]);\n      if (!files.length) return;\n      this.createImage(files);\n    },\n    createImage(files) {\n      var vm = this;\n      for (var index = 0; index < files.length; index++) {\n        var reader = new FileReader();\n        reader.onload = function (event) {\n          const imageUrl = event.target.result;\n          vm.images.push(imageUrl);\n        };\n        reader.readAsDataURL(files[index]);\n      }\n    },\n    removeImage(index) {\n      this.images.splice(index, 1);\n    },\n    clearImage() {\n      document.getElementById(\"formFile\").value = null;\n      frame.src = \"\";\n    },\n    handleFileUploadImage() {\n      console.log(\"image:\", this.files);\n      console.log(\"Transaction ID:\", this.transferTransactionID);\n      const config = {\n        headers: {\n          \"content-type\": \"multipart/form-data\"\n        }\n      };\n      if (this.img_counter < this.files.length) {\n        axiosClient.post(\"/upload\", {\n          image: this.files[this.img_counter],\n          company: this.newTransaction.company,\n          branchName: this.newTransaction.branchName,\n          transactionID: this.transferTransactionID\n        }, config).then(response => {\n          console.log(\"Success Upload Image\", response.data);\n          this.img_counter++;\n          setTimeout(this.handleFileUploadImage, 2000);\n        }).catch(error => {\n          console.error(error);\n        });\n      }\n    },\n    handleFileUpload(event) {\n      console.log(\"File Name: \", event.target.files[0].name);\n      const file = event.target.files[0];\n      const reader = new FileReader();\n      reader.onload = e => {\n        const data = new Uint8Array(e.target.result);\n        const workbook = XLSX.read(data, {\n          type: \"array\"\n        });\n        const worksheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[worksheetName];\n        const jsonData = XLSX.utils.sheet_to_json(worksheet, {\n          header: 1\n        });\n        console.log(\"Excel Data\", jsonData);\n        this.myData = jsonData;\n        let arrayBox = [];\n        for (var x = 0; x < this.myData.length; x++) {\n          this.dataArray.push(this.myData[x]);\n          arrayBox.push(this.myData[x][1]);\n        }\n        console.log(\"Data:\", this.dataArray);\n        console.log(\"Import Excel\", this.dataArray.length);\n        const filteredArray = arrayBox.filter((value, index, self) => {\n          return self.indexOf(value) === index;\n        });\n        let tempBoxLabel = [];\n        for (var x = 0; x < filteredArray.length; x++) {\n          tempBoxLabel = {\n            id: x + 1,\n            boxNumber: x + 1,\n            boxLabel: filteredArray[x]\n          };\n          this.newTransaction.boxLabels.push(tempBoxLabel);\n          let tempItem = [];\n          if (this.newTransaction.boxLabels.length == 0) {\n            tempItem = {\n              id: this.newTransaction.boxLabels.length + 1\n            };\n          } else {\n            tempItem = {\n              id: this.newTransaction.boxLabels[this.newTransaction.boxLabels.length - 1].id + 1\n            };\n          }\n          this.newItemInputBox.push(tempItem);\n        }\n        console.log(filteredArray);\n        this.counter = 0;\n        this.saveItemsExcel();\n      };\n      reader.readAsArrayBuffer(file);\n    },\n    saveItemsExcel() {\n      if (this.counter < this.dataArray.length) {\n        var boxNumber = this.dataArray[this.counter][0];\n        var quantity = this.dataArray[this.counter][3];\n        axiosClient.get(\"/fetchSameItems\", {\n          params: {\n            company: this.newTransaction.company,\n            ItemNo: this.dataArray[this.counter][2]\n          }\n        }).then(response => {\n          console.log(\"Data\", response.data);\n          if (response.data.length == 0) {\n            setTimeout(this.saveItemsExcel, 2000);\n          }\n          for (var x = 0; x < response.data.length; x++) {\n            var flag = true;\n            for (var i = 0; i < this.newTransaction.items.length; i++) {\n              if (this.newTransaction.items[i].code == response.data[x].ItemNo && this.newTransaction.items[i].boxNumber == boxNumber) {\n                this.newTransaction.items[i].quantity = parseInt(this.newTransaction.items[x].quantity) + 1;\n                flag = false;\n                break;\n              }\n            }\n            if (flag) {\n              let tempItem = {\n                code: response.data[x].ItemNo,\n                description: response.data[x].ItemDescription,\n                categorybrand: response.data[x].brandNames,\n                quantity: quantity,\n                size: response.data[x].Size,\n                color: response.data[x].Color,\n                boxNumber: parseInt(boxNumber)\n              };\n              this.newTransaction.items.push(tempItem);\n            }\n            console.log(\"Items\", this.newTransaction.items);\n            this.isAddItem = true;\n            this.notifyVue(\"AddItem\", \"bottom\", \"right\");\n            setTimeout(this.saveItemsExcel, 2000);\n          }\n        }).catch(error => {\n          console.error(error);\n        });\n      }\n      this.counter++;\n    },\n    numberOnly($event) {\n      let keyCode = $event.keyCode ? $event.keyCode : $event.which;\n      if (keyCode < 48 || keyCode > 57) {\n        $event.preventDefault();\n      }\n    },\n    validateSubmit() {\n      let uniqueItems = [...new Set(this.newTransaction.items.map(item => item.boxNumber))];\n      let itemsValidation = false;\n      let itemsValidationTemp = false;\n      for (let j in this.newTransaction.boxLabels) {\n        for (let i in uniqueItems) {\n          if (uniqueItems[i] == this.newTransaction.boxLabels[j].id) {\n            itemsValidationTemp = true;\n            itemsValidation = true;\n            break;\n          } else {\n            itemsValidation = false;\n            itemsValidationTemp = false;\n          }\n        }\n      }\n      for (let x in this.newTransaction.items) if (this.newTransaction.items[x].quantity == 0) {\n        itemsValidation = false;\n        let tooltip = bootstrap.Tooltip.getInstance(\"#submitBTN\");\n        tooltip._config.title = \"No items should have a quantity with 0.\";\n        tooltip.update();\n        break;\n      }\n      if (!itemsValidationTemp) {\n        let tooltip = bootstrap.Tooltip.getInstance(\"#submitBTN\");\n        tooltip._config.title = \"Kindly add item/s on every boxes you've added.\";\n        tooltip.update();\n      }\n      if (!this.newTransaction.company || !this.newTransaction.chainCode || !this.newTransaction.branchName || !this.newTransaction.transactionType) {\n        let tooltip = bootstrap.Tooltip.getInstance(\"#submitBTN\");\n        tooltip._config.title = \"Complete the form above to enable this button.\";\n        tooltip.update();\n      } else if (this.newTransaction.boxLabels.length <= 0) {\n        let tooltip = bootstrap.Tooltip.getInstance(\"#submitBTN\");\n        tooltip._config.title = \"No box added. Kindly add box/es to be able to add item/s.\";\n        tooltip.update();\n      } else if (this.newTransaction.items.length <= 0) {\n        let tooltip = bootstrap.Tooltip.getInstance(\"#submitBTN\");\n        tooltip._config.title = \"No items added. Kindly add item/s for this pull-out request.\";\n        tooltip.update();\n      }\n      if (this.newTransaction.company && this.newTransaction.chainCode && this.newTransaction.branchName && this.newTransaction.transactionType && this.newTransaction.boxLabels.length > 0 && itemsValidation) {\n        this.isDisabledSubmit = false;\n        let tooltip = bootstrap.Tooltip.getInstance(\"#submitBTN\");\n        tooltip.disable();\n      } else this.isDisabledSubmit = true;\n    },\n    editingBoxLabel({\n      index,\n      value,\n      tempBL\n    }) {\n      if (value) this.newTransaction.boxLabels[index].boxLabel = value;else this.newTransaction.boxLabels[index].boxLabel = tempBL;\n    },\n    enableDropDowns() {\n      if (this.newTransaction.boxLabels.length == 0) {\n        this.isCompany = false;\n        this.isChainCode = false;\n        this.isBranchName = false;\n        this.isTransactionType = false;\n        this.isEditBLDisabled = true;\n      } else this.isEditBLDisabled = false;\n    },\n    showButtons() {\n      if (this.newTransaction.company && this.newTransaction.chainCode && this.newTransaction.branchName && this.newTransaction.transactionType) {\n        this.isShowButton = true;\n        if (this.newTransaction.boxLabels.length == 0) this.isEditBLDisabled = true;else this.isEditBLDisabled = false;\n      } else this.isShowButton = false;\n    },\n    fetchEdit() {\n      try {\n        const uri = window.location.href;\n        var transactionID = uri.split(\"?\")[1];\n        var id = transactionID.split(\"=\")[1].split(\"&\")[0];\n        var company = transactionID.split(\"=\")[2];\n        axiosClient.get(\"/fetchEditDraftBranch\", {\n          params: {\n            company: company,\n            plID: id\n          }\n        }).then(response => {\n          this.newTransaction.company = response.data[0].company;\n          this.newTransaction.branchName = response.data[0].branchName;\n          this.newTransaction.chainCode = response.data[0].chainCode;\n          this.newTransaction.transactionType = response.data[0].transactionType;\n          if (response.data[0].status == \"denied\" || response.data[0].status == \"endorsement\" || response.data[0].status == \"unprocessed\") {\n            this.isDenied = false;\n            this.isCancel = true;\n          }\n          if (response.data[0].status == \"endorsement\") {\n            this.isApproved = true;\n            this.isSubmit = false;\n          }\n          axiosClient.get(\"/fetchEditDraftItem\", {\n            params: {\n              company: company,\n              plID: id\n            }\n          }).then(response => {\n            for (var x = 0; x < response.data.length; x++) {\n              this.newTransaction.items.push(response.data[x]);\n            }\n            const idMap = new Map();\n            this.newTransaction.items.forEach(item => {\n              if (!idMap.has(item.id)) {\n                idMap.set(item.id, true);\n                this.newTransaction.boxLabels.push({\n                  id: item.boxNumber,\n                  boxLabel: item.boxLabel\n                });\n                this.newItemInputBox.push({\n                  id: item.boxNumber\n                });\n              }\n            });\n            if (this.newTransaction.company) {\n              this.isCompany = false;\n              this.isChainCode = false;\n              this.fetchCompany();\n              this.fetchChainCode();\n            }\n            if (this.newTransaction.chainCode) {\n              this.isChainCode = false;\n              this.isBranchName = false;\n              this.fetchChainName();\n              this.fetchChainCode();\n            }\n            if (this.newTransaction.branchName) {\n              this.isBranchName = false;\n              this.isTransactionType = false;\n              this.fetchChainName();\n            }\n            if (this.newTransaction.transactionType) {\n              this.isCompany = false;\n              this.isChainCode = false;\n              this.isBranchName = false;\n              this.isTransactionType = false;\n            }\n            if (this.newTransaction.items.length) {\n              this.isCompany = true;\n              this.isChainCode = true;\n              this.isBranchName = true;\n              this.isTransactionType = true;\n            }\n          }).catch(error => {});\n        }).catch(error => {});\n      } catch {\n        axiosClient.get(\"/fetchPromoBranchInfo\", {\n          params: {\n            userID: sessionStorage.getItem(\"UserID\")\n          }\n        }).then(response => {\n          this.newTransaction.company = response.data[0].company;\n          this.newTransaction.chainCode = response.data[0].chainCode;\n          this.newTransaction.branchName = response.data[0].branchName;\n        }).catch(error => {});\n      }\n    },\n    cancelTransaction() {\n      location.href = \"http://192.168.0.7:4040/#/pull-out/requests\";\n    },\n    updateData(updatedData) {},\n    openModal(data) {\n      this.transferredData = data;\n    },\n    closeModal() {\n      this.transferredData = \"\";\n    },\n    showButton(itemId) {\n      this.hoveredRow = itemId;\n    },\n    hideButton(itemId) {\n      this.hoveredRow = null;\n    },\n    removeItem(code, boxNumber) {\n      this.validateSubmit();\n      this.newTransaction.items = this.newTransaction.items.filter(item => item.code !== code || item.boxNumber !== boxNumber);\n      this.notifyVue(\"DeleteItem\", \"bottom\", \"right\");\n    },\n    fetchItems() {\n      if (this.newItemInput.length >= 4) {\n        if (this.newTransaction.company == \"NBFI\" || this.newTransaction.company == \"CMC\" || this.newTransaction.company == \"ASC\") {\n          axiosClient.get(\"/fetchItemsNBFI\", {\n            params: {\n              ItemNo: this.newItemInput\n            }\n          }).then(response => {\n            this.itemCodeList = response.data;\n          }).catch(error => {});\n        } else {\n          axiosClient.get(\"/fetchItems\", {\n            params: {\n              ItemNo: this.newItemInput\n            }\n          }).then(response => {\n            this.itemCodeList = response.data;\n          }).catch(error => {});\n        }\n      } else if (this.newItemInput.length == 0) this.itemCodeList = [];\n    },\n    compareItemCode() {\n      let value = this.newItemInput;\n      if (value.indexOf(\" - \") >= 0) {\n        let parts = value.split(\" - \");\n        this.newItemInput = parts[0];\n      }\n      if (this.newItemInput.length > 16) {\n        this.newItemInput = this.newItemInput.slice(0, 16);\n      } else {}\n      axiosClient.get(\"/compareItemCode\", {\n        params: {\n          companyType: this.newTransaction.company,\n          ItemNo: this.newItemInput\n        }\n      }).then(response => {\n        this.newItemCode = response.data[0].ItemNo;\n        this.newItemDescription = response.data[0].ItemDescription;\n        this.newStyleCode = response.data[0].StyleCode;\n        let brandCode = response.data[0].ItemNo.toString().substr(1, 2);\n        axiosClient.get(\"/fetchBrands\", {\n          params: {\n            companyType: this.newTransaction.company,\n            brandCode: brandCode\n          }\n        }).then(response => {\n          this.newBrand = response.data[0].brandNames;\n        }).catch(error => {});\n      }).catch(error => {\n        this.missItemCode = 0;\n        !this.newItemInput ? true : this.isRightCode = true;\n      });\n    },\n    handleQuantity(item) {\n      if (!item.quantity) {\n        item.quantity = 0;\n      }\n      this.notifyVue(\"ItemQuantity\", \"bottom\", \"right\");\n    },\n    notifyVue(notify, verticalAlign, horizontalAlign) {\n      var notification = \"\";\n      let notifType = \"\";\n      if (notify === \"AddBoxLabel\") {\n        notification = NotifAddBoxLabel;\n        notifType = \"success\";\n      } else if (notify === \"AddItem\") {\n        notification = NotifAddItem;\n        notifType = \"success\";\n      } else if (notify === \"DeleteBoxLabel\") {\n        notification = NotifDeleteBoxLabel;\n        notifType = \"danger\";\n      } else if (notify === \"DeleteItem\") {\n        notification = NotifDeleteItem;\n        notifType = \"danger\";\n      } else if (notify === \"DraftSave\") {\n        notification = NotifDraftSave;\n        notifType = \"success\";\n      } else if (notify === \"ChangeBoxLabel\") {\n        notification = NotifItemChangeBoxLabel;\n        notifType = \"success\";\n      } else if (notify === \"ItemQuantity\") {\n        notification = NotifItemQuantity;\n        notifType = \"success\";\n      } else if (notify === \"RenameBoxLabel\") {\n        notification = NotifRenameBoxLabel;\n        notifType = \"success\";\n      } else {\n        notification = NotifSubmitTransaction;\n        notifType = \"success\";\n      }\n      this.$notify({\n        component: notification,\n        horizontalAlign: horizontalAlign,\n        verticalAlign: verticalAlign,\n        type: notifType,\n        props: {\n          customValue: \"Success\"\n        }\n      });\n    },\n    fetchCompany() {\n      axiosClient.get(\"/fetchCompany\").then(response => {\n        this.companyList = response.data;\n      }).catch(error => {});\n    },\n    fetchChainCode() {\n      axiosClient.get(\"/fetchChain\", {\n        params: {\n          company: this.newTransaction.company\n        }\n      }).then(response => {\n        this.chainCodeList = response.data;\n      }).catch(error => {});\n      this.isChainCode = false;\n    },\n    fetchChainName() {\n      axiosClient.get(\"/fetchChainName\", {\n        params: {\n          chainCode: this.newTransaction.chainCode\n        }\n      }).then(response => {\n        this.branchNameList = response.data;\n      }).catch(error => {});\n      this.isBranchName = false;\n    },\n    addItem(boxNUMBER) {\n      this.isItem = false;\n      this.isAddItem = false;\n      this.showItemInput = boxNUMBER;\n      console.log(\"clicked nUMBER:\", this.showItemInput);\n    },\n    saveItem(boxNUMBER) {\n      let confirmSave = false;\n      this.isNewItem = !this.newItemInput ? true : false;\n      if (this.isNewItem) {\n        this.isRightCode = false;\n        return 0;\n      }\n      axiosClient.get(\"/fetchSameItem\", {\n        params: {\n          company: this.newTransaction.company,\n          ItemCode: this.newItemCode,\n          ItemDescription: this.newItemDescription,\n          StyleCode: this.newStyleCode\n        }\n      }).then(response => {\n        for (var x = 0; x < response.data.length; x++) {\n          var flag = true;\n          for (var i = 0; i < this.newTransaction.items.length; i++) {\n            if (this.newTransaction.items[i].code == response.data[x].ItemNo && this.newTransaction.items[i].boxNumber == boxNUMBER) {\n              this.newTransaction.items[i].quantity = parseInt(this.newTransaction.items[x].quantity) + 1;\n              flag = false;\n              break;\n            }\n          }\n          if (flag) {\n            let tempItem = {\n              code: response.data[x].ItemNo,\n              description: response.data[x].ItemDescription,\n              categorybrand: this.newBrand,\n              quantity: 0,\n              size: response.data[x].Size,\n              color: response.data[x].Color,\n              boxNumber: boxNUMBER,\n              category: response.data[x].Category\n            };\n            this.newTransaction.items.push(tempItem);\n          }\n          this.isRightCode = false;\n          this.isItem = false;\n          this.isAddItem = true;\n          this.newItemInput = \"\";\n          this.showItemInput = \"\";\n          this.notifyVue(\"AddItem\", \"bottom\", \"right\");\n        }\n        var filteredItems = this.newTransaction.items.filter(item => item.boxNumber === boxNUMBER);\n        console.log(\"filtered: \", filteredItems);\n        var uniqueCategory = [...new Set(filteredItems.map(item => item.category))];\n        console.log(\"Category: \", uniqueCategory);\n        let strCategory = \"\";\n        confirmSave = true;\n      }).catch(error => {});\n      console.log(\"Confirm Save: \", confirmSave);\n    },\n    cancelItem() {\n      this.isRightCode = false;\n      this.isNewItem = false;\n      this.isItem = false;\n      this.isAddItem = true;\n      this.showItemInput = \"\";\n      this.newItemInput = \"\";\n    },\n    addBoxLabel() {\n      this.isBoxLabel = true;\n      this.isEditBLDisabled = true;\n    },\n    saveBoxLabel() {\n      this.isNewBoxLabel = !this.newBoxLabel ? true : false;\n      if (this.isNewBoxLabel) {\n        return 0;\n      }\n      this.isBoxLabel = false;\n      let tempBoxLabel = [];\n      if (this.newTransaction.boxLabels.length == 0) {\n        tempBoxLabel = {\n          id: this.newTransaction.boxLabels.length + 1,\n          boxNumber: this.newTransaction.boxLabels.length + 1,\n          boxLabel: this.newBoxLabel\n        };\n      } else {\n        tempBoxLabel = {\n          id: this.newTransaction.boxLabels[this.newTransaction.boxLabels.length - 1].id + 1,\n          boxNumber: this.newTransaction.boxLabels.length + 1,\n          boxLabel: this.newBoxLabel\n        };\n      }\n      let tempItem = [];\n      if (this.newTransaction.boxLabels.length == 0) {\n        tempItem = {\n          id: this.newTransaction.boxLabels.length + 1\n        };\n      } else {\n        tempItem = {\n          id: this.newTransaction.boxLabels[this.newTransaction.boxLabels.length - 1].id + 1\n        };\n      }\n      this.newTransaction.boxLabels.push(tempBoxLabel);\n      this.newItemInputBox.push(tempItem);\n      this.newBoxLabel = \"\";\n      this.isCompany = true;\n      this.isChainCode = true;\n      this.isBranchName = true;\n      this.isTransactionType = true;\n      this.notifyVue(\"AddBoxLabel\", \"bottom\", \"right\");\n      this.isEditBLDisabled = false;\n    },\n    cancelBoxLabel() {\n      this.isNewBoxLabel = false;\n      this.isBoxLabel = false;\n      this.newBoxLabel = \"\";\n      if (this.newTransaction.boxLabels.length == 0) this.isEditBLDisabled = true;else this.isEditBLDisabled = false;\n    },\n    submit(confirmation) {\n      if (confirmation) {\n        try {\n          const uri = window.location.href;\n          var transactionID = uri.split(\"?\")[1];\n          var id = transactionID.split(\"=\")[1].split(\"&\")[0];\n          this.isValid.company = !this.newTransaction.company ? true : false;\n          this.isValid.chainCode = !this.newTransaction.chainCode ? true : false;\n          this.isValid.branchName = !this.newTransaction.branchName ? true : false;\n          this.isValid.transactionType = !this.newTransaction.transactionType ? true : false;\n          this.isValid.boxLabel = !this.newTransaction.boxLabels.length ? true : false;\n          this.isValid.item = !this.newTransaction.items.length ? true : false;\n          if (sessionStorage.getItem(\"Position\") == \"Agent\" || sessionStorage.getItem(\"Position\") == \"Admin\") {\n            var status = \"endorsement\";\n          } else if (sessionStorage.getItem(\"Position\") == \"Admin\") {\n            var status = \"approved\";\n          } else {\n            var status = \"unprocessed\";\n          }\n          axiosClient.post(\"/updatePullOutBranchRequest\", {\n            id: id,\n            chainCode: this.newTransaction.chainCode,\n            companyType: this.newTransaction.company,\n            branchName: this.newTransaction.branchName,\n            transactionType: this.newTransaction.transactionType,\n            email: sessionStorage.getItem(\"Email\"),\n            status: status\n          }).then(response => {\n            this.transferTransactionID = id;\n            for (var x = 0; x < this.newTransaction.items.length; x++) {\n              let labelBox = \"\";\n              for (let box of this.newTransaction.boxLabels) {\n                if (box.id == this.newTransaction.items[x].boxNumber) {\n                  labelBox = box.boxLabel;\n                }\n              }\n              axiosClient.post(\"/updatePullOutItemRequest\", {\n                plID: id,\n                companyType: this.newTransaction.company,\n                brand: this.newTransaction.items[x].categorybrand,\n                boxNumber: this.newTransaction.items[x].boxNumber,\n                boxLabel: labelBox,\n                itemCode: this.newTransaction.items[x].code,\n                quantity: this.newTransaction.items[x].quantity,\n                email: sessionStorage.getItem(\"Email\"),\n                status: status\n              }).then(response => {}).catch(error => {});\n            }\n            const transactionModal = new bootstrap.Modal(\"#transactionReceipt\");\n            transactionModal.show();\n          }).catch(error => {});\n        } catch {\n          this.isValid.company = !this.newTransaction.company ? true : false;\n          this.isValid.chainCode = !this.newTransaction.chainCode ? true : false;\n          this.isValid.branchName = !this.newTransaction.branchName ? true : false;\n          this.isValid.transactionType = !this.newTransaction.transactionType ? true : false;\n          this.isValid.boxLabel = !this.newTransaction.boxLabels.length ? true : false;\n          this.isValid.item = !this.newTransaction.items.length ? true : false;\n          axiosClient.post(\"/savePullOutBranchRequest\", {\n            chainCode: this.newTransaction.chainCode,\n            companyType: this.newTransaction.company,\n            branchName: this.newTransaction.branchName,\n            transactionType: this.newTransaction.transactionType,\n            email: sessionStorage.getItem(\"Email\"),\n            status: \"unprocessed\"\n          }).then(response => {\n            this.transferTransactionID = response.data.id;\n            for (var x = 0; x < this.newTransaction.items.length; x++) {\n              let labelBox = \"\";\n              for (let box of this.newTransaction.boxLabels) {\n                if (box.id == this.newTransaction.items[x].boxNumber) {\n                  labelBox = box.boxLabel;\n                }\n              }\n              axiosClient.post(\"/savePullOutItemRequest\", {\n                plID: response.data.id,\n                companyType: this.newTransaction.company,\n                brand: this.newTransaction.items[x].categorybrand,\n                boxNumber: this.newTransaction.items[x].boxNumber,\n                boxLabel: labelBox,\n                itemCode: this.newTransaction.items[x].code,\n                quantity: this.newTransaction.items[x].quantity,\n                email: sessionStorage.getItem(\"Email\"),\n                status: \"unprocessed\"\n              }).then(response => {}).catch(error => {});\n            }\n            const transactionModal = new bootstrap.Modal(\"#transactionReceipt\");\n            transactionModal.show();\n          }).catch(error => {});\n        }\n        setTimeout(this.handleFileUploadImage, 2000);\n      }\n    },\n    draft(confirmation) {\n      if (confirmation) {\n        try {\n          const uri = window.location.href;\n          var transactionID = uri.split(\"?\")[1];\n          var id = transactionID.split(\"=\")[1].split(\"&\")[0];\n          axiosClient.post(\"/updatePullOutBranchRequest\", {\n            id: id,\n            chainCode: this.newTransaction.chainCode,\n            companyType: this.newTransaction.company,\n            branchName: this.newTransaction.branchName,\n            transactionType: this.newTransaction.transactionType,\n            status: \"draft\",\n            email: sessionStorage.getItem(\"Email\")\n          }).then(response => {\n            for (var x = 0; x < this.newTransaction.items.length; x++) {\n              let labelBox = \"\";\n              for (let box of this.newTransaction.boxLabels) {\n                if (box.id == this.newTransaction.items[x].boxNumber) {\n                  labelBox = box.boxLabel;\n                }\n              }\n              axiosClient.post(\"/updatePullOutItemRequest\", {\n                plID: id,\n                companyType: this.newTransaction.company,\n                brand: this.newTransaction.items[x].categorybrand,\n                boxNumber: this.newTransaction.items[x].boxNumber,\n                boxLabel: labelBox,\n                itemCode: this.newTransaction.items[x].code,\n                quantity: this.newTransaction.items[x].quantity,\n                status: \"draft\",\n                email: sessionStorage.getItem(\"Email\")\n              }).then(response => {}).catch(error => {});\n            }\n            const draftModal = new bootstrap.Modal(\"#draftModal\");\n            draftModal.show();\n          }).catch(error => {});\n        } catch {\n          axiosClient.post(\"/savePullOutBranchRequest\", {\n            chainCode: this.newTransaction.chainCode,\n            companyType: this.newTransaction.company,\n            branchName: this.newTransaction.branchName,\n            transactionType: this.newTransaction.transactionType,\n            status: \"draft\",\n            email: sessionStorage.getItem(\"Email\")\n          }).then(response => {\n            for (var x = 0; x < this.newTransaction.items.length; x++) {\n              let labelBox = \"\";\n              for (let box of this.newTransaction.boxLabels) {\n                if (box.id == this.newTransaction.items[x].boxNumber) {\n                  labelBox = box.boxLabel;\n                }\n              }\n              axiosClient.post(\"/savePullOutItemRequest\", {\n                plID: response.data.id,\n                companyType: this.newTransaction.company,\n                brand: this.newTransaction.items[x].categorybrand,\n                boxNumber: this.newTransaction.items[x].boxNumber,\n                boxLabel: labelBox,\n                itemCode: this.newTransaction.items[x].code,\n                quantity: this.newTransaction.items[x].quantity,\n                status: \"draft\",\n                email: sessionStorage.getItem(\"Email\")\n              }).then(response => {}).catch(error => {});\n            }\n            const draftModal = new bootstrap.Modal(\"#draftModal\");\n            draftModal.show();\n          }).catch(error => {});\n        }\n      }\n    },\n    editBoxLabel(code, quantity, boxNumber) {\n      console.log(\"Items\", code, quantity, boxNumber);\n      this.validateSubmit();\n      var filteredItems = this.newTransaction.items.filter(item => item.code === code && item.boxNumber === boxNumber);\n      var uniqueItems = [];\n      filteredItems.forEach(item => {\n        var existingItem = uniqueItems.find(uniqueItem => uniqueItem.code === item.code);\n        if (existingItem) {\n          existingItem.quantity += item.quantity;\n        } else {\n          uniqueItems.push({\n            ...item\n          });\n        }\n      });\n      this.newTransaction.items = this.newTransaction.items.filter(item => item.code !== uniqueItems[0].code || item.boxNumber !== uniqueItems[0].boxNumber);\n      this.newTransaction.items.push(uniqueItems[0]);\n      this.notifyVue(\"ChangeBoxLabel\", \"bottom\", \"right\");\n    }\n  }\n};","map":{"version":3,"names":["Collapse","CollapseItem","Tabs","TabPane","Card","Button","PProgress","PSwitch","Vue","NotificationTemplate","NotifAddBoxLabel","NotifAddItem","NotifDeleteBoxLabel","NotifDeleteItem","NotifDraftSave","NotifItemChangeBoxLabel","NotifItemQuantity","NotifRenameBoxLabel","NotifSubmitTransaction","Swal","axiosClient","EditBoxLabelModal","TransactionReceiptModal","DraftModal","linkName","ConfirmationSubmitPullOutModal","ConfirmationDraftPullOutModal","axios","isCancel","XLSX","use","_Table","_TableColumn","components","_DatePicker","name","_TimeSelect","_Slider","_Tag","_Input","_Option","_Select","data","transferredData","isCompany","isChainCode","isBranchName","isTransactionType","isShowButton","itemCodeList","isEditBLDisabled","isBoxLabel","isItem","isAddItem","isDisabledSubmit","showItemInput","companyList","chainCodeList","branchNameList","newTransaction","company","chainCode","branchName","transactionType","boxLabels","items","newItemInputBox","isValid","boxLabel","item","isApproved","isSubmit","hoveredRow","transactionTypeList","value","label","newBoxLabel","newItemInput","newBrand","newItemDescription","newStyleCode","newItemCode","notifications","topCenter","modals","classic","notice","mini","isNewBoxLabel","isNewItem","isRightCode","transferTransactionID","uniqueItemss","duplicateItemss","isDenied","dataArray","myData","counter","remarks","remarksList","images","files","img_counter","computed","filteredRemarks","filter","remark","toLowerCase","includes","sortedBoxes","sort","a","b","boxNumber","getItemBoxLabel","find","mounted","tooltipTriggerList","document","querySelectorAll","tooltipList","map","tooltipTriggerEl","bootstrap","Tooltip","fetchEdit","fetchCompany","window","resolveRouteChange","val","console","log","watch","handler","validateSubmit","deep","newTransaction.items","oldVal","addCategoryBoxLabel","newTransaction.boxLabels","enableDropDowns","newTransaction.company","showButtons","newTransaction.chainCode","newTransaction.branchName","newTransaction.transactionType","newSortedBoxes","set","methods","filterRemarks","onFileChange","e","target","dataTransfer","push","length","createImage","vm","index","reader","FileReader","onload","event","imageUrl","result","readAsDataURL","removeImage","splice","clearImage","getElementById","frame","src","handleFileUploadImage","config","headers","post","image","transactionID","then","response","setTimeout","catch","error","handleFileUpload","file","Uint8Array","workbook","read","type","worksheetName","SheetNames","worksheet","Sheets","jsonData","utils","sheet_to_json","header","arrayBox","x","filteredArray","self","indexOf","tempBoxLabel","id","tempItem","saveItemsExcel","readAsArrayBuffer","quantity","get","params","ItemNo","flag","i","code","parseInt","description","ItemDescription","categorybrand","brandNames","size","Size","color","Color","notifyVue","numberOnly","$event","keyCode","which","preventDefault","uniqueItems","Set","itemsValidation","itemsValidationTemp","j","tooltip","getInstance","_config","title","update","disable","editingBoxLabel","tempBL","uri","location","href","split","plID","status","idMap","Map","forEach","has","fetchChainCode","fetchChainName","userID","sessionStorage","getItem","cancelTransaction","updateData","updatedData","openModal","closeModal","showButton","itemId","hideButton","removeItem","fetchItems","compareItemCode","parts","slice","companyType","StyleCode","brandCode","toString","substr","missItemCode","handleQuantity","notify","verticalAlign","horizontalAlign","notification","notifType","$notify","component","props","customValue","addItem","boxNUMBER","saveItem","confirmSave","ItemCode","category","Category","filteredItems","uniqueCategory","strCategory","cancelItem","addBoxLabel","saveBoxLabel","cancelBoxLabel","submit","confirmation","email","labelBox","box","brand","itemCode","transactionModal","Modal","show","draft","draftModal","editBoxLabel","existingItem","uniqueItem"],"sources":["src/components/Dashboard/Views/PullOut/PullOutGenerator.vue"],"sourcesContent":["<template>\n  <div class=\"card\">\n    <!-- <div class=\"card-header\">\n      <h4 class=\"title\">Pull-Out Requisition Form</h4>\n    </div> -->\n    <div class=\"card-body\">\n      <form>\n        <div class=\"row\">\n          <div class=\"col-sm-3\">\n            <fg-input label=\"Company\" :disabled=\"isCompany\">\n              <el-select\n                class=\"select-default\"\n                size=\"large\"\n                placeholder=\"Select Company\"\n                v-model=\"newTransaction.company\"\n                @change=\"\n                  fetchChainCode(),\n                    (newTransaction.chainCode = ''),\n                    (newTransaction.branchName = ''),\n                    (newTransaction.transactionType = '')\n                \"\n                :disabled=\"isCompany\"\n              >\n                <el-option\n                  v-for=\"option in companyList\"\n                  class=\"select-default\"\n                  :value=\"option.shortName\"\n                  :label=\"option.name + ' (' + option.shortName + ') '\"\n                  :key=\"option.id\"\n                >\n                </el-option>\n              </el-select>\n              <label v-show=\"isValid.company\" class=\"label-font\"\n                >Company is required.</label\n              >\n            </fg-input>\n          </div>\n          <div class=\"col-sm-3\">\n            <fg-input label=\"Chain Code\" :disabled=\"isChainCode\">\n              <el-select\n                class=\"select-default\"\n                size=\"large\"\n                placeholder=\"Select Chain Code\"\n                v-model=\"newTransaction.chainCode\"\n                @change=\"\n                  fetchChainName(),\n                    (newTransaction.branchName = ''),\n                    (newTransaction.transactionType = '')\n                \"\n                :disabled=\"isChainCode\"\n              >\n                <el-option\n                  v-for=\"option in chainCodeList\"\n                  class=\"select-default\"\n                  :value=\"option.chainCode\"\n                  :label=\"option.chainCode\"\n                  :key=\"option.chainCode\"\n                >\n                </el-option>\n              </el-select>\n              <label v-show=\"isValid.chainCode\" class=\"label-font\"\n                >Chain Code is required.</label\n              >\n            </fg-input>\n          </div>\n          <div class=\"col-sm-3\">\n            <fg-input label=\"Branch Name\" :disabled=\"isBranchName\">\n              <el-select\n                class=\"select-default\"\n                size=\"large\"\n                placeholder=\"Select Branch Name\"\n                v-model=\"newTransaction.branchName\"\n                @change=\"\n                  (isTransactionType = false), (newTransaction.transactionType = '')\n                \"\n                :disabled=\"isBranchName\"\n              >\n                <el-option\n                  v-for=\"option in branchNameList\"\n                  class=\"select-default\"\n                  :value=\"option.branchName\"\n                  :label=\"option.branchName\"\n                  :key=\"option.branchName\"\n                >\n                </el-option>\n              </el-select>\n              <label v-show=\"isValid.branchName\" class=\"label-font\"\n                >Branch Name is required.</label\n              >\n            </fg-input>\n          </div>\n          <div class=\"col-sm-3\">\n            <fg-input label=\"Transaction Type\" :disabled=\"isTransactionType\">\n              &nbsp;<i\n                data-bs-toggle=\"tooltip\"\n                class=\"nc-icon nc-alert-circle-i font-weight-bold\"\n              ></i>\n              <el-select\n                class=\"select-default\"\n                size=\"large\"\n                placeholder=\"Select Transaction Type\"\n                v-model=\"newTransaction.transactionType\"\n                :disabled=\"isTransactionType\"\n              >\n                <el-option\n                  v-for=\"option in transactionTypeList\"\n                  class=\"select-default\"\n                  :value=\"option.value\"\n                  :label=\"option.label\"\n                  :key=\"option.label\"\n                >\n                </el-option>\n              </el-select>\n              <label v-show=\"isValid.transactionType\" class=\"label-font\"\n                >Transaction Type is required.</label\n              >\n            </fg-input>\n          </div>\n        </div>\n        <div class=\"col-sm-12\">\n          <card type=\"plain\">\n            <div class=\"row\">\n              <div class=\"col-sm-12\" v-show=\"isShowButton\">\n                <p-button\n                  type=\"default\"\n                  link\n                  class=\"font-weight-bold\"\n                  @click.prevent=\"addBoxLabel()\"\n                >\n                  <i class=\"nc-icon nc-simple-add font-weight-bold\"></i> Add Box Label\n                </p-button>\n                <p-button\n                  :disabled=\"isEditBLDisabled\"\n                  type=\"default\"\n                  link\n                  class=\"font-weight-bold\"\n                  data-bs-toggle=\"modal\"\n                  data-bs-target=\"#editboxlabelModal\"\n                  @click=\"openModal(newTransaction)\"\n                >\n                  <i class=\"nc-icon nc-ruler-pencil font-weight-bold\"></i> Edit Box Label\n                </p-button>\n                <button\n                  class=\"btn btn-success btn-fill btn-wd\"\n                  onclick=\"document.getElementById('import_items_excel').click()\"\n                >\n                  Import Items Excel\n                </button>\n                <input\n                  id=\"import_items_excel\"\n                  type=\"file\"\n                  accept=\".xlsx\"\n                  style=\"display: none\"\n                  @change=\"handleFileUpload\"\n                />\n              </div>\n              <form @submit.prevent=\"saveBoxLabel()\">\n                <div class=\"col-sm-12 mx-n3\" v-show=\"isBoxLabel\">\n                  <div class=\"col-sm-12\">\n                    <fg-input\n                      placeholder=\"Box Label\"\n                      v-model=\"newBoxLabel\"\n                      class=\"w-100\"\n                    ></fg-input>\n                  </div>\n                  <div class=\"col-sm-2 mt-n3\">\n                    <p-button\n                      native-type=\"submit\"\n                      type=\"default\"\n                      size=\"sm\"\n                      outline\n                      class=\"font-weight-bold\"\n                    >\n                      <i class=\"nc-icon nc-check-2 font-weight-bold\"></i>\n                    </p-button>\n                    <p-button\n                      type=\"default\"\n                      size=\"sm\"\n                      outline\n                      class=\"font-weight-bold\"\n                      @click.prevent=\"cancelBoxLabel()\"\n                    >\n                      <i class=\"nc-icon nc-simple-remove font-weight-bold\"></i>\n                    </p-button>\n                  </div>\n                  <label v-show=\"isNewBoxLabel\" class=\"label-font pl-3\"\n                    >Box Label is empty.</label\n                  >\n                </div>\n              </form>\n              <label v-show=\"isValid.boxLabel\" class=\"label-font\"\n                >Box Label is required.</label\n              >\n            </div>\n            <collapse>\n              <collapse-item\n                v-for=\"boxLabel in newTransaction.boxLabels\"\n                :key=\"boxLabel.id\"\n                :title=\"`Box No. ${boxLabel.boxNumber} of ${newTransaction.boxLabels.length} \\xa0\\xa0\\xa0 Box Label: ${boxLabel.boxLabel}`\"\n                name=\"1\"\n                class=\"font-weight-bold\"\n              >\n                <div class=\"row\" v-show=\"isAddItem\">\n                  <button\n                    class=\"btn btn-transparent text-left bold-button\"\n                    @click.prevent=\"addItem(boxLabel.boxNumber)\"\n                  >\n                    <i class=\"nc-icon nc-simple-add font-weight-bold\"></i> Add Item\n                  </button>\n                </div>\n                <div>\n                  <form @submit.prevent=\"saveItem(boxLabel.boxNumber)\">\n                    <div\n                      class=\"row\"\n                      v-for=\"newItem in newItemInputBox\"\n                      v-show=\"newItem.id === boxLabel.boxNumber\"\n                    >\n                      <div\n                        class=\"col-sm-12 d-flex mt-2\"\n                        v-if=\"newItem.id == showItemInput\"\n                      >\n                        <input\n                          type=\"text\"\n                          placeholder=\"Item Code\"\n                          v-model=\"newItemInput\"\n                          @input=\"fetchItems\"\n                          @change=\"compareItemCode\"\n                          list=\"items\"\n                          class=\"input-datalist\"\n                        />\n\n                        <datalist id=\"items\">\n                          <option\n                            v-for=\"item in itemCodeList\"\n                            :value=\"item.ItemNo + ' - ' + item.ItemDescription\"\n                            :key=\"item.ItemNo\"\n                          ></option>\n                        </datalist>\n                        <!-- <fg-input placeholder=\"Item\" v-model=\"newItemInput\" class=\"w-100\"></fg-input> -->\n                        <!-- <label> showItemInput: {{ showItemInput }}</label>\n                          <label> newItem.id: {{ newItem.id }}</label> -->\n                        <p-button\n                          native-type=\"submit\"\n                          type=\"default\"\n                          size=\"sm\"\n                          class=\"font-weight-bold\"\n                        >\n                          <i class=\"nc-icon nc-check-2 font-weight-bold\"></i>\n                        </p-button>\n                        <p-button\n                          type=\"default\"\n                          size=\"sm\"\n                          class=\"font-weight-bold\"\n                          @click.prevent=\"cancelItem()\"\n                        >\n                          <i class=\"nc-icon nc-simple-remove font-weight-bold\"></i>\n                        </p-button>\n                      </div>\n                      <label v-show=\"isRightCode\" class=\"label-font font-weight-normal\"\n                        >Invalid Item Code.</label\n                      >\n                      <label v-show=\"isNewItem\" class=\"label-font font-weight-normal\"\n                        >Item code is empty.</label\n                      >\n\n                      <!-- <div class=\"col-sm-12 d-flex\" v-show=\"newItem.id != showItemInput\">\n                          <fg-input :placeholder=\"newItem.id \" v-model=\"newItem.item\" class=\"w-100\"></fg-input>\n                          <p-button type=\"default\" size=\"sm\"   class=\"font-weight-bold\" @click.prevent=\"saveItem(boxLabel.boxLabel)\">\n                            <i class=\"nc-icon nc-check-2 font-weight-bold\"></i> {{ newItem.id }}\n                          </p-button>\n                          <p-button type=\"default\" size=\"sm\"   class=\"font-weight-bold\" @click.prevent=\"cancelItem()\">\n                            <i class=\"nc-icon nc-simple-remove font-weight-bold\"></i>\n                          </p-button>\n                        </div> -->\n                    </div>\n                  </form>\n                </div>\n\n                <div class=\"row\">\n                  <table\n                    class=\"table table-bordered table-hover table-responsive-sm table-font-size font-weight-normal\"\n                  >\n                    <thead>\n                      <tr>\n                        <th scope=\"col\" class=\"text-nowrap\">Item Code</th>\n                        <th scope=\"col\" class=\"text-nowrap\">Description</th>\n                        <th scope=\"col\" class=\"text-nowrap\">Size</th>\n                        <th scope=\"col\" class=\"text-nowrap\">Color</th>\n                        <th scope=\"col\" class=\"text-nowrap\">Category/Brand</th>\n                        <th scope=\"col\" class=\"text-nowrap\">Quantity</th>\n                        <th scope=\"col\" class=\"text-nowrap\">Box Label</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr\n                        v-show=\"boxLabel.boxNumber == item.boxNumber\"\n                        v-for=\"item in newTransaction.items\"\n                        :key=\"item.code\"\n                      >\n                        <th scope=\"row\" class=\"px-3 d-flex\">\n                          <button\n                            class=\"table-delete-button\"\n                            @click.prevent=\"removeItem(item.code, item.boxNumber)\"\n                          >\n                            <i class=\"nc-icon nc-simple-remove font-weight-bold\"></i>\n                          </button>\n                          {{ item.code }}\n                        </th>\n                        <td class=\"cell px-3\" style=\"width: 550px\">\n                          {{ item.description }}\n                        </td>\n                        <td class=\"cell px-3\" style=\"width: 10px\">\n                          {{ item.size }}\n                        </td>\n                        <td class=\"cell px-3\" style=\"width: 20px\">\n                          {{ item.color }}\n                        </td>\n                        <td class=\"cell px-3\" style=\"width: 300px\">\n                          {{ item.categorybrand }}\n                        </td>\n                        <!-- <td class=\"cell\" style=\"width: 50px\">\n                          <input\n                            type=\"number\"\n                            @blur=\"handleQuantity(item.id)\"\n                            v-model=\"item.quantity\"\n                            class=\"table-input-box\"\n                            @keypress=\"numberOnly\"\n                          />\n                        </td> -->\n                        <td class=\"cell\">\n                          <span>\n                            <div class=\"btn-group btn-group-sm d-flex flex-row\">\n                              <p-button\n                                type=\"default\"\n                                round\n                                outline\n                                size=\"xs\"\n                                @click=\"item.quantity > 0 ? item.quantity-- : 0\"\n                              >\n                                <i class=\"nc-icon nc-simple-delete\"></i>\n                              </p-button>\n                              <input\n                                type=\"text\"\n                                @blur=\"handleQuantity(item)\"\n                                v-model=\"item.quantity\"\n                                class=\"table-input-box\"\n                                style=\"width: 75px; text-align: center\"\n                                @keypress=\"numberOnly\"\n                              />\n                              <p-button\n                                type=\"default\"\n                                round\n                                outline\n                                size=\"xs\"\n                                @click=\"item.quantity++\"\n                              >\n                                <i class=\"nc-icon nc-simple-add\"></i>\n                              </p-button>\n                            </div>\n                          </span>\n                        </td>\n                        <td class=\"cell\" style=\"width: 300px\">\n                          <el-select\n                            class=\"table-select-box\"\n                            size=\"large\"\n                            v-model=\"item.boxNumber\"\n                            @change=\"\n                              editBoxLabel(item.code, item.quantity, item.boxNumber)\n                            \"\n                          >\n                            <el-option\n                              v-for=\"boxLabel in newTransaction.boxLabels\"\n                              class=\"table-select-box\"\n                              :value=\"boxLabel.boxNumber\"\n                              :label=\"boxLabel.boxLabel\"\n                              :key=\"boxLabel.id\"\n                            >\n                            </el-option>\n                          </el-select>\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n                <div class=\"row\">\n                  <input\n                    placeholder=\"Input Items Remarks\"\n                    v-model=\"remarks\"\n                    @input=\"filterRemarks\"\n                    class=\"input-datalist\"\n                    list=\"remarks\"\n                  />\n                  <datalist id=\"remarks\">\n                    <option v-for=\"remark in filteredRemarks\" :value=\"remark\">\n                      {{ remark }}\n                    </option>\n                  </datalist>\n                </div>\n              </collapse-item>\n              <label v-show=\"isValid.item\" class=\"label-font\">Item is required.</label>\n            </collapse>\n          </card>\n          <div>\n            <h2>Select an image</h2>\n            <input multiple type=\"file\" ref=\"image\" @change=\"onFileChange\" />\n          </div>\n          <div v-if=\"images\">\n            <div v-for=\"(image, index) in images\">\n              <img :src=\"image\" />\n              <button @click=\"removeImage(index)\">Remove image</button>\n            </div>\n          </div>\n        </div>\n        <div class=\"text-center\">\n          <button\n            type=\"submit\"\n            class=\"btn btn-warning btn-fill btn-wd\"\n            data-bs-target=\"#confirmationDraftPullOut\"\n            data-bs-toggle=\"modal\"\n            v-show=\"isDenied\"\n          >\n            Draft\n          </button>\n          <button\n            type=\"submit\"\n            class=\"btn btn-warning btn-fill btn-wd\"\n            @click.prevent=\"cancelTransaction\"\n            v-show=\"isCancel\"\n          >\n            Cancel\n          </button>\n          <button\n            type=\"submit\"\n            class=\"btn btn-info btn-fill btn-wd\"\n            @click.prevent=\"submit\"\n            v-show=\"isApproved\"\n          >\n            Approved\n          </button>\n          <span\n            id=\"submitBTN\"\n            class=\"d-inline-block\"\n            tabindex=\"0\"\n            data-bs-toggle=\"tooltip\"\n            data-bs-placement=\"bottom\"\n          >\n            <button\n              :disabled=\"isDisabledSubmit\"\n              type=\"submit\"\n              class=\"btn btn-info btn-fill btn-wd\"\n              data-bs-target=\"#confirmationSubmitPullOut\"\n              data-bs-toggle=\"modal\"\n              v-show=\"isSubmit\"\n            >\n              Submit\n            </button></span\n          >\n        </div>\n        <div class=\"clearfix\"></div>\n      </form>\n      <EditBoxLabelModal\n        :transferredData=\"transferredData\"\n        :newItemInputBox=\"newItemInputBox\"\n        @closeModal=\"transferredData\"\n        @renameBoxLabel=\"editingBoxLabel($event)\"\n      ></EditBoxLabelModal>\n    </div>\n    <TransactionReceiptModal\n      :transferTransactionID=\"transferTransactionID\"\n    ></TransactionReceiptModal>\n    <DraftModal :transferTransactionID=\"transferTransactionID\"></DraftModal>\n    <ConfirmationSubmitPullOutModal\n      @confirm=\"submit($event)\"\n    ></ConfirmationSubmitPullOutModal>\n    <ConfirmationDraftPullOutModal\n      @confirm=\"draft($event)\"\n    ></ConfirmationDraftPullOutModal>\n  </div>\n</template>\n<script>\nimport {\n  Collapse,\n  CollapseItem,\n  Tabs,\n  TabPane,\n  Card,\n  Button,\n} from \"src/components/UIComponents\";\nimport { DatePicker, TimeSelect, Slider, Tag, Input, Select, Option } from \"element-ui\";\nimport PProgress from \"src/components/UIComponents/Progress.vue\";\nimport PSwitch from \"src/components/UIComponents/Switch.vue\";\nimport Vue from \"vue\";\nimport NotificationTemplate from \"../Components/NotificationTemplate\";\nimport NotifAddBoxLabel from \"../Components/Notification/NotifSuccessAddBoxLabel.vue\";\nimport NotifAddItem from \"../Components/Notification/NotifSuccessAddItem.vue\";\nimport NotifDeleteBoxLabel from \"../Components/Notification/NotifSuccessDeleteBoxLabel.vue\";\nimport NotifDeleteItem from \"../Components/Notification/NotifSuccessDeleteItem.vue\";\nimport NotifDraftSave from \"../Components/Notification/NotifSuccessDraftSave.vue\";\nimport NotifItemChangeBoxLabel from \"../Components/Notification/NotifSuccessItemChangeBoxLabel.vue\";\nimport NotifItemQuantity from \"../Components/Notification/NotifSuccessItemQuantity.vue\";\nimport NotifRenameBoxLabel from \"../Components/Notification/NotifSuccessRenameBoxLabel.vue\";\nimport NotifSubmitTransaction from \"../Components/Notification/NotifSuccessSubmitTransaction.vue\";\nimport Swal from \"sweetalert2\";\nimport { Table, TableColumn } from \"element-ui\";\nimport axiosClient from \"../../../../axios\";\nimport EditBoxLabelModal from \"./PullOutRequests/ModalPullOut/EditBoxLabelModal.vue\";\nimport TransactionReceiptModal from \"./PullOutRequests/ModalPullOut/TransactionReceiptModal.vue\";\nimport DraftModal from \"./PullOutRequests/ModalPullOut/DraftModal.vue\";\nimport linkName from \"../../../../linkName\";\nimport ConfirmationSubmitPullOutModal from \"./PullOutRequests/ModalPullOut/ConfirmationSubmitPullOutModal.vue\";\nimport ConfirmationDraftPullOutModal from \"./PullOutRequests/ModalPullOut/ConfirmationDraftPullOutModal.vue\";\nimport axios, { isCancel } from \"axios\";\nimport * as XLSX from \"xlsx\";\n\nVue.use(Table);\nVue.use(TableColumn);\n\nexport default {\n  components: {\n    [DatePicker.name]: DatePicker,\n    [TimeSelect.name]: TimeSelect,\n    [Slider.name]: Slider,\n    [Tag.name]: Tag,\n    [Input.name]: Input,\n    [Button.name]: Button,\n    [Option.name]: Option,\n    [Select.name]: Select,\n    PSwitch,\n    PProgress,\n    TabPane,\n    Tabs,\n    CollapseItem,\n    Collapse,\n    Card,\n    NotificationTemplate,\n    NotifAddBoxLabel,\n    NotifAddItem,\n    NotifDeleteBoxLabel,\n    NotifDeleteItem,\n    NotifDraftSave,\n    NotifItemChangeBoxLabel,\n    NotifItemQuantity,\n    NotifRenameBoxLabel,\n    NotifSubmitTransaction,\n    EditBoxLabelModal,\n    TransactionReceiptModal,\n    DraftModal,\n    ConfirmationSubmitPullOutModal,\n    ConfirmationDraftPullOutModal,\n  },\n  data() {\n    return {\n      transferredData: \"\",\n      isCompany: false,\n      isChainCode: true,\n      isBranchName: true,\n      isTransactionType: true,\n      isShowButton: false,\n      itemCodeList: [],\n      isEditBLDisabled: false,\n      isBoxLabel: false,\n      isItem: false,\n      isAddItem: true,\n      isDisabledSubmit: true,\n      showItemInput: \"\",\n      companyList: [],\n      chainCodeList: [],\n      branchNameList: [],\n      newTransaction: {\n        //input variable\n        company: \"\",\n        chainCode: \"\",\n        branchName: \"\",\n        transactionType: \"\",\n        boxLabels: [], //list of inputted box label\n        items: [], //list of inputted item\n      },\n      newItemInputBox: [],\n      isValid: {\n        company: false,\n        chainCode: false,\n        branchName: false,\n        transactionType: false,\n        boxLabel: false,\n        item: false,\n      },\n      isApproved: false,\n      isCancel: false,\n      isSubmit: true,\n      hoveredRow: null,\n\n      transactionTypeList: [\n        {\n          value: \"CPO - BranchDisposal\",\n          label: \"CPO Item for Disposal in the Store c/o Supervisor\",\n        },\n        { value: \"CPO - Store\", label: \"CPO for Transfer to Another Store\" },\n        { value: \"CPO - Warehouse\", label: \"CPO Back to WH via In-House Service\" },\n        {\n          value: \"CPO - Warehouse\",\n          label: \"CPO Back to WH via Chain Distribution Center\",\n        },\n        { value: \"CPO - Warehouse\", label: \"CPO Back to WH via 3rd Party Trucking\" },\n        { value: \"CPO - Warehouse\", label: \"CPO Back to WH c/o Supervisor\" },\n        { value: \"CPO - Warehouse(DC)\", label: \"Concess Direct Pull-Out\" },\n      ],\n      newBoxLabel: \"\",\n      newItemInput: \"\",\n      newBrand: \"\",\n      newItemDescription: \"\",\n      newStyleCode: \"\",\n      newItemCode: \"\",\n      notifications: {\n        topCenter: false,\n      },\n      modals: {\n        classic: false,\n        notice: false,\n        mini: false,\n      },\n      isNewBoxLabel: false,\n      isNewItem: false,\n      isRightCode: false,\n      transferTransactionID: \"\",\n      uniqueItemss: [],\n      duplicateItemss: [],\n      isDenied: true,\n      dataArray: [],\n      myData: [],\n      counter: 0,\n      remarks: \"\",\n      remarksList: [\"GOOD\", \"DAMAGED/DIRTY\", \"DISPOSAL\"],\n      images: [],\n      files: [],\n      img_counter: 0,\n    };\n  },\n  computed: {\n    filteredRemarks() {\n      return this.remarksList.filter((remark) => {\n        return remark.toLowerCase().includes(this.remarks.toLowerCase());\n      });\n    },\n    sortedBoxes() {\n      return this.newTransaction.boxLabels.sort((a, b) => a.boxNumber - b.boxNumber);\n    },\n    getItemBoxLabel() {\n      return (boxNumber) => {\n        const boxLabel = this.newTransaction.boxLabels.find(\n          (label) => label.boxNumber === boxNumber\n        );\n        return boxLabel ? boxLabel.boxLabel : \"\";\n      };\n    },\n  },\n  mounted() {\n    const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n    const tooltipList = [...tooltipTriggerList].map(\n      (tooltipTriggerEl) => new bootstrap.Tooltip(tooltipTriggerEl)\n    );\n    // this.processData();\n    this.fetchEdit();\n    this.fetchCompany();\n    if (window.resolveRouteChange) {\n      window.resolveRouteChange();\n      window.resolveRouteChange = null;\n    }\n    linkName.val = \"Pull-Out Requisition Form\";\n    console.log(\n      this.isCompany,\n      this.isChainCode,\n      this.isBranchName,\n      this.isTransactionType\n    );\n  },\n  watch: {\n    newTransaction: {\n      handler(val) {\n        this.validateSubmit();\n      },\n      deep: true,\n    },\n    \"newTransaction.items\": function (val, oldVal) {\n      this.addCategoryBoxLabel();\n    },\n    \"newTransaction.boxLabels\": function (val, oldVal) {\n      this.enableDropDowns();\n    },\n    \"newTransaction.company\": function (val, oldVal) {\n      this.showButtons();\n    },\n    \"newTransaction.chainCode\": function (val, oldVal) {\n      this.showButtons();\n    },\n    \"newTransaction.branchName\": function (val, oldVal) {\n      this.showButtons();\n    },\n    \"newTransaction.transactionType\": function (val, oldVal) {\n      this.showButtons();\n    },\n    sortedBoxes(newSortedBoxes) {\n      // Option 1: Using Vue.set\n      Vue.set(this, \"newTransaction.boxLabels\", newSortedBoxes);\n\n      // Option 2: Reassigning the array\n      // this.boxes = newSortedBoxes.slice();\n    },\n  },\n  methods: {\n    addCategoryBoxLabel() {\n      // var filteredItems = this.newTransaction.items.filter(\n      //   (item) => item.boxNumber === boxNUMBER\n      // );\n      // console.log(\"filtered: \", filteredItems);\n      // var uniqueCategory = [...new Set(filteredItems.map((item) => item.category))];\n      // console.log(\"Category: \", uniqueCategory);\n      // let strCategory = \"\";\n      // for (let i = 0; i < uniqueCategory.length; i++) {\n      //   if (i == 0) strCategory = \" [ \" + uniqueCatgory[i];\n      //   else strCategory = strCategory + \", \" + uniqueCatgory[i];\n      // }\n      // console.log(\"Box Labels: \", this.newTransaction.boxLabels);\n      // this.newTransaction.boxLabels.forEach(function (box) {\n      //   console.log(\"box: \", box);\n      //   if (box.boxNumber === boxNUMBER) box.boxLabel = box.boxLabel + strCategory + \" ]\";\n      // });\n    },\n    filterRemarks() {\n      this.filteredRemarks = this.remarksList.filter((remark) => {\n        return remark.toLowerCase().includes(this.remarks.toLowerCase());\n      });\n    },\n    onFileChange(e) {\n      var files = e.target.files || e.dataTransfer.files;\n\n      this.files.push(e.target.files[0]);\n\n      if (!files.length) return;\n      this.createImage(files);\n    },\n    createImage(files) {\n      var vm = this;\n      for (var index = 0; index < files.length; index++) {\n        var reader = new FileReader();\n        reader.onload = function (event) {\n          const imageUrl = event.target.result;\n          vm.images.push(imageUrl);\n        };\n        reader.readAsDataURL(files[index]);\n      }\n    },\n    removeImage(index) {\n      this.images.splice(index, 1);\n    },\n    clearImage() {\n      document.getElementById(\"formFile\").value = null;\n      frame.src = \"\";\n    },\n    handleFileUploadImage() {\n      console.log(\"image:\", this.files);\n      console.log(\"Transaction ID:\", this.transferTransactionID);\n      const config = {\n        headers: {\n          \"content-type\": \"multipart/form-data\",\n        },\n      };\n\n      if (this.img_counter < this.files.length) {\n        axiosClient\n          .post(\n            \"/upload\",\n            {\n              image: this.files[this.img_counter],\n              company: this.newTransaction.company,\n              branchName: this.newTransaction.branchName,\n              transactionID: this.transferTransactionID,\n            },\n            config\n          )\n          .then((response) => {\n            console.log(\"Success Upload Image\", response.data);\n            this.img_counter++;\n            setTimeout(this.handleFileUploadImage, 2000);\n          })\n          .catch((error) => {\n            console.error(error);\n          });\n      }\n    },\n    handleFileUpload(event) {\n      console.log(\"File Name: \", event.target.files[0].name);\n      const file = event.target.files[0];\n      const reader = new FileReader();\n\n      reader.onload = (e) => {\n        const data = new Uint8Array(e.target.result);\n        const workbook = XLSX.read(data, { type: \"array\" });\n\n        const worksheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[worksheetName];\n\n        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n        // header: 1 indicates that the first row contains column headers\n\n        // Save the JSON data to a Vue variable\n        console.log(\"Excel Data\", jsonData);\n        this.myData = jsonData;\n        let arrayBox = [];\n        for (var x = 0; x < this.myData.length; x++) {\n          this.dataArray.push(this.myData[x]);\n          arrayBox.push(this.myData[x][1]);\n        }\n\n        console.log(\"Data:\", this.dataArray);\n\n        console.log(\"Import Excel\", this.dataArray.length);\n\n        const filteredArray = arrayBox.filter((value, index, self) => {\n          return self.indexOf(value) === index;\n        });\n\n        let tempBoxLabel = [];\n        for (var x = 0; x < filteredArray.length; x++) {\n          tempBoxLabel = {\n            id: x + 1,\n            boxNumber: x + 1,\n            boxLabel: filteredArray[x],\n          };\n\n          this.newTransaction.boxLabels.push(tempBoxLabel);\n          let tempItem = [];\n\n          if (this.newTransaction.boxLabels.length == 0) {\n            tempItem = {\n              id: this.newTransaction.boxLabels.length + 1,\n            };\n          } else {\n            tempItem = {\n              id:\n                this.newTransaction.boxLabels[this.newTransaction.boxLabels.length - 1]\n                  .id + 1,\n            };\n          }\n          this.newItemInputBox.push(tempItem);\n        }\n\n        console.log(filteredArray);\n        // for (var x = 0; x < this.dataArray.length; x++) {\n        //   console.log(\"ItemCode\", this.dataArray[x][2]);\n        // }\n        // var y = 0;\n        // while (y < this.dataArray.length) {\n\n        //   y++;\n        // }\n        this.counter = 0;\n        this.saveItemsExcel();\n      };\n\n      reader.readAsArrayBuffer(file);\n    },\n\n    saveItemsExcel() {\n      if (this.counter < this.dataArray.length) {\n        // console.log(\"Data\", this.dataArray[this.counter - 1]);\n        var boxNumber = this.dataArray[this.counter][0];\n        var quantity = this.dataArray[this.counter][3];\n        axiosClient\n          .get(\"/fetchSameItems\", {\n            params: {\n              company: this.newTransaction.company,\n              ItemNo: this.dataArray[this.counter][2],\n            },\n          })\n          .then((response) => {\n            console.log(\"Data\", response.data);\n            if (response.data.length == 0) {\n              setTimeout(this.saveItemsExcel, 2000);\n            }\n            for (var x = 0; x < response.data.length; x++) {\n              var flag = true;\n\n              for (var i = 0; i < this.newTransaction.items.length; i++) {\n                if (\n                  this.newTransaction.items[i].code == response.data[x].ItemNo &&\n                  this.newTransaction.items[i].boxNumber == boxNumber\n                ) {\n                  this.newTransaction.items[i].quantity =\n                    parseInt(this.newTransaction.items[x].quantity) + 1;\n                  flag = false;\n                  break;\n                }\n              }\n              if (flag) {\n                let tempItem = {\n                  code: response.data[x].ItemNo,\n                  description: response.data[x].ItemDescription,\n                  categorybrand: response.data[x].brandNames,\n                  quantity: quantity,\n                  size: response.data[x].Size,\n                  color: response.data[x].Color,\n                  // boxLabel: label,\n                  boxNumber: parseInt(boxNumber),\n                };\n                this.newTransaction.items.push(tempItem);\n              }\n\n              console.log(\"Items\", this.newTransaction.items);\n\n              this.isAddItem = true;\n              this.notifyVue(\"AddItem\", \"bottom\", \"right\");\n              setTimeout(this.saveItemsExcel, 2000);\n            }\n          })\n          .catch((error) => {\n            console.error(error);\n          });\n      }\n      this.counter++;\n    },\n\n    numberOnly($event) {\n      let keyCode = $event.keyCode ? $event.keyCode : $event.which;\n      if (keyCode < 48 || keyCode > 57) {\n        // 46 is dot\n        $event.preventDefault();\n      }\n    },\n    validateSubmit() {\n      let uniqueItems = [\n        ...new Set(this.newTransaction.items.map((item) => item.boxNumber)),\n      ];\n      let itemsValidation = false;\n      let itemsValidationTemp = false;\n      for (let j in this.newTransaction.boxLabels) {\n        for (let i in uniqueItems) {\n          if (uniqueItems[i] == this.newTransaction.boxLabels[j].id) {\n            itemsValidationTemp = true;\n            itemsValidation = true;\n            break;\n          } else {\n            itemsValidation = false;\n            itemsValidationTemp = false;\n          }\n        }\n      }\n      for (let x in this.newTransaction.items)\n        if (this.newTransaction.items[x].quantity == 0) {\n          itemsValidation = false;\n          let tooltip = bootstrap.Tooltip.getInstance(\"#submitBTN\");\n          tooltip._config.title = \"No items should have a quantity with 0.\";\n          tooltip.update();\n          break;\n        }\n      if (!itemsValidationTemp) {\n        let tooltip = bootstrap.Tooltip.getInstance(\"#submitBTN\");\n        tooltip._config.title = \"Kindly add item/s on every boxes you've added.\";\n        tooltip.update();\n      }\n      if (\n        !this.newTransaction.company ||\n        !this.newTransaction.chainCode ||\n        !this.newTransaction.branchName ||\n        !this.newTransaction.transactionType\n      ) {\n        let tooltip = bootstrap.Tooltip.getInstance(\"#submitBTN\");\n        tooltip._config.title = \"Complete the form above to enable this button.\";\n        tooltip.update();\n      } else if (this.newTransaction.boxLabels.length <= 0) {\n        let tooltip = bootstrap.Tooltip.getInstance(\"#submitBTN\");\n        tooltip._config.title =\n          \"No box added. Kindly add box/es to be able to add item/s.\";\n        tooltip.update();\n      } else if (this.newTransaction.items.length <= 0) {\n        let tooltip = bootstrap.Tooltip.getInstance(\"#submitBTN\");\n        tooltip._config.title =\n          \"No items added. Kindly add item/s for this pull-out request.\";\n        tooltip.update();\n      }\n      if (\n        this.newTransaction.company &&\n        this.newTransaction.chainCode &&\n        this.newTransaction.branchName &&\n        this.newTransaction.transactionType &&\n        this.newTransaction.boxLabels.length > 0 &&\n        itemsValidation\n      ) {\n        this.isDisabledSubmit = false;\n        let tooltip = bootstrap.Tooltip.getInstance(\"#submitBTN\");\n        tooltip.disable();\n      } else this.isDisabledSubmit = true;\n    },\n    editingBoxLabel({ index, value, tempBL }) {\n      if (value) this.newTransaction.boxLabels[index].boxLabel = value;\n      else this.newTransaction.boxLabels[index].boxLabel = tempBL;\n    },\n    enableDropDowns() {\n      if (this.newTransaction.boxLabels.length == 0) {\n        this.isCompany = false;\n        this.isChainCode = false;\n        this.isBranchName = false;\n        this.isTransactionType = false;\n        this.isEditBLDisabled = true;\n        // console.log(this.newTransaction.boxLabels.length);\n      } else this.isEditBLDisabled = false;\n    },\n    showButtons() {\n      if (\n        this.newTransaction.company &&\n        this.newTransaction.chainCode &&\n        this.newTransaction.branchName &&\n        this.newTransaction.transactionType\n      ) {\n        this.isShowButton = true;\n        if (this.newTransaction.boxLabels.length == 0) this.isEditBLDisabled = true;\n        else this.isEditBLDisabled = false;\n      } else this.isShowButton = false;\n    },\n    fetchEdit() {\n      try {\n        const uri = window.location.href;\n        var transactionID = uri.split(\"?\")[1];\n        var id = transactionID.split(\"=\")[1].split(\"&\")[0];\n        // console.log(\"ID\", id);\n        // console.log(\"Company\", transactionID.split(\"=\")[2]);\n        var company = transactionID.split(\"=\")[2];\n        axiosClient\n          .get(\"/fetchEditDraftBranch\", {\n            params: {\n              company: company,\n              plID: id,\n            },\n          })\n          .then((response) => {\n            // console.log(\"Edit Branch:\", response.data, this.itemss);\n            this.newTransaction.company = response.data[0].company;\n            this.newTransaction.branchName = response.data[0].branchName;\n            this.newTransaction.chainCode = response.data[0].chainCode;\n            this.newTransaction.transactionType = response.data[0].transactionType;\n\n            if (\n              response.data[0].status == \"denied\" ||\n              response.data[0].status == \"endorsement\" ||\n              response.data[0].status == \"unprocessed\"\n            ) {\n              this.isDenied = false;\n              this.isCancel = true;\n            }\n\n            if (response.data[0].status == \"endorsement\") {\n              this.isApproved = true;\n              this.isSubmit = false;\n            }\n\n            axiosClient\n              .get(\"/fetchEditDraftItem\", {\n                params: {\n                  company: company,\n                  plID: id,\n                },\n              })\n              .then((response) => {\n                // console.log(\"Edit Item:\", response.data);\n                for (var x = 0; x < response.data.length; x++) {\n                  this.newTransaction.items.push(response.data[x]);\n                  // console.log(\"New Items:\", this.newTransaction.items);\n                }\n\n                const idMap = new Map();\n\n                this.newTransaction.items.forEach((item) => {\n                  if (!idMap.has(item.id)) {\n                    // Unique ID\n                    idMap.set(item.id, true);\n                    this.newTransaction.boxLabels.push({\n                      id: item.boxNumber,\n                      boxLabel: item.boxLabel,\n                    });\n                    this.newItemInputBox.push({\n                      id: item.boxNumber,\n                    });\n                  }\n                });\n                // console.log(\"Edit Labels:\", this.newTransaction.boxLabels);\n\n                // console.log(\n                //   \"this.newTransaction.transactionType:\",\n                //   this.newTransaction.transactionType\n                // );\n\n                if (this.newTransaction.company) {\n                  this.isCompany = false;\n                  this.isChainCode = false;\n                  this.fetchCompany();\n                  this.fetchChainCode();\n                }\n\n                if (this.newTransaction.chainCode) {\n                  this.isChainCode = false;\n                  this.isBranchName = false;\n                  this.fetchChainName();\n                  this.fetchChainCode();\n                }\n\n                if (this.newTransaction.branchName) {\n                  this.isBranchName = false;\n                  this.isTransactionType = false;\n                  this.fetchChainName();\n                }\n\n                if (this.newTransaction.transactionType) {\n                  // console.log(\"Yes\", this.isShowButton);\n                  this.isCompany = false;\n                  this.isChainCode = false;\n                  this.isBranchName = false;\n                  this.isTransactionType = false;\n                  // this.isShowButton = true;\n                  // console.log(\"Yes 2\", this.isShowButton);\n                }\n\n                if (this.newTransaction.items.length) {\n                  // console.log(\"Disable\", this.newTransaction.items.length);\n                  this.isCompany = true;\n                  this.isChainCode = true;\n                  this.isBranchName = true;\n                  this.isTransactionType = true;\n                  // this.isShowButton = true;\n                }\n              })\n              .catch((error) => {\n                // console.error(error);\n              });\n          })\n          .catch((error) => {\n            // console.error(error);\n          });\n      } catch {\n        // console.log(\"No Edit\");\n        //Fetching Promo Info\n        axiosClient\n          .get(\"/fetchPromoBranchInfo\", {\n            params: {\n              userID: sessionStorage.getItem(\"UserID\"),\n            },\n          })\n          .then((response) => {\n            // console.log(\"Promo Branch Info:\", response.data);\n            this.newTransaction.company = response.data[0].company;\n            this.newTransaction.chainCode = response.data[0].chainCode;\n            this.newTransaction.branchName = response.data[0].branchName;\n          })\n          .catch((error) => {\n            // console.error(error);\n          });\n      }\n    },\n    cancelTransaction() {\n      location.href = \"http://192.168.0.7:4040/#/pull-out/requests\";\n    },\n    updateData(updatedData) {\n      // this.newTransaction.boxLabels = updatedData;\n      // console.log(\"das\", updatedData);\n    },\n    openModal(data) {\n      this.transferredData = data;\n    },\n    closeModal() {\n      this.transferredData = \"\";\n    },\n    showButton(itemId) {\n      this.hoveredRow = itemId;\n    },\n    hideButton(itemId) {\n      this.hoveredRow = null;\n    },\n    removeItem(code, boxNumber) {\n      this.validateSubmit();\n      // console.log(\"New DATAs\", code, boxNumber);\n      this.newTransaction.items = this.newTransaction.items.filter(\n        (item) => item.code !== code || item.boxNumber !== boxNumber\n      );\n\n      this.notifyVue(\"DeleteItem\", \"bottom\", \"right\");\n\n      // alert(\"Your data: \" + JSON.stringify(data));\n\n      // console.log(\"New DATA\", data);\n    },\n    fetchItems() {\n      if (this.newItemInput.length >= 4) {\n        if (\n          this.newTransaction.company == \"NBFI\" ||\n          this.newTransaction.company == \"CMC\" ||\n          this.newTransaction.company == \"ASC\"\n        ) {\n          axiosClient\n            .get(\"/fetchItemsNBFI\", {\n              params: {\n                ItemNo: this.newItemInput,\n              },\n            }) // Make a GET request to the specified URL\n            .then((response) => {\n              //console.log(\"Item Code Response: \", response.data);\n              this.itemCodeList = response.data; // Update the 'data' variable with the retrieved data\n\n              // // this.itemCodeArray = Object.keys(this.itemCodeList).map((ItemNo) => ({\n              // //   ItemNo: ItemNo,\n              // // }));\n              //     console.log(\"Success Array Item: \", this.itemCodeArray);\n              //    console.log(\"Success Item: \", response.data);\n              //this.validateItemCode();\n            })\n            .catch((error) => {\n              // console.error(error.reponse); // Handle any errors that may occur\n            });\n        } else {\n          axiosClient\n            .get(\"/fetchItems\", {\n              params: {\n                ItemNo: this.newItemInput,\n              },\n            }) // Make a GET request to the specified URL\n            .then((response) => {\n              //console.log(\"Item Code Response: \", response.data);\n              this.itemCodeList = response.data; // Update the 'data' variable with the retrieved data\n\n              // // this.itemCodeArray = Object.keys(this.itemCodeList).map((ItemNo) => ({\n              // //   ItemNo: ItemNo,\n              // // }));\n              //     console.log(\"Success Array Item: \", this.itemCodeArray);\n              //    console.log(\"Success Item: \", response.data);\n              //this.validateItemCode();\n            })\n            .catch((error) => {\n              // console.error(error.reponse); // Handle any errors that may occur\n            });\n        }\n      } else if (this.newItemInput.length == 0) this.itemCodeList = [];\n    },\n    compareItemCode() {\n      let value = this.newItemInput;\n      if (value.indexOf(\" - \") >= 0) {\n        let parts = value.split(\" - \");\n        this.newItemInput = parts[0];\n      }\n      // console.log(\"Length Item Code:\", this.newItemCode.length > 16);\n      if (this.newItemInput.length > 16) {\n        // this.showTooltip = true;\n        this.newItemInput = this.newItemInput.slice(0, 16);\n      } else {\n        // this.showTooltip = false;\n      }\n      axiosClient\n        .get(\"/compareItemCode\", {\n          params: {\n            companyType: this.newTransaction.company,\n            ItemNo: this.newItemInput,\n          },\n        })\n        .then((response) => {\n          //console.log(\"Success Item No:\", response.data);\n          //console.log(\"Success Item Description\", response.data[0].ItemDescription);\n          this.newItemCode = response.data[0].ItemNo;\n          this.newItemDescription = response.data[0].ItemDescription;\n          this.newStyleCode = response.data[0].StyleCode;\n          // console.log(\n          //   \"Convert to String Item Description\",\n          //   response.data[0].ItemDescription.toString()\n          // );\n          let brandCode = response.data[0].ItemNo.toString().substr(1, 2);\n\n          // console.log(\"Brand Code\", brandCode);\n\n          axiosClient\n            .get(\"/fetchBrands\", {\n              params: {\n                companyType: this.newTransaction.company,\n                brandCode: brandCode,\n              },\n            })\n            .then((response) => {\n              //console.log(\"Success\", response.data);\n              this.newBrand = response.data[0].brandNames;\n              // console.log(\"Box Data:\", this.boxes);\n              // console.log(\"Box Count:\", this.boxes.length);\n              // if (this.boxes.length == 1) {\n              //   this.newItemBoxType = this.boxes[0].boxType + \"-\" + this.boxes[0].id;\n              //   // console.log(\"TEst\", this.boxes[0].boxType);\n              // }\n              // this.$refs.Quantity.focus();\n            })\n            .catch((error) => {\n              //console.error(error);\n            });\n        })\n        .catch((error) => {\n          this.missItemCode = 0;\n          !this.newItemInput ? true : (this.isRightCode = true);\n          //console.log(\"Not Equal\");\n          //console.error(error);\n        });\n    },\n    handleQuantity(item) {\n      //console.log(\"Item Quantity\", item.quantity);\n      if (!item.quantity) {\n        //console.log(\"Empty\");\n        item.quantity = 0;\n      }\n      this.notifyVue(\"ItemQuantity\", \"bottom\", \"right\");\n    },\n    notifyVue(notify, verticalAlign, horizontalAlign) {\n      var notification = \"\";\n      let notifType = \"\";\n\n      if (notify === \"AddBoxLabel\") {\n        notification = NotifAddBoxLabel;\n        notifType = \"success\";\n      } else if (notify === \"AddItem\") {\n        notification = NotifAddItem;\n        notifType = \"success\";\n      } else if (notify === \"DeleteBoxLabel\") {\n        notification = NotifDeleteBoxLabel;\n        notifType = \"danger\";\n      } else if (notify === \"DeleteItem\") {\n        notification = NotifDeleteItem;\n        notifType = \"danger\";\n      } else if (notify === \"DraftSave\") {\n        notification = NotifDraftSave;\n        notifType = \"success\";\n      } else if (notify === \"ChangeBoxLabel\") {\n        notification = NotifItemChangeBoxLabel;\n        notifType = \"success\";\n      } else if (notify === \"ItemQuantity\") {\n        notification = NotifItemQuantity;\n        notifType = \"success\";\n      } else if (notify === \"RenameBoxLabel\") {\n        notification = NotifRenameBoxLabel;\n        notifType = \"success\";\n      } else {\n        notification = NotifSubmitTransaction;\n        notifType = \"success\";\n      }\n\n      this.$notify({\n        component: notification,\n        // icon: \"nc-icon nc-bell-55\",\n        horizontalAlign: horizontalAlign,\n        verticalAlign: verticalAlign,\n        type: notifType,\n        props: {\n          customValue: \"Success\",\n        },\n      });\n    },\n    fetchCompany() {\n      axiosClient\n        .get(\"/fetchCompany\")\n        .then((response) => {\n          //console.log(\"Company Response:\", response.data);\n          this.companyList = response.data;\n        })\n        .catch((error) => {\n          //console.error(error);\n        });\n    },\n    fetchChainCode() {\n      axiosClient\n        .get(\"/fetchChain\", {\n          params: {\n            company: this.newTransaction.company,\n          },\n        })\n        .then((response) => {\n          //console.log(\"Chain Code Response:\", response.data);\n          this.chainCodeList = response.data;\n        })\n        .catch((error) => {\n          //console.error(error);\n        });\n      // this.notifyVue(\"bottom\", \"right\");\n      this.isChainCode = false;\n    },\n    fetchChainName() {\n      axiosClient\n        .get(\"/fetchChainName\", {\n          params: {\n            chainCode: this.newTransaction.chainCode,\n          },\n        })\n        .then((response) => {\n          //console.log(\"Chain Name Response:\", response.data);\n          this.branchNameList = response.data;\n        })\n        .catch((error) => {\n          //console.error(error);\n        });\n      this.isBranchName = false;\n    },\n    addItem(boxNUMBER) {\n      this.isItem = false;\n      this.isAddItem = false;\n      this.showItemInput = boxNUMBER;\n      console.log(\"clicked nUMBER:\", this.showItemInput);\n    },\n    saveItem(boxNUMBER) {\n      let confirmSave = false;\n\n      this.isNewItem = !this.newItemInput ? true : false;\n      //console.log(\"item\", this.newItemInput);\n      //console.log(\"condition\", this.isNewItem);\n\n      if (this.isNewItem) {\n        this.isRightCode = false;\n        return 0;\n      }\n\n      //console.log(this.newTransaction.items.length);\n      //console.log(\"Items: \", this.newTransaction.items);\n\n      // let str = label.toLowerCase();\n      //console.log(\"Item No:\", this.newItemCode);\n      //console.log(\"Item Description:\", this.newItemDescription);\n      //console.log(\"Style Code:\", this.newStyleCode);\n      axiosClient\n        .get(\"/fetchSameItem\", {\n          params: {\n            company: this.newTransaction.company,\n            ItemCode: this.newItemCode,\n            ItemDescription: this.newItemDescription,\n            StyleCode: this.newStyleCode,\n          },\n        })\n        .then((response) => {\n          //console.log(\"Same Item:\", response.data);\n          for (var x = 0; x < response.data.length; x++) {\n            var flag = true;\n\n            for (var i = 0; i < this.newTransaction.items.length; i++) {\n              if (\n                this.newTransaction.items[i].code == response.data[x].ItemNo &&\n                this.newTransaction.items[i].boxNumber == boxNUMBER\n              ) {\n                this.newTransaction.items[i].quantity =\n                  parseInt(this.newTransaction.items[x].quantity) + 1;\n                flag = false;\n                break;\n              }\n            }\n            if (flag) {\n              let tempItem = {\n                code: response.data[x].ItemNo,\n                description: response.data[x].ItemDescription,\n                categorybrand: this.newBrand,\n                quantity: 0,\n                size: response.data[x].Size,\n                color: response.data[x].Color,\n                // boxLabel: label,\n                boxNumber: boxNUMBER,\n                category: response.data[x].Category,\n              };\n              this.newTransaction.items.push(tempItem);\n            }\n            this.isRightCode = false;\n            this.isItem = false;\n            this.isAddItem = true;\n            this.newItemInput = \"\";\n            this.showItemInput = \"\";\n            this.notifyVue(\"AddItem\", \"bottom\", \"right\");\n          }\n          var filteredItems = this.newTransaction.items.filter(\n            (item) => item.boxNumber === boxNUMBER\n          );\n          console.log(\"filtered: \", filteredItems);\n          var uniqueCategory = [...new Set(filteredItems.map((item) => item.category))];\n          console.log(\"Category: \", uniqueCategory);\n          let strCategory = \"\";\n          confirmSave = true;\n        })\n        .catch((error) => {\n          //console.error(error);\n        });\n      console.log(\"Confirm Save: \", confirmSave);\n\n      //console.log(\"Items: \", this.newTransaction.items);\n\n      // console.log(this.newListBoxLabel);\n    },\n    cancelItem() {\n      this.isRightCode = false;\n      this.isNewItem = false;\n      this.isItem = false;\n      this.isAddItem = true;\n      this.showItemInput = \"\";\n      this.newItemInput = \"\";\n    },\n    addBoxLabel() {\n      this.isBoxLabel = true;\n      this.isEditBLDisabled = true;\n    },\n    saveBoxLabel() {\n      this.isNewBoxLabel = !this.newBoxLabel ? true : false;\n\n      if (this.isNewBoxLabel) {\n        return 0;\n      }\n      this.isBoxLabel = false;\n      //console.log(this.newTransaction.boxLabels.length);\n      let tempBoxLabel = [];\n\n      if (this.newTransaction.boxLabels.length == 0) {\n        tempBoxLabel = {\n          id: this.newTransaction.boxLabels.length + 1,\n          boxNumber: this.newTransaction.boxLabels.length + 1,\n          boxLabel: this.newBoxLabel,\n        };\n      } else {\n        tempBoxLabel = {\n          id:\n            this.newTransaction.boxLabels[this.newTransaction.boxLabels.length - 1].id +\n            1,\n          boxNumber: this.newTransaction.boxLabels.length + 1,\n          boxLabel: this.newBoxLabel,\n        };\n      }\n\n      let tempItem = [];\n\n      if (this.newTransaction.boxLabels.length == 0) {\n        tempItem = {\n          id: this.newTransaction.boxLabels.length + 1,\n        };\n      } else {\n        tempItem = {\n          id:\n            this.newTransaction.boxLabels[this.newTransaction.boxLabels.length - 1].id +\n            1,\n        };\n      }\n\n      this.newTransaction.boxLabels.push(tempBoxLabel);\n      this.newItemInputBox.push(tempItem);\n      this.newBoxLabel = \"\";\n      // this.notifyVue(\"AddBoxLabel\", \"bottom\", \"right\");\n      // console.log(\"Console:\", this.newTransaction.boxLabels);\n      //Disable the above select buttons\n      this.isCompany = true;\n      this.isChainCode = true;\n      this.isBranchName = true;\n      this.isTransactionType = true;\n      this.notifyVue(\"AddBoxLabel\", \"bottom\", \"right\");\n      this.isEditBLDisabled = false;\n    },\n    cancelBoxLabel() {\n      this.isNewBoxLabel = false;\n      this.isBoxLabel = false;\n      this.newBoxLabel = \"\";\n      if (this.newTransaction.boxLabels.length == 0) this.isEditBLDisabled = true;\n      else this.isEditBLDisabled = false;\n    },\n    submit(confirmation) {\n      if (confirmation) {\n        try {\n          const uri = window.location.href;\n          var transactionID = uri.split(\"?\")[1];\n          var id = transactionID.split(\"=\")[1].split(\"&\")[0];\n\n          this.isValid.company = !this.newTransaction.company ? true : false;\n          this.isValid.chainCode = !this.newTransaction.chainCode ? true : false;\n          this.isValid.branchName = !this.newTransaction.branchName ? true : false;\n          this.isValid.transactionType = !this.newTransaction.transactionType\n            ? true\n            : false;\n          this.isValid.boxLabel = !this.newTransaction.boxLabels.length ? true : false;\n          this.isValid.item = !this.newTransaction.items.length ? true : false;\n\n          //console.log(\"Company: \", this.isValid.company);\n\n          //console.log(\"company\", this.newTransaction.company);\n          // alert(\"Your data: \" + JSON.stringify(this.newTransaction));\n\n          if (\n            sessionStorage.getItem(\"Position\") == \"Agent\" ||\n            sessionStorage.getItem(\"Position\") == \"Admin\"\n          ) {\n            var status = \"endorsement\";\n          } else if (sessionStorage.getItem(\"Position\") == \"Admin\") {\n            var status = \"approved\";\n          } else {\n            var status = \"unprocessed\";\n          }\n          axiosClient\n            .post(\"/updatePullOutBranchRequest\", {\n              id: id,\n              chainCode: this.newTransaction.chainCode,\n              companyType: this.newTransaction.company,\n              branchName: this.newTransaction.branchName,\n              transactionType: this.newTransaction.transactionType,\n              email: sessionStorage.getItem(\"Email\"),\n              status: status,\n            })\n            .then((response) => {\n              //console.log(\"Success Branch Save: \", response.data);\n              this.transferTransactionID = id;\n\n              for (var x = 0; x < this.newTransaction.items.length; x++) {\n                let labelBox = \"\";\n                for (let box of this.newTransaction.boxLabels) {\n                  if (box.id == this.newTransaction.items[x].boxNumber) {\n                    labelBox = box.boxLabel;\n                  }\n                }\n                axiosClient\n                  .post(\"/updatePullOutItemRequest\", {\n                    plID: id,\n                    companyType: this.newTransaction.company,\n                    brand: this.newTransaction.items[x].categorybrand,\n                    boxNumber: this.newTransaction.items[x].boxNumber,\n                    boxLabel: labelBox,\n                    itemCode: this.newTransaction.items[x].code,\n                    quantity: this.newTransaction.items[x].quantity,\n                    email: sessionStorage.getItem(\"Email\"),\n                    status: status,\n                  })\n                  .then((response) => {\n                    //console.log(\"Success Items Save: \", response.data);\n                    // window.location.href =\n                    //   \"http://192.168.0.7:4040/#/pull-out/requisition-form\";\n                  })\n                  .catch((error) => {\n                    //console.error(error);\n                  });\n              }\n              const transactionModal = new bootstrap.Modal(\"#transactionReceipt\");\n              transactionModal.show();\n            })\n            .catch((error) => {\n              //console.error(error);\n            });\n        } catch {\n          this.isValid.company = !this.newTransaction.company ? true : false;\n          this.isValid.chainCode = !this.newTransaction.chainCode ? true : false;\n          this.isValid.branchName = !this.newTransaction.branchName ? true : false;\n          this.isValid.transactionType = !this.newTransaction.transactionType\n            ? true\n            : false;\n          this.isValid.boxLabel = !this.newTransaction.boxLabels.length ? true : false;\n          this.isValid.item = !this.newTransaction.items.length ? true : false;\n\n          //console.log(\"Company: \", this.isValid.company);\n\n          //console.log(\"company\", this.newTransaction.company);\n          // alert(\"Your data: \" + JSON.stringify(this.newTransaction));\n          axiosClient\n            .post(\"/savePullOutBranchRequest\", {\n              chainCode: this.newTransaction.chainCode,\n              companyType: this.newTransaction.company,\n              branchName: this.newTransaction.branchName,\n              transactionType: this.newTransaction.transactionType,\n              email: sessionStorage.getItem(\"Email\"),\n              status: \"unprocessed\",\n            })\n            .then((response) => {\n              //console.log(\"Success Branch Save: \", response.data);\n              this.transferTransactionID = response.data.id;\n\n              for (var x = 0; x < this.newTransaction.items.length; x++) {\n                let labelBox = \"\";\n                for (let box of this.newTransaction.boxLabels) {\n                  if (box.id == this.newTransaction.items[x].boxNumber) {\n                    labelBox = box.boxLabel;\n                  }\n                }\n                axiosClient\n                  .post(\"/savePullOutItemRequest\", {\n                    plID: response.data.id,\n                    companyType: this.newTransaction.company,\n                    brand: this.newTransaction.items[x].categorybrand,\n                    boxNumber: this.newTransaction.items[x].boxNumber,\n                    boxLabel: labelBox,\n                    itemCode: this.newTransaction.items[x].code,\n                    quantity: this.newTransaction.items[x].quantity,\n                    email: sessionStorage.getItem(\"Email\"),\n                    status: \"unprocessed\",\n                  })\n                  .then((response) => {\n                    //console.log(\"Success Items Save: \", response.data);\n                  })\n                  .catch((error) => {\n                    //console.error(error);\n                  });\n              }\n              const transactionModal = new bootstrap.Modal(\"#transactionReceipt\");\n              transactionModal.show();\n            })\n            .catch((error) => {\n              //console.error(error);\n            });\n        }\n        setTimeout(this.handleFileUploadImage, 2000);\n      }\n    },\n    draft(confirmation) {\n      if (confirmation) {\n        try {\n          const uri = window.location.href;\n          var transactionID = uri.split(\"?\")[1];\n          var id = transactionID.split(\"=\")[1].split(\"&\")[0];\n\n          axiosClient\n            .post(\"/updatePullOutBranchRequest\", {\n              id: id,\n              chainCode: this.newTransaction.chainCode,\n              companyType: this.newTransaction.company,\n              branchName: this.newTransaction.branchName,\n              transactionType: this.newTransaction.transactionType,\n              status: \"draft\",\n              email: sessionStorage.getItem(\"Email\"),\n            })\n            .then((response) => {\n              //console.log(\"Success Branch Save: \", response.data);\n              //console.log(\"Items Length:\", this.newTransaction.items.length);\n              for (var x = 0; x < this.newTransaction.items.length; x++) {\n                let labelBox = \"\";\n                for (let box of this.newTransaction.boxLabels) {\n                  if (box.id == this.newTransaction.items[x].boxNumber) {\n                    labelBox = box.boxLabel;\n                  }\n                }\n                axiosClient\n                  .post(\"/updatePullOutItemRequest\", {\n                    plID: id,\n                    companyType: this.newTransaction.company,\n                    brand: this.newTransaction.items[x].categorybrand,\n                    boxNumber: this.newTransaction.items[x].boxNumber,\n                    boxLabel: labelBox,\n                    itemCode: this.newTransaction.items[x].code,\n                    quantity: this.newTransaction.items[x].quantity,\n                    status: \"draft\",\n                    email: sessionStorage.getItem(\"Email\"),\n                  })\n                  .then((response) => {\n                    //console.log(\"Success Items Save: \", response.data);\n                  })\n                  .catch((error) => {\n                    //console.error(error);\n                  });\n              }\n              const draftModal = new bootstrap.Modal(\"#draftModal\");\n              draftModal.show();\n            })\n            .catch((error) => {\n              //console.error(error);\n            });\n        } catch {\n          axiosClient\n            .post(\"/savePullOutBranchRequest\", {\n              chainCode: this.newTransaction.chainCode,\n              companyType: this.newTransaction.company,\n              branchName: this.newTransaction.branchName,\n              transactionType: this.newTransaction.transactionType,\n              status: \"draft\",\n              email: sessionStorage.getItem(\"Email\"),\n            })\n            .then((response) => {\n              //console.log(\"Success Branch Save: \", response.data);\n\n              for (var x = 0; x < this.newTransaction.items.length; x++) {\n                let labelBox = \"\";\n                for (let box of this.newTransaction.boxLabels) {\n                  if (box.id == this.newTransaction.items[x].boxNumber) {\n                    labelBox = box.boxLabel;\n                  }\n                }\n                axiosClient\n                  .post(\"/savePullOutItemRequest\", {\n                    plID: response.data.id,\n                    companyType: this.newTransaction.company,\n                    brand: this.newTransaction.items[x].categorybrand,\n                    boxNumber: this.newTransaction.items[x].boxNumber,\n                    boxLabel: labelBox,\n                    itemCode: this.newTransaction.items[x].code,\n                    quantity: this.newTransaction.items[x].quantity,\n                    status: \"draft\",\n                    email: sessionStorage.getItem(\"Email\"),\n                  })\n                  .then((response) => {\n                    //console.log(\"Success Items Save: \", response.data);\n                  })\n                  .catch((error) => {\n                    //console.error(error);\n                  });\n              }\n              const draftModal = new bootstrap.Modal(\"#draftModal\");\n              draftModal.show();\n            })\n            .catch((error) => {\n              //console.error(error);\n            });\n        }\n      }\n    },\n    editBoxLabel(code, quantity, boxNumber) {\n      console.log(\"Items\", code, quantity, boxNumber);\n      this.validateSubmit();\n      //console.log(\n      //   \"Item Code Edit:\",\n      //   code,\n      //   \" Quantity:\",\n      //   quantity,\n      //   \" Box Number\",\n      //   boxNumber\n      // );\n      //console.log(\" == : \", this.newTransaction.items);\n      var filteredItems = this.newTransaction.items.filter(\n        (item) => item.code === code && item.boxNumber === boxNumber\n      );\n\n      //console.log(\"Filtered Items: \", filteredItems);\n      var uniqueItems = [];\n      filteredItems.forEach((item) => {\n        var existingItem = uniqueItems.find(\n          (uniqueItem) => uniqueItem.code === item.code\n        );\n        if (existingItem) {\n          existingItem.quantity += item.quantity;\n        } else {\n          uniqueItems.push({ ...item });\n        }\n      });\n      // The uniqueItems array will contain unique items based on itemCode, with quantities added up.\n      //console.log(\"Unique Items: 1\", uniqueItems);\n      //console.log(\"Unique Items: Code\", uniqueItems[0].code);\n      //console.log(\"Unique Items: Box Number\", uniqueItems[0].boxNumber);\n\n      this.newTransaction.items = this.newTransaction.items.filter(\n        (item) =>\n          item.code !== uniqueItems[0].code || item.boxNumber !== uniqueItems[0].boxNumber\n      );\n      this.newTransaction.items.push(uniqueItems[0]);\n      this.notifyVue(\"ChangeBoxLabel\", \"bottom\", \"right\");\n    },\n  },\n};\n</script>\n<style>\n.el-select {\n  width: 100%;\n  background-color: white;\n  border: 20px;\n  border-color: blueviolet;\n}\n\n.btn-transparent {\n  background-color: transparent;\n  border: none;\n  color: #000000;\n}\n\n.btn-transparent:hover {\n  background-color: rgba(0, 0, 0, 0.1);\n  color: #ffffff;\n}\n\n.table-font-size {\n  font-size: 14px;\n}\n\n.table-input-box {\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n  padding: 14px;\n  border: 1px solid transparent;\n  transition: border-color 0.3s ease-in-out;\n  background-color: transparent;\n}\n\n.table-select-box {\n  /* border: 5px solid green !important; */\n  transition: border-color 0.3s ease-in-out;\n  /* background-color: yellow; */\n  border-radius: 0px !important;\n  background-color: transparent !important;\n}\n\n.table-select-box.el-select .el-input input {\n  border-radius: 0px !important;\n  border: 5px solid transparent !important;\n  background-color: transparent;\n}\n\ntd {\n  display: table-cell !important;\n  padding: 0px !important;\n  /* background-color: #111111 !important; */\n}\ntable {\n  border-collapse: collapse !important;\n}\n.bold-button {\n  font-weight: bold !important;\n}\n\n.input-datalist {\n  display: block !important;\n  width: 100% !important;\n  margin-bottom: 10px !important;\n  position: relative !important;\n  appearance: none !important;\n  font-weight: 400 !important;\n  background-clip: padding-box !important;\n  border: 1px solid #66615b !important;\n  border-radius: 5px !important;\n  padding: 9px !important;\n  outline: none;\n  /* border: 1pc solid gray; */\n}\n\n.table-delete-button {\n  background-color: transparent;\n  color: red;\n  border: none;\n  cursor: pointer;\n}\n\n.label-font {\n  color: red !important;\n}\n\n/* .table-delete:hover {\n  color: red !important;\n  cursor: pointer;\n} */\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}