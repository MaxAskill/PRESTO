{"ast":null,"code":"import _Select2 from \"element-ui/lib/theme-chalk/select.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Select from \"element-ui/lib/select\";\nimport _Option2 from \"element-ui/lib/theme-chalk/option.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Option from \"element-ui/lib/option\";\nimport _Input2 from \"element-ui/lib/theme-chalk/input.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Input from \"element-ui/lib/input\";\nimport _Tag2 from \"element-ui/lib/theme-chalk/tag.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Tag from \"element-ui/lib/tag\";\nimport _Slider2 from \"element-ui/lib/theme-chalk/slider.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Slider from \"element-ui/lib/slider\";\nimport _TimeSelect2 from \"element-ui/lib/theme-chalk/time-select.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _TimeSelect from \"element-ui/lib/time-select\";\nimport _DatePicker2 from \"element-ui/lib/theme-chalk/date-picker.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _DatePicker from \"element-ui/lib/date-picker\";\nimport _TableColumn2 from \"element-ui/lib/theme-chalk/table-column.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _TableColumn from \"element-ui/lib/table-column\";\nimport _Table2 from \"element-ui/lib/theme-chalk/table.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Table from \"element-ui/lib/table\";\nimport { Collapse, CollapseItem, Tabs, TabPane, Card, Button } from \"src/components/UIComponents\";\nimport PProgress from \"src/components/UIComponents/Progress.vue\";\nimport PSwitch from \"src/components/UIComponents/Switch.vue\";\nimport Vue from \"vue\";\nimport NotificationTemplate from \"../Components/NotificationTemplate\";\nimport NotifAddBoxLabel from \"../Components/Notification/NotifSuccessAddBoxLabel.vue\";\nimport NotifAddItem from \"../Components/Notification/NotifSuccessAddItem.vue\";\nimport NotifDeleteBoxLabel from \"../Components/Notification/NotifSuccessDeleteBoxLabel.vue\";\nimport NotifDeleteItem from \"../Components/Notification/NotifSuccessDeleteItem.vue\";\nimport NotifDraftSave from \"../Components/Notification/NotifSuccessDraftSave.vue\";\nimport NotifItemChangeBoxLabel from \"../Components/Notification/NotifSuccessItemChangeBoxLabel.vue\";\nimport NotifItemQuantity from \"../Components/Notification/NotifSuccessItemQuantity.vue\";\nimport NotifRenameBoxLabel from \"../Components/Notification/NotifSuccessRenameBoxLabel.vue\";\nimport NotifSubmitTransaction from \"../Components/Notification/NotifSuccessSubmitTransaction.vue\";\nimport Swal from \"sweetalert2\";\nimport axiosClient from \"../../../../axios\";\nimport EditBoxLabelModal from \"./PullOutRequests/ModalPullOut/EditBoxLabelModal.vue\";\nimport TransactionReceiptModal from \"./PullOutRequests/ModalPullOut/TransactionReceiptModal.vue\";\nimport DraftModal from \"./PullOutRequests/ModalPullOut/DraftModal.vue\";\nimport linkName from \"../../../../linkName\";\nimport ConfirmationSubmitPullOutModal from \"./PullOutRequests/ModalPullOut/ConfirmationSubmitPullOutModal.vue\";\nimport ConfirmationDraftPullOutModal from \"./PullOutRequests/ModalPullOut/ConfirmationDraftPullOutModal.vue\";\nimport axios, { isCancel } from \"axios\";\nimport * as XLSX from \"xlsx\";\nVue.use(_Table);\nVue.use(_TableColumn);\nexport default {\n  components: {\n    [_DatePicker.name]: _DatePicker,\n    [_TimeSelect.name]: _TimeSelect,\n    [_Slider.name]: _Slider,\n    [_Tag.name]: _Tag,\n    [_Input.name]: _Input,\n    [Button.name]: Button,\n    [_Option.name]: _Option,\n    [_Select.name]: _Select,\n    PSwitch,\n    PProgress,\n    TabPane,\n    Tabs,\n    CollapseItem,\n    Collapse,\n    Card,\n    NotificationTemplate,\n    NotifAddBoxLabel,\n    NotifAddItem,\n    NotifDeleteBoxLabel,\n    NotifDeleteItem,\n    NotifDraftSave,\n    NotifItemChangeBoxLabel,\n    NotifItemQuantity,\n    NotifRenameBoxLabel,\n    NotifSubmitTransaction,\n    EditBoxLabelModal,\n    TransactionReceiptModal,\n    DraftModal,\n    ConfirmationSubmitPullOutModal,\n    ConfirmationDraftPullOutModal\n  },\n  data() {\n    return {\n      transferredData: \"\",\n      isCompany: false,\n      isChainCode: true,\n      isBranchName: true,\n      isTransactionType: true,\n      isShowButton: false,\n      itemCodeList: [],\n      isEditBLDisabled: false,\n      isBoxLabel: false,\n      isItem: false,\n      isAddItem: true,\n      isDisabledSubmit: true,\n      showItemInput: \"\",\n      companyList: [],\n      chainCodeList: [],\n      branchNameList: [],\n      newTransaction: {\n        company: \"\",\n        chainCode: \"\",\n        branchName: \"\",\n        transactionType: \"\",\n        boxLabels: [],\n        items: []\n      },\n      newItemInputBox: [],\n      isValid: {\n        company: false,\n        chainCode: false,\n        branchName: false,\n        transactionType: false,\n        boxLabel: false,\n        item: false\n      },\n      isApproved: false,\n      isCancel: false,\n      isSubmit: true,\n      hoveredRow: null,\n      transactionTypeList: [{\n        value: \"CPO Item for Disposal in the Store c/o Supervisor\",\n        label: \"CPO Item for Disposal in the Store c/o Supervisor\"\n      }, {\n        value: \"CPO for Transfer to Another Store\",\n        label: \"CPO for Transfer to Another Store\"\n      }, {\n        value: \"CPO Back to WH via In-House Service\",\n        label: \"CPO Back to WH via In-House Service\"\n      }, {\n        value: \"CPO Back to WH via Chain Distribution Center\",\n        label: \"CPO Back to WH via Chain Distribution Center\"\n      }, {\n        value: \"CPO Back to WH via 3rd Party Trucking\",\n        label: \"CPO Back to WH via 3rd Party Trucking\"\n      }, {\n        value: \"CPO Back to WH c/o Supervisor\",\n        label: \"CPO Back to WH c/o Supervisor\"\n      }, {\n        value: \"Concess Direct Pull-Out\",\n        label: \"Concess Direct Pull-Out\"\n      }],\n      newBoxLabel: \"\",\n      newItemInput: \"\",\n      newBrand: \"\",\n      newItemDescription: \"\",\n      newStyleCode: \"\",\n      newItemCode: \"\",\n      notifications: {\n        topCenter: false\n      },\n      modals: {\n        classic: false,\n        notice: false,\n        mini: false\n      },\n      isNewBoxLabel: false,\n      isNewItem: false,\n      isRightCode: false,\n      transferTransactionID: \"\",\n      uniqueItemss: [],\n      duplicateItemss: [],\n      isDenied: true,\n      dataArray: [],\n      myData: [],\n      counter: 0,\n      remarksList: [\"GOOD\", \"DAMAGED/DIRTY\", \"DISPOSAL\"],\n      images: [],\n      files: [],\n      img_counter: 0,\n      strCategory: {\n        boxNumber: 0,\n        label: \"\"\n      }\n    };\n  },\n  computed: {\n    filteredRemarks() {\n      return this.remarksList.filter(newBoxLabel => {\n        return newBoxLabel.toLowerCase().includes(this.newBoxLabel.toLowerCase());\n      });\n    },\n    sortedBoxes() {\n      return this.newTransaction.boxLabels.sort((a, b) => a.boxNumber - b.boxNumber);\n    },\n    getItemBoxLabel() {\n      return boxNumber => {\n        const boxLabel = this.newTransaction.boxLabels.find(label => label.boxNumber === boxNumber);\n        return boxLabel ? boxLabel.boxLabel : \"\";\n      };\n    }\n  },\n  mounted() {\n    const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n    const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));\n    this.fetchEdit();\n    this.fetchCompany();\n    if (window.resolveRouteChange) {\n      window.resolveRouteChange();\n      window.resolveRouteChange = null;\n    }\n    linkName.val = \"Pull-Out Requisition Form\";\n    console.log(this.isCompany, this.isChainCode, this.isBranchName, this.isTransactionType);\n  },\n  watch: {\n    newTransaction: {\n      handler(val) {\n        this.validateSubmit();\n      },\n      deep: true\n    },\n    \"newTransaction.items\": function (val, oldVal) {\n      this.addCategoryBoxLabel();\n    },\n    \"newTransaction.boxLabels\": function (val, oldVal) {\n      this.enableDropDowns();\n    },\n    \"newTransaction.company\": function (val, oldVal) {\n      this.showButtons();\n    },\n    \"newTransaction.chainCode\": function (val, oldVal) {\n      this.showButtons();\n    },\n    \"newTransaction.branchName\": function (val, oldVal) {\n      this.showButtons();\n    },\n    \"newTransaction.transactionType\": function (val, oldVal) {\n      this.showButtons();\n    },\n    sortedBoxes(newSortedBoxes) {\n      Vue.set(this, \"newTransaction.boxLabels\", newSortedBoxes);\n    }\n  },\n  methods: {\n    restrictChar($event) {\n      let keyCode = $event.keyCode ? $event.keyCode : $event.which;\n      if (keyCode == 91 || keyCode == 93) {\n        $event.preventDefault();\n      }\n    },\n    addCategoryBoxLabel() {\n      this.newTransaction.boxLabels.forEach(box => {\n        var filteredItems = this.newTransaction.items.filter(item => item.boxNumber === box.boxNumber);\n        var uniqueCategory = [...new Set(filteredItems.map(item => item.category))];\n        let strCategory = \"\";\n        for (let i = 0; i < uniqueCategory.length; i++) {\n          if (i == 0) strCategory = \" [ \" + uniqueCategory[i];else strCategory = strCategory + \", \" + uniqueCategory[i];\n          if (i == uniqueCategory.length - 1) strCategory = strCategory + \" ]\";\n        }\n        let tempIndex = box.boxLabel.indexOf(\"[\");\n        if (tempIndex > 0) box.boxLabel = box.boxLabel.substr(0, tempIndex).trim();\n        box.boxLabel = box.boxLabel + strCategory;\n      });\n    },\n    filterRemarks() {\n      this.filteredRemarks = this.remarksList.filter(newBoxLabel => {\n        return newBoxLabel.toLowerCase().includes(this.newBoxLabel.toLowerCase());\n      });\n    },\n    onFileChange(e) {\n      var files = e.target.files || e.dataTransfer.files;\n      this.files.push(e.target.files[0]);\n      if (!files.length) return;\n      this.createImage(files);\n    },\n    createImage(files) {\n      var vm = this;\n      for (var index = 0; index < files.length; index++) {\n        var reader = new FileReader();\n        reader.onload = function (event) {\n          const imageUrl = event.target.result;\n          vm.images.push(imageUrl);\n        };\n        reader.readAsDataURL(files[index]);\n      }\n    },\n    removeImage(index) {\n      this.images.splice(index, 1);\n    },\n    clearImage() {\n      document.getElementById(\"formFile\").value = null;\n      frame.src = \"\";\n    },\n    handleFileUploadImage() {\n      console.log(\"image:\", this.files);\n      console.log(\"Transaction ID:\", this.transferTransactionID);\n      const config = {\n        headers: {\n          \"content-type\": \"multipart/form-data\"\n        }\n      };\n      if (this.img_counter < this.files.length) {\n        axiosClient.post(\"/upload\", {\n          image: this.files[this.img_counter],\n          company: this.newTransaction.company,\n          branchName: this.newTransaction.branchName,\n          transactionID: this.transferTransactionID\n        }, config).then(response => {\n          console.log(\"Success Upload Image\", response.data);\n          this.img_counter++;\n          setTimeout(this.handleFileUploadImage, 2000);\n        }).catch(error => {\n          console.error(error);\n        });\n      }\n    },\n    handleFileUpload(event) {\n      console.log(\"File Name: \", event.target.files[0].name);\n      const file = event.target.files[0];\n      const reader = new FileReader();\n      reader.onload = e => {\n        const data = new Uint8Array(e.target.result);\n        const workbook = XLSX.read(data, {\n          type: \"array\"\n        });\n        const worksheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[worksheetName];\n        const jsonData = XLSX.utils.sheet_to_json(worksheet, {\n          header: 1\n        });\n        console.log(\"Excel Data\", jsonData);\n        this.myData = jsonData;\n        let arrayBox = [];\n        for (var x = 0; x < this.myData.length; x++) {\n          this.dataArray.push(this.myData[x]);\n          arrayBox.push(this.myData[x][1]);\n        }\n        console.log(\"Data:\", this.dataArray);\n        console.log(\"Import Excel\", this.dataArray.length);\n        const filteredArray = arrayBox.filter((value, index, self) => {\n          return self.indexOf(value) === index;\n        });\n        let tempBoxLabel = [];\n        for (var x = 0; x < filteredArray.length; x++) {\n          tempBoxLabel = {\n            id: x + 1,\n            boxNumber: x + 1,\n            boxLabel: filteredArray[x]\n          };\n          this.newTransaction.boxLabels.push(tempBoxLabel);\n          let tempItem = [];\n          if (this.newTransaction.boxLabels.length == 0) {\n            tempItem = {\n              id: this.newTransaction.boxLabels.length + 1\n            };\n          } else {\n            tempItem = {\n              id: this.newTransaction.boxLabels[this.newTransaction.boxLabels.length - 1].id + 1\n            };\n          }\n          this.newItemInputBox.push(tempItem);\n        }\n        console.log(filteredArray);\n        this.counter = 0;\n        this.saveItemsExcel();\n      };\n      reader.readAsArrayBuffer(file);\n    },\n    saveItemsExcel() {\n      if (this.counter < this.dataArray.length) {\n        var boxNumber = this.dataArray[this.counter][0];\n        var quantity = this.dataArray[this.counter][3];\n        axiosClient.get(\"/fetchSameItems\", {\n          params: {\n            company: this.newTransaction.company,\n            ItemNo: this.dataArray[this.counter][2]\n          }\n        }).then(response => {\n          console.log(\"Data\", response.data);\n          if (response.data.length == 0) {\n            setTimeout(this.saveItemsExcel, 2000);\n          }\n          for (var x = 0; x < response.data.length; x++) {\n            var flag = true;\n            for (var i = 0; i < this.newTransaction.items.length; i++) {\n              if (this.newTransaction.items[i].code == response.data[x].ItemNo && this.newTransaction.items[i].boxNumber == boxNumber) {\n                this.newTransaction.items[i].quantity = parseInt(this.newTransaction.items[x].quantity) + 1;\n                flag = false;\n                break;\n              }\n            }\n            if (flag) {\n              let tempItem = {\n                code: response.data[x].ItemNo,\n                description: response.data[x].ItemDescription,\n                categorybrand: response.data[x].brandNames,\n                quantity: quantity,\n                size: response.data[x].Size,\n                color: response.data[x].Color,\n                boxNumber: parseInt(boxNumber),\n                category: response.data[x].Category\n              };\n              this.newTransaction.items.push(tempItem);\n            }\n            console.log(\"Items\", this.newTransaction.items);\n            this.isAddItem = true;\n            this.notifyVue(\"AddItem\", \"bottom\", \"right\");\n            setTimeout(this.saveItemsExcel, 2000);\n          }\n        }).catch(error => {\n          console.error(error);\n        });\n      }\n      this.counter++;\n    },\n    numberOnly($event) {\n      let keyCode = $event.keyCode ? $event.keyCode : $event.which;\n      if (keyCode < 48 || keyCode > 57) {\n        $event.preventDefault();\n      }\n    },\n    validateSubmit() {\n      let uniqueItems = [...new Set(this.newTransaction.items.map(item => item.boxNumber))];\n      let itemsValidation = false;\n      let itemsValidationTemp = false;\n      for (let j in this.newTransaction.boxLabels) {\n        for (let i in uniqueItems) {\n          if (uniqueItems[i] == this.newTransaction.boxLabels[j].id) {\n            itemsValidationTemp = true;\n            itemsValidation = true;\n            break;\n          } else {\n            itemsValidation = false;\n            itemsValidationTemp = false;\n          }\n        }\n      }\n      for (let x in this.newTransaction.items) if (this.newTransaction.items[x].quantity == 0) {\n        itemsValidation = false;\n        let tooltip = bootstrap.Tooltip.getInstance(\"#submitBTN\");\n        tooltip._config.title = \"No items should have a quantity with 0.\";\n        tooltip.update();\n        break;\n      }\n      if (!itemsValidationTemp) {\n        let tooltip = bootstrap.Tooltip.getInstance(\"#submitBTN\");\n        tooltip._config.title = \"Kindly add item/s on every boxes you've added.\";\n        tooltip.update();\n      }\n      if (!this.newTransaction.company || !this.newTransaction.chainCode || !this.newTransaction.branchName || !this.newTransaction.transactionType) {\n        let tooltip = bootstrap.Tooltip.getInstance(\"#submitBTN\");\n        tooltip._config.title = \"Complete the form above to enable this button.\";\n        tooltip.update();\n      } else if (this.newTransaction.boxLabels.length <= 0) {\n        let tooltip = bootstrap.Tooltip.getInstance(\"#submitBTN\");\n        tooltip._config.title = \"No box added. Kindly add box/es to be able to add item/s.\";\n        tooltip.update();\n      } else if (this.newTransaction.items.length <= 0) {\n        let tooltip = bootstrap.Tooltip.getInstance(\"#submitBTN\");\n        tooltip._config.title = \"No items added. Kindly add item/s for this pull-out request.\";\n        tooltip.update();\n      }\n      if (this.newTransaction.company && this.newTransaction.chainCode && this.newTransaction.branchName && this.newTransaction.transactionType && this.newTransaction.boxLabels.length > 0 && itemsValidation) {\n        this.isDisabledSubmit = false;\n        let tooltip = bootstrap.Tooltip.getInstance(\"#submitBTN\");\n        tooltip.disable();\n      } else this.isDisabledSubmit = true;\n    },\n    editingBoxLabel({\n      index,\n      value,\n      tempBL\n    }) {\n      if (value) this.newTransaction.boxLabels[index].boxLabel = value;else this.newTransaction.boxLabels[index].boxLabel = tempBL;\n    },\n    enableDropDowns() {\n      if (this.newTransaction.boxLabels.length == 0) {\n        this.isCompany = false;\n        this.isChainCode = false;\n        this.isBranchName = false;\n        this.isTransactionType = false;\n        this.isEditBLDisabled = true;\n      } else this.isEditBLDisabled = false;\n    },\n    showButtons() {\n      if (this.newTransaction.company && this.newTransaction.chainCode && this.newTransaction.branchName && this.newTransaction.transactionType) {\n        this.isShowButton = true;\n        if (this.newTransaction.boxLabels.length == 0) this.isEditBLDisabled = true;else this.isEditBLDisabled = false;\n      } else this.isShowButton = false;\n    },\n    fetchEdit() {\n      try {\n        const uri = window.location.href;\n        var transactionID = uri.split(\"?\")[1];\n        var id = transactionID.split(\"=\")[1].split(\"&\")[0];\n        var company = transactionID.split(\"=\")[2];\n        axiosClient.get(\"/fetchEditDraftBranch\", {\n          params: {\n            company: company,\n            plID: id\n          }\n        }).then(response => {\n          this.newTransaction.company = response.data[0].company;\n          this.newTransaction.branchName = response.data[0].branchName;\n          this.newTransaction.chainCode = response.data[0].chainCode;\n          this.newTransaction.transactionType = response.data[0].transactionType;\n          if (response.data[0].status == \"denied\" || response.data[0].status == \"endorsement\" || response.data[0].status == \"unprocessed\") {\n            this.isDenied = false;\n            this.isCancel = true;\n          }\n          if (response.data[0].status == \"endorsement\") {\n            this.isApproved = true;\n            this.isSubmit = false;\n          }\n          axiosClient.get(\"/fetchEditDraftItem\", {\n            params: {\n              company: company,\n              plID: id\n            }\n          }).then(response => {\n            for (var x = 0; x < response.data.length; x++) {\n              this.newTransaction.items.push(response.data[x]);\n            }\n            const filteredData = this.newTransaction.items.filter((obj, index, self) => {\n              const boxLabel = obj.boxLabel;\n              return self.findIndex(o => o.boxLabel === boxLabel) === index;\n            });\n            const boxData = filteredData.map(obj => {\n              return {\n                boxLabel: obj.boxLabel,\n                boxNumber: obj.boxNumber\n              };\n            });\n            console.log(\"Filtered Box label:\", boxData);\n            boxData.forEach(item => {\n              console.log(\"Box Label:\", item.boxLabel);\n              this.newTransaction.boxLabels.push({\n                id: item.boxNumber,\n                boxNumber: item.boxNumber,\n                boxLabel: item.boxLabel\n              });\n              this.newItemInputBox.push({\n                id: item.boxNumber\n              });\n              console.log(\"New Box Label:\", this.newTransaction.boxLabels);\n            });\n            if (this.newTransaction.company) {\n              this.isCompany = false;\n              this.isChainCode = false;\n              this.fetchCompany();\n              this.fetchChainCode();\n            }\n            if (this.newTransaction.chainCode) {\n              this.isChainCode = false;\n              this.isBranchName = false;\n              this.fetchChainName();\n              this.fetchChainCode();\n            }\n            if (this.newTransaction.branchName) {\n              this.isBranchName = false;\n              this.isTransactionType = false;\n              this.fetchChainName();\n            }\n            if (this.newTransaction.transactionType) {\n              this.isCompany = false;\n              this.isChainCode = false;\n              this.isBranchName = false;\n              this.isTransactionType = false;\n            }\n            if (this.newTransaction.items.length) {\n              this.isCompany = true;\n              this.isChainCode = true;\n              this.isBranchName = true;\n              this.isTransactionType = true;\n            }\n          }).catch(error => {});\n        }).catch(error => {});\n      } catch {\n        axiosClient.get(\"/fetchPromoBranchInfo\", {\n          params: {\n            userID: sessionStorage.getItem(\"UserID\")\n          }\n        }).then(response => {\n          this.newTransaction.company = response.data[0].company;\n          this.newTransaction.chainCode = response.data[0].chainCode;\n          this.newTransaction.branchName = response.data[0].branchName;\n        }).catch(error => {});\n      }\n    },\n    cancelTransaction() {\n      location.href = \"http://192.168.0.7:4040/#/pull-out/requests\";\n    },\n    updateData(updatedData) {},\n    openModal(data) {\n      data.boxLabels.forEach(box => {\n        let tempIndex = box.boxLabel.indexOf(\"[\");\n        if (tempIndex > 0) box.boxLabel = box.boxLabel.substr(0, tempIndex).trim();\n      });\n      console.log(\"Edit: \", data);\n      this.transferredData = data;\n    },\n    closeModal() {\n      console.log(\"CLOSE\");\n      this.addCategoryBoxLabel();\n      this.transferredData = \"\";\n    },\n    showButton(itemId) {\n      this.hoveredRow = itemId;\n    },\n    hideButton(itemId) {\n      this.hoveredRow = null;\n    },\n    removeItem(code, boxNumber) {\n      this.validateSubmit();\n      this.newTransaction.items = this.newTransaction.items.filter(item => item.code !== code || item.boxNumber !== boxNumber);\n      this.notifyVue(\"DeleteItem\", \"bottom\", \"right\");\n    },\n    fetchItems() {\n      if (this.newItemInput.length >= 4) {\n        if (this.newTransaction.company == \"NBFI\" || this.newTransaction.company == \"CMC\" || this.newTransaction.company == \"ASC\") {\n          axiosClient.get(\"/fetchItemsNBFI\", {\n            params: {\n              ItemNo: this.newItemInput\n            }\n          }).then(response => {\n            this.itemCodeList = response.data;\n          }).catch(error => {});\n        } else {\n          axiosClient.get(\"/fetchItems\", {\n            params: {\n              ItemNo: this.newItemInput\n            }\n          }).then(response => {\n            this.itemCodeList = response.data;\n          }).catch(error => {});\n        }\n      } else if (this.newItemInput.length == 0) this.itemCodeList = [];\n    },\n    compareItemCode() {\n      let value = this.newItemInput;\n      if (value.indexOf(\" - \") >= 0) {\n        let parts = value.split(\" - \");\n        this.newItemInput = parts[0];\n      }\n      if (this.newItemInput.length > 16) {\n        this.newItemInput = this.newItemInput.slice(0, 16);\n      } else {}\n      axiosClient.get(\"/compareItemCode\", {\n        params: {\n          companyType: this.newTransaction.company,\n          ItemNo: this.newItemInput\n        }\n      }).then(response => {\n        this.newItemCode = response.data[0].ItemNo;\n        this.newItemDescription = response.data[0].ItemDescription;\n        this.newStyleCode = response.data[0].StyleCode;\n        let brandCode = response.data[0].ItemNo.toString().substr(1, 2);\n        axiosClient.get(\"/fetchBrands\", {\n          params: {\n            companyType: this.newTransaction.company,\n            brandCode: brandCode\n          }\n        }).then(response => {\n          this.newBrand = response.data[0].brandNames;\n        }).catch(error => {});\n      }).catch(error => {\n        this.missItemCode = 0;\n        !this.newItemInput ? true : this.isRightCode = true;\n      });\n    },\n    handleQuantity(item) {\n      if (!item.quantity) {\n        item.quantity = 0;\n      }\n      this.notifyVue(\"ItemQuantity\", \"bottom\", \"right\");\n    },\n    notifyVue(notify, verticalAlign, horizontalAlign) {\n      var notification = \"\";\n      let notifType = \"\";\n      if (notify === \"AddBoxLabel\") {\n        notification = NotifAddBoxLabel;\n        notifType = \"success\";\n      } else if (notify === \"AddItem\") {\n        notification = NotifAddItem;\n        notifType = \"success\";\n      } else if (notify === \"DeleteBoxLabel\") {\n        notification = NotifDeleteBoxLabel;\n        notifType = \"danger\";\n      } else if (notify === \"DeleteItem\") {\n        notification = NotifDeleteItem;\n        notifType = \"danger\";\n      } else if (notify === \"DraftSave\") {\n        notification = NotifDraftSave;\n        notifType = \"success\";\n      } else if (notify === \"ChangeBoxLabel\") {\n        notification = NotifItemChangeBoxLabel;\n        notifType = \"success\";\n      } else if (notify === \"ItemQuantity\") {\n        notification = NotifItemQuantity;\n        notifType = \"success\";\n      } else if (notify === \"RenameBoxLabel\") {\n        notification = NotifRenameBoxLabel;\n        notifType = \"success\";\n      } else {\n        notification = NotifSubmitTransaction;\n        notifType = \"success\";\n      }\n      this.$notify({\n        component: notification,\n        horizontalAlign: horizontalAlign,\n        verticalAlign: verticalAlign,\n        type: notifType,\n        props: {\n          customValue: \"Success\"\n        }\n      });\n    },\n    fetchCompany() {\n      axiosClient.get(\"/fetchCompany\").then(response => {\n        this.companyList = response.data;\n      }).catch(error => {});\n    },\n    fetchChainCode() {\n      axiosClient.get(\"/fetchChain\", {\n        params: {\n          company: this.newTransaction.company\n        }\n      }).then(response => {\n        this.chainCodeList = response.data;\n      }).catch(error => {});\n      this.isChainCode = false;\n    },\n    fetchChainName() {\n      axiosClient.get(\"/fetchChainName\", {\n        params: {\n          chainCode: this.newTransaction.chainCode\n        }\n      }).then(response => {\n        this.branchNameList = response.data;\n      }).catch(error => {});\n      this.isBranchName = false;\n    },\n    addItem(boxNUMBER) {\n      this.isItem = false;\n      this.isAddItem = false;\n      this.showItemInput = boxNUMBER;\n      console.log(\"clicked nUMBER:\", this.showItemInput);\n    },\n    saveItem(boxNUMBER) {\n      let confirmSave = false;\n      this.isNewItem = !this.newItemInput ? true : false;\n      if (this.isNewItem) {\n        this.isRightCode = false;\n        return 0;\n      }\n      axiosClient.get(\"/fetchSameItem\", {\n        params: {\n          company: this.newTransaction.company,\n          ItemCode: this.newItemCode,\n          ItemDescription: this.newItemDescription,\n          StyleCode: this.newStyleCode\n        }\n      }).then(response => {\n        for (var x = 0; x < response.data.length; x++) {\n          var flag = true;\n          for (var i = 0; i < this.newTransaction.items.length; i++) {\n            if (this.newTransaction.items[i].code == response.data[x].ItemNo && this.newTransaction.items[i].boxNumber == boxNUMBER) {\n              this.newTransaction.items[i].quantity = parseInt(this.newTransaction.items[x].quantity) + 1;\n              flag = false;\n              break;\n            }\n          }\n          if (flag) {\n            let tempItem = {\n              code: response.data[x].ItemNo,\n              description: response.data[x].ItemDescription,\n              categorybrand: this.newBrand,\n              quantity: 0,\n              size: response.data[x].Size,\n              color: response.data[x].Color,\n              boxNumber: boxNUMBER,\n              category: response.data[x].Category\n            };\n            this.newTransaction.items.push(tempItem);\n          }\n          this.isRightCode = false;\n          this.isItem = false;\n          this.isAddItem = true;\n          this.newItemInput = \"\";\n          this.showItemInput = \"\";\n          this.notifyVue(\"AddItem\", \"bottom\", \"right\");\n        }\n      }).catch(error => {});\n      console.log(\"Confirm Save: \", confirmSave);\n    },\n    cancelItem() {\n      this.isRightCode = false;\n      this.isNewItem = false;\n      this.isItem = false;\n      this.isAddItem = true;\n      this.showItemInput = \"\";\n      this.newItemInput = \"\";\n    },\n    addBoxLabel() {\n      this.isBoxLabel = true;\n      this.isEditBLDisabled = true;\n    },\n    saveBoxLabel() {\n      this.isNewBoxLabel = !this.newBoxLabel ? true : false;\n      if (this.isNewBoxLabel) {\n        return 0;\n      }\n      this.isBoxLabel = false;\n      let tempBoxLabel = [];\n      if (this.newTransaction.boxLabels.length == 0) {\n        tempBoxLabel = {\n          id: this.newTransaction.boxLabels.length + 1,\n          boxNumber: this.newTransaction.boxLabels.length + 1,\n          boxLabel: this.newBoxLabel\n        };\n      } else {\n        tempBoxLabel = {\n          id: this.newTransaction.boxLabels[this.newTransaction.boxLabels.length - 1].id + 1,\n          boxNumber: this.newTransaction.boxLabels.length + 1,\n          boxLabel: this.newBoxLabel\n        };\n      }\n      let tempItem = [];\n      if (this.newTransaction.boxLabels.length == 0) {\n        tempItem = {\n          id: this.newTransaction.boxLabels.length + 1\n        };\n      } else {\n        tempItem = {\n          id: this.newTransaction.boxLabels[this.newTransaction.boxLabels.length - 1].id + 1\n        };\n      }\n      this.newTransaction.boxLabels.push(tempBoxLabel);\n      this.newItemInputBox.push(tempItem);\n      this.newBoxLabel = \"\";\n      this.isCompany = true;\n      this.isChainCode = true;\n      this.isBranchName = true;\n      this.isTransactionType = true;\n      this.notifyVue(\"AddBoxLabel\", \"bottom\", \"right\");\n      this.isEditBLDisabled = false;\n    },\n    cancelBoxLabel() {\n      this.isNewBoxLabel = false;\n      this.isBoxLabel = false;\n      this.newBoxLabel = \"\";\n      if (this.newTransaction.boxLabels.length == 0) this.isEditBLDisabled = true;else this.isEditBLDisabled = false;\n    },\n    submit(confirmation) {\n      if (confirmation) {\n        try {\n          const uri = window.location.href;\n          var transactionID = uri.split(\"?\")[1];\n          var id = transactionID.split(\"=\")[1].split(\"&\")[0];\n          this.isValid.company = !this.newTransaction.company ? true : false;\n          this.isValid.chainCode = !this.newTransaction.chainCode ? true : false;\n          this.isValid.branchName = !this.newTransaction.branchName ? true : false;\n          this.isValid.transactionType = !this.newTransaction.transactionType ? true : false;\n          this.isValid.boxLabel = !this.newTransaction.boxLabels.length ? true : false;\n          this.isValid.item = !this.newTransaction.items.length ? true : false;\n          if (sessionStorage.getItem(\"Position\") == \"Agent\" || sessionStorage.getItem(\"Position\") == \"Admin\") {\n            var status = \"endorsement\";\n          } else if (sessionStorage.getItem(\"Position\") == \"Admin\") {\n            var status = \"approved\";\n          } else {\n            var status = \"unprocessed\";\n          }\n          axiosClient.post(\"/updatePullOutBranchRequest\", {\n            id: id,\n            chainCode: this.newTransaction.chainCode,\n            companyType: this.newTransaction.company,\n            branchName: this.newTransaction.branchName,\n            transactionType: this.newTransaction.transactionType,\n            email: sessionStorage.getItem(\"Email\"),\n            status: status\n          }).then(response => {\n            this.transferTransactionID = id;\n            for (var x = 0; x < this.newTransaction.items.length; x++) {\n              let labelBox = \"\";\n              for (let box of this.newTransaction.boxLabels) {\n                if (box.id == this.newTransaction.items[x].boxNumber) {\n                  labelBox = box.boxLabel;\n                }\n              }\n              axiosClient.post(\"/updatePullOutItemRequest\", {\n                plID: id,\n                companyType: this.newTransaction.company,\n                brand: this.newTransaction.items[x].categorybrand,\n                boxNumber: this.newTransaction.items[x].boxNumber,\n                boxLabel: labelBox,\n                itemCode: this.newTransaction.items[x].code,\n                quantity: this.newTransaction.items[x].quantity,\n                email: sessionStorage.getItem(\"Email\"),\n                status: status\n              }).then(response => {}).catch(error => {});\n            }\n            const transactionModal = new bootstrap.Modal(\"#transactionReceipt\");\n            transactionModal.show();\n          }).catch(error => {});\n        } catch {\n          this.isValid.company = !this.newTransaction.company ? true : false;\n          this.isValid.chainCode = !this.newTransaction.chainCode ? true : false;\n          this.isValid.branchName = !this.newTransaction.branchName ? true : false;\n          this.isValid.transactionType = !this.newTransaction.transactionType ? true : false;\n          this.isValid.boxLabel = !this.newTransaction.boxLabels.length ? true : false;\n          this.isValid.item = !this.newTransaction.items.length ? true : false;\n          axiosClient.post(\"/savePullOutBranchRequest\", {\n            chainCode: this.newTransaction.chainCode,\n            companyType: this.newTransaction.company,\n            branchName: this.newTransaction.branchName,\n            transactionType: this.newTransaction.transactionType,\n            email: sessionStorage.getItem(\"Email\"),\n            status: \"unprocessed\"\n          }).then(response => {\n            this.transferTransactionID = response.data.id;\n            for (var x = 0; x < this.newTransaction.items.length; x++) {\n              let labelBox = \"\";\n              for (let box of this.newTransaction.boxLabels) {\n                if (box.id == this.newTransaction.items[x].boxNumber) {\n                  labelBox = box.boxLabel;\n                }\n              }\n              axiosClient.post(\"/savePullOutItemRequest\", {\n                plID: response.data.id,\n                companyType: this.newTransaction.company,\n                brand: this.newTransaction.items[x].categorybrand,\n                boxNumber: this.newTransaction.items[x].boxNumber,\n                boxLabel: labelBox,\n                itemCode: this.newTransaction.items[x].code,\n                quantity: this.newTransaction.items[x].quantity,\n                email: sessionStorage.getItem(\"Email\"),\n                status: \"unprocessed\"\n              }).then(response => {}).catch(error => {});\n            }\n            const transactionModal = new bootstrap.Modal(\"#transactionReceipt\");\n            transactionModal.show();\n          }).catch(error => {});\n        }\n        setTimeout(this.handleFileUploadImage, 2000);\n      }\n    },\n    draft(confirmation) {\n      console.log(\"Confirmed\");\n      if (confirmation) {\n        console.log(\"Confirmed Data:\", confirmation);\n        try {\n          const uri = window.location.href;\n          var transactionID = uri.split(\"?\")[1];\n          var id = transactionID.split(\"=\")[1].split(\"&\")[0];\n          axiosClient.post(\"/updatePullOutBranchRequest\", {\n            id: id,\n            chainCode: this.newTransaction.chainCode,\n            companyType: this.newTransaction.company,\n            branchName: this.newTransaction.branchName,\n            transactionType: this.newTransaction.transactionType,\n            status: \"draft\",\n            email: sessionStorage.getItem(\"Email\")\n          }).then(response => {\n            console.log(\"Success Branch Save: \", response.data);\n            for (var x = 0; x < this.newTransaction.items.length; x++) {\n              let labelBox = \"\";\n              for (let box of this.newTransaction.boxLabels) {\n                if (box.id == this.newTransaction.items[x].boxNumber) {\n                  labelBox = box.boxLabel;\n                }\n              }\n              axiosClient.post(\"/updatePullOutItemRequest\", {\n                plID: id,\n                companyType: this.newTransaction.company,\n                brand: this.newTransaction.items[x].categorybrand,\n                boxNumber: this.newTransaction.items[x].boxNumber,\n                boxLabel: labelBox,\n                itemCode: this.newTransaction.items[x].code,\n                quantity: this.newTransaction.items[x].quantity,\n                status: \"draft\",\n                email: sessionStorage.getItem(\"Email\")\n              }).then(response => {\n                console.log(\"Success Items Save: \", response.data);\n              }).catch(error => {});\n            }\n            const draftModal = new bootstrap.Modal(\"#draftModal\");\n            draftModal.show();\n          }).catch(error => {});\n        } catch {\n          axiosClient.post(\"/savePullOutBranchRequest\", {\n            chainCode: this.newTransaction.chainCode,\n            companyType: this.newTransaction.company,\n            branchName: this.newTransaction.branchName,\n            transactionType: this.newTransaction.transactionType,\n            status: \"draft\",\n            email: sessionStorage.getItem(\"Email\")\n          }).then(response => {\n            for (var x = 0; x < this.newTransaction.items.length; x++) {\n              let labelBox = \"\";\n              for (let box of this.newTransaction.boxLabels) {\n                if (box.id == this.newTransaction.items[x].boxNumber) {\n                  labelBox = box.boxLabel;\n                }\n              }\n              axiosClient.post(\"/savePullOutItemRequest\", {\n                plID: response.data.id,\n                companyType: this.newTransaction.company,\n                brand: this.newTransaction.items[x].categorybrand,\n                boxNumber: this.newTransaction.items[x].boxNumber,\n                boxLabel: labelBox,\n                itemCode: this.newTransaction.items[x].code,\n                quantity: this.newTransaction.items[x].quantity,\n                status: \"draft\",\n                email: sessionStorage.getItem(\"Email\")\n              }).then(response => {}).catch(error => {});\n            }\n            const draftModal = new bootstrap.Modal(\"#draftModal\");\n            draftModal.show();\n          }).catch(error => {});\n        }\n      }\n    },\n    editBoxLabel(code, quantity, boxNumber) {\n      console.log(\"Items\", code, quantity, boxNumber);\n      this.validateSubmit();\n      var filteredItems = this.newTransaction.items.filter(item => item.code === code && item.boxNumber === boxNumber);\n      var uniqueItems = [];\n      filteredItems.forEach(item => {\n        var existingItem = uniqueItems.find(uniqueItem => uniqueItem.code === item.code);\n        if (existingItem) {\n          existingItem.quantity += item.quantity;\n        } else {\n          uniqueItems.push({\n            ...item\n          });\n        }\n      });\n      this.newTransaction.items = this.newTransaction.items.filter(item => item.code !== uniqueItems[0].code || item.boxNumber !== uniqueItems[0].boxNumber);\n      this.newTransaction.items.push(uniqueItems[0]);\n      this.notifyVue(\"ChangeBoxLabel\", \"bottom\", \"right\");\n    }\n  }\n};","map":{"version":3,"names":["Collapse","CollapseItem","Tabs","TabPane","Card","Button","PProgress","PSwitch","Vue","NotificationTemplate","NotifAddBoxLabel","NotifAddItem","NotifDeleteBoxLabel","NotifDeleteItem","NotifDraftSave","NotifItemChangeBoxLabel","NotifItemQuantity","NotifRenameBoxLabel","NotifSubmitTransaction","Swal","axiosClient","EditBoxLabelModal","TransactionReceiptModal","DraftModal","linkName","ConfirmationSubmitPullOutModal","ConfirmationDraftPullOutModal","axios","isCancel","XLSX","use","_Table","_TableColumn","components","_DatePicker","name","_TimeSelect","_Slider","_Tag","_Input","_Option","_Select","data","transferredData","isCompany","isChainCode","isBranchName","isTransactionType","isShowButton","itemCodeList","isEditBLDisabled","isBoxLabel","isItem","isAddItem","isDisabledSubmit","showItemInput","companyList","chainCodeList","branchNameList","newTransaction","company","chainCode","branchName","transactionType","boxLabels","items","newItemInputBox","isValid","boxLabel","item","isApproved","isSubmit","hoveredRow","transactionTypeList","value","label","newBoxLabel","newItemInput","newBrand","newItemDescription","newStyleCode","newItemCode","notifications","topCenter","modals","classic","notice","mini","isNewBoxLabel","isNewItem","isRightCode","transferTransactionID","uniqueItemss","duplicateItemss","isDenied","dataArray","myData","counter","remarksList","images","files","img_counter","strCategory","boxNumber","computed","filteredRemarks","filter","toLowerCase","includes","sortedBoxes","sort","a","b","getItemBoxLabel","find","mounted","tooltipTriggerList","document","querySelectorAll","tooltipList","map","tooltipTriggerEl","bootstrap","Tooltip","fetchEdit","fetchCompany","window","resolveRouteChange","val","console","log","watch","handler","validateSubmit","deep","newTransaction.items","oldVal","addCategoryBoxLabel","newTransaction.boxLabels","enableDropDowns","newTransaction.company","showButtons","newTransaction.chainCode","newTransaction.branchName","newTransaction.transactionType","newSortedBoxes","set","methods","restrictChar","$event","keyCode","which","preventDefault","forEach","box","filteredItems","uniqueCategory","Set","category","i","length","tempIndex","indexOf","substr","trim","filterRemarks","onFileChange","e","target","dataTransfer","push","createImage","vm","index","reader","FileReader","onload","event","imageUrl","result","readAsDataURL","removeImage","splice","clearImage","getElementById","frame","src","handleFileUploadImage","config","headers","post","image","transactionID","then","response","setTimeout","catch","error","handleFileUpload","file","Uint8Array","workbook","read","type","worksheetName","SheetNames","worksheet","Sheets","jsonData","utils","sheet_to_json","header","arrayBox","x","filteredArray","self","tempBoxLabel","id","tempItem","saveItemsExcel","readAsArrayBuffer","quantity","get","params","ItemNo","flag","code","parseInt","description","ItemDescription","categorybrand","brandNames","size","Size","color","Color","Category","notifyVue","numberOnly","uniqueItems","itemsValidation","itemsValidationTemp","j","tooltip","getInstance","_config","title","update","disable","editingBoxLabel","tempBL","uri","location","href","split","plID","status","filteredData","obj","findIndex","o","boxData","fetchChainCode","fetchChainName","userID","sessionStorage","getItem","cancelTransaction","updateData","updatedData","openModal","closeModal","showButton","itemId","hideButton","removeItem","fetchItems","compareItemCode","parts","slice","companyType","StyleCode","brandCode","toString","missItemCode","handleQuantity","notify","verticalAlign","horizontalAlign","notification","notifType","$notify","component","props","customValue","addItem","boxNUMBER","saveItem","confirmSave","ItemCode","cancelItem","addBoxLabel","saveBoxLabel","cancelBoxLabel","submit","confirmation","email","labelBox","brand","itemCode","transactionModal","Modal","show","draft","draftModal","editBoxLabel","existingItem","uniqueItem"],"sources":["src/components/Dashboard/Views/PullOut/PullOutGenerator.vue"],"sourcesContent":["<template>\n  <div class=\"card card-generator\">\n    <!-- <div class=\"card-header\">\n      <h4 class=\"title\">Pull-Out Requisition Form</h4>\n    </div> -->\n    <div class=\"card-body\">\n      <div class=\"row\">\n        <div class=\"col-sm-3\">\n          <fg-input label=\"Company\" :disabled=\"isCompany\">\n            <el-select\n              class=\"select-default\"\n              size=\"large\"\n              placeholder=\"Select Company\"\n              v-model=\"newTransaction.company\"\n              @change=\"\n                fetchChainCode(),\n                  (newTransaction.chainCode = ''),\n                  (newTransaction.branchName = ''),\n                  (newTransaction.transactionType = '')\n              \"\n              :disabled=\"isCompany\"\n            >\n              <el-option\n                v-for=\"option in companyList\"\n                class=\"select-default\"\n                :value=\"option.shortName\"\n                :label=\"option.name + ' (' + option.shortName + ') '\"\n                :key=\"option.id\"\n              >\n              </el-option>\n            </el-select>\n            <label v-show=\"isValid.company\" class=\"label-font\"\n              >Company is required.</label\n            >\n          </fg-input>\n        </div>\n        <div class=\"col-sm-3\">\n          <fg-input label=\"Chain Code\" :disabled=\"isChainCode\">\n            <el-select\n              class=\"select-default\"\n              size=\"large\"\n              placeholder=\"Select Chain Code\"\n              v-model=\"newTransaction.chainCode\"\n              @change=\"\n                fetchChainName(),\n                  (newTransaction.branchName = ''),\n                  (newTransaction.transactionType = '')\n              \"\n              :disabled=\"isChainCode\"\n            >\n              <el-option\n                v-for=\"option in chainCodeList\"\n                class=\"select-default\"\n                :value=\"option.chainCode\"\n                :label=\"option.chainCode\"\n                :key=\"option.chainCode\"\n              >\n              </el-option>\n            </el-select>\n            <label v-show=\"isValid.chainCode\" class=\"label-font\"\n              >Chain Code is required.</label\n            >\n          </fg-input>\n        </div>\n        <div class=\"col-sm-3\">\n          <fg-input label=\"Branch Name\" :disabled=\"isBranchName\">\n            <el-select\n              class=\"select-default\"\n              size=\"large\"\n              placeholder=\"Select Branch Name\"\n              v-model=\"newTransaction.branchName\"\n              @change=\"(isTransactionType = false), (newTransaction.transactionType = '')\"\n              :disabled=\"isBranchName\"\n            >\n              <el-option\n                v-for=\"option in branchNameList\"\n                class=\"select-default\"\n                :value=\"option.branchName\"\n                :label=\"option.branchName\"\n                :key=\"option.branchName\"\n              >\n              </el-option>\n            </el-select>\n            <label v-show=\"isValid.branchName\" class=\"label-font\"\n              >Branch Name is required.</label\n            >\n          </fg-input>\n        </div>\n        <div class=\"col-sm-3\">\n          <fg-input label=\"Transaction Type\" :disabled=\"isTransactionType\">\n            &nbsp;<i\n              data-bs-toggle=\"tooltip\"\n              class=\"nc-icon nc-alert-circle-i font-weight-bold\"\n            ></i>\n            <el-select\n              class=\"select-default\"\n              size=\"large\"\n              placeholder=\"Select Transaction Type\"\n              v-model=\"newTransaction.transactionType\"\n              :disabled=\"isTransactionType\"\n            >\n              <el-option\n                v-for=\"option in transactionTypeList\"\n                class=\"select-default\"\n                :value=\"option.value\"\n                :label=\"option.label\"\n                :key=\"option.label\"\n              >\n              </el-option>\n            </el-select>\n            <label v-show=\"isValid.transactionType\" class=\"label-font\"\n              >Transaction Type is required.</label\n            >\n          </fg-input>\n        </div>\n      </div>\n      <div class=\"col-sm-12\">\n        <card type=\"plain\">\n          <div class=\"row\">\n            <div class=\"col-sm-12\" v-show=\"isShowButton\">\n              <p-button\n                type=\"default\"\n                link\n                class=\"font-weight-bold\"\n                @click.prevent=\"addBoxLabel()\"\n              >\n                <i class=\"nc-icon nc-simple-add font-weight-bold\"></i> Add Box Label\n              </p-button>\n              <p-button\n                :disabled=\"isEditBLDisabled\"\n                type=\"default\"\n                link\n                class=\"font-weight-bold\"\n                data-bs-toggle=\"modal\"\n                data-bs-target=\"#editboxlabelModal\"\n                @click=\"openModal(newTransaction)\"\n              >\n                <i class=\"nc-icon nc-ruler-pencil font-weight-bold\"></i> Edit Box Label\n              </p-button>\n              <p-button\n                type=\"default\"\n                outline\n                class=\"font-weight-bold\"\n                onclick=\"document.getElementById('import_items_excel').click()\"\n              >\n                Import Items Excel\n              </p-button>\n              <input\n                id=\"import_items_excel\"\n                type=\"file\"\n                accept=\".xlsx\"\n                style=\"display: none\"\n                @change=\"handleFileUpload\"\n              />\n            </div>\n            <form @submit.prevent=\"saveBoxLabel()\">\n              <div class=\"col-sm-12 mx-n3\" v-show=\"isBoxLabel\">\n                <div class=\"col-sm-12\">\n                  <fg-input\n                    placeholder=\"Box Label ( Items Remarks )\"\n                    v-model.trim=\"newBoxLabel\"\n                    class=\"w-100\"\n                    @keypress=\"restrictChar\"\n                    @input=\"filterRemarks\"\n                    list=\"remarks\"\n                  ></fg-input>\n                  <datalist id=\"remarks\">\n                    <option v-for=\"remark in filteredRemarks\" :value=\"remark\">\n                      {{ remark }}\n                    </option>\n                  </datalist>\n                </div>\n                <div class=\"col-sm-2 mt-n3\">\n                  <p-button\n                    native-type=\"submit\"\n                    type=\"default\"\n                    size=\"sm\"\n                    outline\n                    class=\"font-weight-bold\"\n                  >\n                    <i class=\"nc-icon nc-check-2 font-weight-bold\"></i>\n                  </p-button>\n                  <p-button\n                    type=\"default\"\n                    size=\"sm\"\n                    outline\n                    class=\"font-weight-bold\"\n                    @click.prevent=\"cancelBoxLabel()\"\n                  >\n                    <i class=\"nc-icon nc-simple-remove font-weight-bold\"></i>\n                  </p-button>\n                </div>\n                <label v-show=\"isNewBoxLabel\" class=\"label-font pl-3\"\n                  >Box Label is empty.</label\n                >\n              </div>\n            </form>\n            <label v-show=\"isValid.boxLabel\" class=\"label-font\"\n              >Box Label is required.</label\n            >\n          </div>\n          <collapse>\n            <collapse-item\n              v-for=\"boxLabel in newTransaction.boxLabels\"\n              :key=\"boxLabel.id\"\n              :title=\"`Box No. ${boxLabel.boxNumber} of ${newTransaction.boxLabels.length} \\xa0\\xa0\\xa0 Box Label: ${boxLabel.boxLabel}`\"\n              name=\"1\"\n              class=\"font-weight-bold\"\n            >\n              <div class=\"row\" v-show=\"isAddItem\">\n                <button\n                  class=\"btn btn-transparent text-left bold-button\"\n                  @click.prevent=\"addItem(boxLabel.boxNumber)\"\n                >\n                  <i class=\"nc-icon nc-simple-add font-weight-bold\"></i> Add Item\n                </button>\n              </div>\n              <div>\n                <form @submit.prevent=\"saveItem(boxLabel.boxNumber)\">\n                  <div\n                    class=\"row\"\n                    v-for=\"newItem in newItemInputBox\"\n                    v-show=\"newItem.id === boxLabel.boxNumber\"\n                  >\n                    <div class=\"col-sm-12 d-flex mt-2\" v-if=\"newItem.id == showItemInput\">\n                      <input\n                        type=\"text\"\n                        placeholder=\"Item Code\"\n                        v-model=\"newItemInput\"\n                        @input=\"fetchItems\"\n                        @change=\"compareItemCode\"\n                        list=\"items\"\n                        class=\"input-datalist\"\n                      />\n\n                      <datalist id=\"items\">\n                        <option\n                          v-for=\"item in itemCodeList\"\n                          :value=\"item.ItemNo + ' - ' + item.ItemDescription\"\n                          :key=\"item.ItemNo\"\n                        ></option>\n                      </datalist>\n                      <!-- <fg-input placeholder=\"Item\" v-model=\"newItemInput\" class=\"w-100\"></fg-input> -->\n                      <!-- <label> showItemInput: {{ showItemInput }}</label>\n                          <label> newItem.id: {{ newItem.id }}</label> -->\n                      <p-button\n                        native-type=\"submit\"\n                        type=\"default\"\n                        size=\"sm\"\n                        class=\"font-weight-bold\"\n                      >\n                        <i class=\"nc-icon nc-check-2 font-weight-bold\"></i>\n                      </p-button>\n                      <p-button\n                        type=\"default\"\n                        size=\"sm\"\n                        class=\"font-weight-bold\"\n                        @click.prevent=\"cancelItem()\"\n                      >\n                        <i class=\"nc-icon nc-simple-remove font-weight-bold\"></i>\n                      </p-button>\n                    </div>\n                    <label v-show=\"isRightCode\" class=\"label-font font-weight-normal\"\n                      >Invalid Item Code.</label\n                    >\n                    <label v-show=\"isNewItem\" class=\"label-font font-weight-normal\"\n                      >Item code is empty.</label\n                    >\n\n                    <!-- <div class=\"col-sm-12 d-flex\" v-show=\"newItem.id != showItemInput\">\n                          <fg-input :placeholder=\"newItem.id \" v-model=\"newItem.item\" class=\"w-100\"></fg-input>\n                          <p-button type=\"default\" size=\"sm\"   class=\"font-weight-bold\" @click.prevent=\"saveItem(boxLabel.boxLabel)\">\n                            <i class=\"nc-icon nc-check-2 font-weight-bold\"></i> {{ newItem.id }}\n                          </p-button>\n                          <p-button type=\"default\" size=\"sm\"   class=\"font-weight-bold\" @click.prevent=\"cancelItem()\">\n                            <i class=\"nc-icon nc-simple-remove font-weight-bold\"></i>\n                          </p-button>\n                        </div> -->\n                  </div>\n                </form>\n              </div>\n\n              <div class=\"row\">\n                <table\n                  class=\"table table-bordered table-hover table-responsive-sm table-font-size font-weight-normal\"\n                >\n                  <thead>\n                    <tr>\n                      <th scope=\"col\" class=\"text-nowrap\">Item Code</th>\n                      <th scope=\"col\" class=\"text-nowrap\">Description</th>\n                      <th scope=\"col\" class=\"text-nowrap\">Size</th>\n                      <th scope=\"col\" class=\"text-nowrap\">Color</th>\n                      <th scope=\"col\" class=\"text-nowrap\">Category/Brand</th>\n                      <th scope=\"col\" class=\"text-nowrap\">Quantity</th>\n                      <th scope=\"col\" class=\"text-nowrap\">Box Label</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr\n                      v-show=\"boxLabel.boxNumber == item.boxNumber\"\n                      v-for=\"item in newTransaction.items\"\n                      :key=\"item.code\"\n                    >\n                      <th scope=\"row\" class=\"px-3 d-flex\">\n                        <button\n                          class=\"table-delete-button\"\n                          @click.prevent=\"removeItem(item.code, item.boxNumber)\"\n                        >\n                          <i class=\"nc-icon nc-simple-remove font-weight-bold\"></i>\n                        </button>\n                        {{ item.code }}\n                      </th>\n                      <td class=\"cell px-3\" style=\"width: 550px\">\n                        {{ item.description }}\n                      </td>\n                      <td class=\"cell px-3\" style=\"width: 10px\">\n                        {{ item.size }}\n                      </td>\n                      <td class=\"cell px-3\" style=\"width: 20px\">\n                        {{ item.color }}\n                      </td>\n                      <td class=\"cell px-3\" style=\"width: 300px\">\n                        {{ item.categorybrand }}\n                      </td>\n                      <!-- <td class=\"cell\" style=\"width: 50px\">\n                          <input\n                            type=\"number\"\n                            @blur=\"handleQuantity(item.id)\"\n                            v-model=\"item.quantity\"\n                            class=\"table-input-box\"\n                            @keypress=\"numberOnly\"\n                          />\n                        </td> -->\n                      <td class=\"cell\">\n                        <span>\n                          <div class=\"btn-group btn-group-sm d-flex flex-row\">\n                            <p-button\n                              type=\"default\"\n                              round\n                              outline\n                              size=\"xs\"\n                              @click=\"item.quantity > 0 ? item.quantity-- : 0\"\n                            >\n                              <i class=\"nc-icon nc-simple-delete\"></i>\n                            </p-button>\n                            <input\n                              type=\"text\"\n                              @blur=\"handleQuantity(item)\"\n                              v-model=\"item.quantity\"\n                              class=\"table-input-box\"\n                              style=\"width: 75px; text-align: center\"\n                              @keypress=\"numberOnly\"\n                            />\n                            <p-button\n                              type=\"default\"\n                              round\n                              outline\n                              size=\"xs\"\n                              @click=\"item.quantity++\"\n                            >\n                              <i class=\"nc-icon nc-simple-add\"></i>\n                            </p-button>\n                          </div>\n                        </span>\n                      </td>\n                      <td class=\"cell\" style=\"width: 300px\">\n                        <el-select\n                          class=\"table-select-box\"\n                          size=\"large\"\n                          v-model=\"item.boxNumber\"\n                          @change=\"editBoxLabel(item.code, item.quantity, item.boxNumber)\"\n                        >\n                          <el-option\n                            v-for=\"boxLabel in newTransaction.boxLabels\"\n                            class=\"table-select-box\"\n                            :value=\"boxLabel.boxNumber\"\n                            :label=\"boxLabel.boxLabel\"\n                            :key=\"boxLabel.id\"\n                          >\n                          </el-option>\n                        </el-select>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n              <!-- <div class=\"row\">\n                  <input\n                    placeholder=\"Input Items Remarks\"\n                    v-model=\"remarks\"\n                    @input=\"filterRemarks\"\n                    class=\"input-datalist\"\n                    list=\"remarks\"\n                  />\n                  <datalist id=\"remarks\">\n                    <option v-for=\"remark in filteredRemarks\" :value=\"remark\">\n                      {{ remark }}\n                    </option>\n                  </datalist>\n                </div> -->\n            </collapse-item>\n            <label v-show=\"isValid.item\" class=\"label-font\">Item is required.</label>\n          </collapse>\n        </card>\n        <div>\n          <label>Select an image</label><br />\n          <input multiple type=\"file\" ref=\"image\" @change=\"onFileChange\" />\n        </div>\n        <div v-if=\"images\" class=\"row\">\n          <div\n            class=\"col-md-1\"\n            v-for=\"(image, index) in images\"\n            style=\"width: 10%; padding: 5px\"\n          >\n            <button @click=\"removeImage(index)\">Remove image</button>\n            <img :src=\"image\" />\n          </div>\n        </div>\n      </div>\n      <div class=\"text-center\">\n        <button\n          class=\"btn btn-warning btn-fill btn-wd\"\n          data-bs-target=\"#confirmationDraftPullOut\"\n          data-bs-toggle=\"modal\"\n          v-show=\"isDenied\"\n        >\n          Draft\n        </button>\n        <button\n          class=\"btn btn-warning btn-fill btn-wd\"\n          @click.prevent=\"cancelTransaction\"\n          v-show=\"isCancel\"\n        >\n          Cancel\n        </button>\n        <button\n          class=\"btn btn-info btn-fill btn-wd\"\n          @click.prevent=\"submit\"\n          v-show=\"isApproved\"\n        >\n          Approved\n        </button>\n        <span\n          id=\"submitBTN\"\n          class=\"d-inline-block\"\n          tabindex=\"0\"\n          data-bs-toggle=\"tooltip\"\n          data-bs-placement=\"bottom\"\n        >\n          <button\n            :disabled=\"isDisabledSubmit\"\n            class=\"btn btn-info btn-fill btn-wd\"\n            data-bs-target=\"#confirmationSubmitPullOut\"\n            data-bs-toggle=\"modal\"\n            v-show=\"isSubmit\"\n          >\n            Submit\n          </button></span\n        >\n      </div>\n      <div class=\"clearfix\"></div>\n    </div>\n    <EditBoxLabelModal\n      :transferredData=\"transferredData\"\n      :newItemInputBox=\"newItemInputBox\"\n      :remarksList=\"remarksList\"\n      @closeModal=\"closeModal()\"\n      @renameBoxLabel=\"editingBoxLabel($event)\"\n    ></EditBoxLabelModal>\n\n    <TransactionReceiptModal\n      :transferTransactionID=\"transferTransactionID\"\n    ></TransactionReceiptModal>\n    <DraftModal :transferTransactionID=\"transferTransactionID\"></DraftModal>\n    <ConfirmationSubmitPullOutModal\n      @confirm=\"submit($event)\"\n    ></ConfirmationSubmitPullOutModal>\n    <ConfirmationDraftPullOutModal\n      @confirm=\"draft($event)\"\n    ></ConfirmationDraftPullOutModal>\n  </div>\n</template>\n<script>\nimport {\n  Collapse,\n  CollapseItem,\n  Tabs,\n  TabPane,\n  Card,\n  Button,\n} from \"src/components/UIComponents\";\nimport { DatePicker, TimeSelect, Slider, Tag, Input, Select, Option } from \"element-ui\";\nimport PProgress from \"src/components/UIComponents/Progress.vue\";\nimport PSwitch from \"src/components/UIComponents/Switch.vue\";\nimport Vue from \"vue\";\nimport NotificationTemplate from \"../Components/NotificationTemplate\";\nimport NotifAddBoxLabel from \"../Components/Notification/NotifSuccessAddBoxLabel.vue\";\nimport NotifAddItem from \"../Components/Notification/NotifSuccessAddItem.vue\";\nimport NotifDeleteBoxLabel from \"../Components/Notification/NotifSuccessDeleteBoxLabel.vue\";\nimport NotifDeleteItem from \"../Components/Notification/NotifSuccessDeleteItem.vue\";\nimport NotifDraftSave from \"../Components/Notification/NotifSuccessDraftSave.vue\";\nimport NotifItemChangeBoxLabel from \"../Components/Notification/NotifSuccessItemChangeBoxLabel.vue\";\nimport NotifItemQuantity from \"../Components/Notification/NotifSuccessItemQuantity.vue\";\nimport NotifRenameBoxLabel from \"../Components/Notification/NotifSuccessRenameBoxLabel.vue\";\nimport NotifSubmitTransaction from \"../Components/Notification/NotifSuccessSubmitTransaction.vue\";\nimport Swal from \"sweetalert2\";\nimport { Table, TableColumn } from \"element-ui\";\nimport axiosClient from \"../../../../axios\";\nimport EditBoxLabelModal from \"./PullOutRequests/ModalPullOut/EditBoxLabelModal.vue\";\nimport TransactionReceiptModal from \"./PullOutRequests/ModalPullOut/TransactionReceiptModal.vue\";\nimport DraftModal from \"./PullOutRequests/ModalPullOut/DraftModal.vue\";\nimport linkName from \"../../../../linkName\";\nimport ConfirmationSubmitPullOutModal from \"./PullOutRequests/ModalPullOut/ConfirmationSubmitPullOutModal.vue\";\nimport ConfirmationDraftPullOutModal from \"./PullOutRequests/ModalPullOut/ConfirmationDraftPullOutModal.vue\";\nimport axios, { isCancel } from \"axios\";\nimport * as XLSX from \"xlsx\";\n\nVue.use(Table);\nVue.use(TableColumn);\n\nexport default {\n  components: {\n    [DatePicker.name]: DatePicker,\n    [TimeSelect.name]: TimeSelect,\n    [Slider.name]: Slider,\n    [Tag.name]: Tag,\n    [Input.name]: Input,\n    [Button.name]: Button,\n    [Option.name]: Option,\n    [Select.name]: Select,\n    PSwitch,\n    PProgress,\n    TabPane,\n    Tabs,\n    CollapseItem,\n    Collapse,\n    Card,\n    NotificationTemplate,\n    NotifAddBoxLabel,\n    NotifAddItem,\n    NotifDeleteBoxLabel,\n    NotifDeleteItem,\n    NotifDraftSave,\n    NotifItemChangeBoxLabel,\n    NotifItemQuantity,\n    NotifRenameBoxLabel,\n    NotifSubmitTransaction,\n    EditBoxLabelModal,\n    TransactionReceiptModal,\n    DraftModal,\n    ConfirmationSubmitPullOutModal,\n    ConfirmationDraftPullOutModal,\n  },\n  data() {\n    return {\n      transferredData: \"\",\n      isCompany: false,\n      isChainCode: true,\n      isBranchName: true,\n      isTransactionType: true,\n      isShowButton: false,\n      itemCodeList: [],\n      isEditBLDisabled: false,\n      isBoxLabel: false,\n      isItem: false,\n      isAddItem: true,\n      isDisabledSubmit: true,\n      showItemInput: \"\",\n      companyList: [],\n      chainCodeList: [],\n      branchNameList: [],\n      newTransaction: {\n        //input variable\n        company: \"\",\n        chainCode: \"\",\n        branchName: \"\",\n        transactionType: \"\",\n        boxLabels: [], //list of inputted box label\n        items: [], //list of inputted item\n      },\n      newItemInputBox: [],\n      isValid: {\n        company: false,\n        chainCode: false,\n        branchName: false,\n        transactionType: false,\n        boxLabel: false,\n        item: false,\n      },\n      isApproved: false,\n      isCancel: false,\n      isSubmit: true,\n      hoveredRow: null,\n\n      transactionTypeList: [\n        {\n          value: \"CPO Item for Disposal in the Store c/o Supervisor\",\n          label: \"CPO Item for Disposal in the Store c/o Supervisor\",\n        },\n        {\n          value: \"CPO for Transfer to Another Store\",\n          label: \"CPO for Transfer to Another Store\",\n        },\n        {\n          value: \"CPO Back to WH via In-House Service\",\n          label: \"CPO Back to WH via In-House Service\",\n        },\n        {\n          value: \"CPO Back to WH via Chain Distribution Center\",\n          label: \"CPO Back to WH via Chain Distribution Center\",\n        },\n        {\n          value: \"CPO Back to WH via 3rd Party Trucking\",\n          label: \"CPO Back to WH via 3rd Party Trucking\",\n        },\n        {\n          value: \"CPO Back to WH c/o Supervisor\",\n          label: \"CPO Back to WH c/o Supervisor\",\n        },\n        { value: \"Concess Direct Pull-Out\", label: \"Concess Direct Pull-Out\" },\n      ],\n      newBoxLabel: \"\",\n      newItemInput: \"\",\n      newBrand: \"\",\n      newItemDescription: \"\",\n      newStyleCode: \"\",\n      newItemCode: \"\",\n      notifications: {\n        topCenter: false,\n      },\n      modals: {\n        classic: false,\n        notice: false,\n        mini: false,\n      },\n      isNewBoxLabel: false,\n      isNewItem: false,\n      isRightCode: false,\n      transferTransactionID: \"\",\n      uniqueItemss: [],\n      duplicateItemss: [],\n      isDenied: true,\n      dataArray: [],\n      myData: [],\n      counter: 0,\n      remarksList: [\"GOOD\", \"DAMAGED/DIRTY\", \"DISPOSAL\"],\n      images: [],\n      files: [],\n      img_counter: 0,\n      strCategory: {\n        boxNumber: 0,\n        label: \"\",\n      },\n    };\n  },\n  computed: {\n    filteredRemarks() {\n      return this.remarksList.filter((newBoxLabel) => {\n        return newBoxLabel.toLowerCase().includes(this.newBoxLabel.toLowerCase());\n      });\n    },\n    sortedBoxes() {\n      return this.newTransaction.boxLabels.sort((a, b) => a.boxNumber - b.boxNumber);\n    },\n    getItemBoxLabel() {\n      return (boxNumber) => {\n        const boxLabel = this.newTransaction.boxLabels.find(\n          (label) => label.boxNumber === boxNumber\n        );\n        return boxLabel ? boxLabel.boxLabel : \"\";\n      };\n    },\n  },\n  mounted() {\n    const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n    const tooltipList = [...tooltipTriggerList].map(\n      (tooltipTriggerEl) => new bootstrap.Tooltip(tooltipTriggerEl)\n    );\n    // this.processData();\n    this.fetchEdit();\n    this.fetchCompany();\n    if (window.resolveRouteChange) {\n      window.resolveRouteChange();\n      window.resolveRouteChange = null;\n    }\n    linkName.val = \"Pull-Out Requisition Form\";\n    console.log(\n      this.isCompany,\n      this.isChainCode,\n      this.isBranchName,\n      this.isTransactionType\n    );\n  },\n  watch: {\n    newTransaction: {\n      handler(val) {\n        this.validateSubmit();\n      },\n      deep: true,\n    },\n    \"newTransaction.items\": function (val, oldVal) {\n      this.addCategoryBoxLabel();\n    },\n    \"newTransaction.boxLabels\": function (val, oldVal) {\n      this.enableDropDowns();\n    },\n    \"newTransaction.company\": function (val, oldVal) {\n      this.showButtons();\n    },\n    \"newTransaction.chainCode\": function (val, oldVal) {\n      this.showButtons();\n    },\n    \"newTransaction.branchName\": function (val, oldVal) {\n      this.showButtons();\n    },\n    \"newTransaction.transactionType\": function (val, oldVal) {\n      this.showButtons();\n    },\n    sortedBoxes(newSortedBoxes) {\n      // Option 1: Using Vue.set\n      Vue.set(this, \"newTransaction.boxLabels\", newSortedBoxes);\n\n      // Option 2: Reassigning the array\n      // this.boxes = newSortedBoxes.slice();\n    },\n  },\n  methods: {\n    restrictChar($event) {\n      let keyCode = $event.keyCode ? $event.keyCode : $event.which;\n      if (keyCode == 91 || keyCode == 93) {\n        // 46 is dot\n        $event.preventDefault();\n      }\n    },\n    addCategoryBoxLabel() {\n      this.newTransaction.boxLabels.forEach((box) => {\n        var filteredItems = this.newTransaction.items.filter(\n          (item) => item.boxNumber === box.boxNumber\n        );\n        var uniqueCategory = [...new Set(filteredItems.map((item) => item.category))];\n        let strCategory = \"\";\n        for (let i = 0; i < uniqueCategory.length; i++) {\n          if (i == 0) strCategory = \" [ \" + uniqueCategory[i];\n          else strCategory = strCategory + \", \" + uniqueCategory[i];\n          if (i == uniqueCategory.length - 1) strCategory = strCategory + \" ]\";\n        }\n        let tempIndex = box.boxLabel.indexOf(\"[\");\n        if (tempIndex > 0) box.boxLabel = box.boxLabel.substr(0, tempIndex).trim();\n        box.boxLabel = box.boxLabel + strCategory;\n      });\n      // console.log(this.newTransaction.boxLabels);\n    },\n    filterRemarks() {\n      this.filteredRemarks = this.remarksList.filter((newBoxLabel) => {\n        return newBoxLabel.toLowerCase().includes(this.newBoxLabel.toLowerCase());\n      });\n    },\n    onFileChange(e) {\n      var files = e.target.files || e.dataTransfer.files;\n\n      this.files.push(e.target.files[0]);\n\n      if (!files.length) return;\n      this.createImage(files);\n    },\n    createImage(files) {\n      var vm = this;\n      for (var index = 0; index < files.length; index++) {\n        var reader = new FileReader();\n        reader.onload = function (event) {\n          const imageUrl = event.target.result;\n          vm.images.push(imageUrl);\n        };\n        reader.readAsDataURL(files[index]);\n      }\n    },\n    removeImage(index) {\n      this.images.splice(index, 1);\n    },\n    clearImage() {\n      document.getElementById(\"formFile\").value = null;\n      frame.src = \"\";\n    },\n    handleFileUploadImage() {\n      console.log(\"image:\", this.files);\n      console.log(\"Transaction ID:\", this.transferTransactionID);\n      const config = {\n        headers: {\n          \"content-type\": \"multipart/form-data\",\n        },\n      };\n\n      if (this.img_counter < this.files.length) {\n        axiosClient\n          .post(\n            \"/upload\",\n            {\n              image: this.files[this.img_counter],\n              company: this.newTransaction.company,\n              branchName: this.newTransaction.branchName,\n              transactionID: this.transferTransactionID,\n            },\n            config\n          )\n          .then((response) => {\n            console.log(\"Success Upload Image\", response.data);\n            this.img_counter++;\n            setTimeout(this.handleFileUploadImage, 2000);\n          })\n          .catch((error) => {\n            console.error(error);\n          });\n      }\n    },\n    handleFileUpload(event) {\n      console.log(\"File Name: \", event.target.files[0].name);\n      const file = event.target.files[0];\n      const reader = new FileReader();\n\n      reader.onload = (e) => {\n        const data = new Uint8Array(e.target.result);\n        const workbook = XLSX.read(data, { type: \"array\" });\n\n        const worksheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[worksheetName];\n\n        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n        // header: 1 indicates that the first row contains column headers\n\n        // Save the JSON data to a Vue variable\n        console.log(\"Excel Data\", jsonData);\n        this.myData = jsonData;\n        let arrayBox = [];\n        for (var x = 0; x < this.myData.length; x++) {\n          this.dataArray.push(this.myData[x]);\n          arrayBox.push(this.myData[x][1]);\n        }\n\n        console.log(\"Data:\", this.dataArray);\n\n        console.log(\"Import Excel\", this.dataArray.length);\n\n        const filteredArray = arrayBox.filter((value, index, self) => {\n          return self.indexOf(value) === index;\n        });\n\n        let tempBoxLabel = [];\n        for (var x = 0; x < filteredArray.length; x++) {\n          tempBoxLabel = {\n            id: x + 1,\n            boxNumber: x + 1,\n            boxLabel: filteredArray[x],\n          };\n\n          this.newTransaction.boxLabels.push(tempBoxLabel);\n          let tempItem = [];\n\n          if (this.newTransaction.boxLabels.length == 0) {\n            tempItem = {\n              id: this.newTransaction.boxLabels.length + 1,\n            };\n          } else {\n            tempItem = {\n              id:\n                this.newTransaction.boxLabels[this.newTransaction.boxLabels.length - 1]\n                  .id + 1,\n            };\n          }\n          this.newItemInputBox.push(tempItem);\n        }\n\n        console.log(filteredArray);\n        // for (var x = 0; x < this.dataArray.length; x++) {\n        //   console.log(\"ItemCode\", this.dataArray[x][2]);\n        // }\n        // var y = 0;\n        // while (y < this.dataArray.length) {\n\n        //   y++;\n        // }\n        this.counter = 0;\n        this.saveItemsExcel();\n      };\n\n      reader.readAsArrayBuffer(file);\n    },\n\n    saveItemsExcel() {\n      if (this.counter < this.dataArray.length) {\n        // console.log(\"Data\", this.dataArray[this.counter - 1]);\n        var boxNumber = this.dataArray[this.counter][0];\n        var quantity = this.dataArray[this.counter][3];\n        axiosClient\n          .get(\"/fetchSameItems\", {\n            params: {\n              company: this.newTransaction.company,\n              ItemNo: this.dataArray[this.counter][2],\n            },\n          })\n          .then((response) => {\n            console.log(\"Data\", response.data);\n            if (response.data.length == 0) {\n              setTimeout(this.saveItemsExcel, 2000);\n            }\n            for (var x = 0; x < response.data.length; x++) {\n              var flag = true;\n\n              for (var i = 0; i < this.newTransaction.items.length; i++) {\n                if (\n                  this.newTransaction.items[i].code == response.data[x].ItemNo &&\n                  this.newTransaction.items[i].boxNumber == boxNumber\n                ) {\n                  this.newTransaction.items[i].quantity =\n                    parseInt(this.newTransaction.items[x].quantity) + 1;\n                  flag = false;\n                  break;\n                }\n              }\n              if (flag) {\n                let tempItem = {\n                  code: response.data[x].ItemNo,\n                  description: response.data[x].ItemDescription,\n                  categorybrand: response.data[x].brandNames,\n                  quantity: quantity,\n                  size: response.data[x].Size,\n                  color: response.data[x].Color,\n                  // boxLabel: label,\n                  boxNumber: parseInt(boxNumber),\n                  category: response.data[x].Category,\n                };\n                this.newTransaction.items.push(tempItem);\n              }\n\n              console.log(\"Items\", this.newTransaction.items);\n\n              this.isAddItem = true;\n              this.notifyVue(\"AddItem\", \"bottom\", \"right\");\n              setTimeout(this.saveItemsExcel, 2000);\n            }\n          })\n          .catch((error) => {\n            console.error(error);\n          });\n      }\n      this.counter++;\n    },\n\n    numberOnly($event) {\n      let keyCode = $event.keyCode ? $event.keyCode : $event.which;\n      if (keyCode < 48 || keyCode > 57) {\n        // 46 is dot\n        $event.preventDefault();\n      }\n    },\n    validateSubmit() {\n      let uniqueItems = [\n        ...new Set(this.newTransaction.items.map((item) => item.boxNumber)),\n      ];\n      let itemsValidation = false;\n      let itemsValidationTemp = false;\n      for (let j in this.newTransaction.boxLabels) {\n        for (let i in uniqueItems) {\n          if (uniqueItems[i] == this.newTransaction.boxLabels[j].id) {\n            itemsValidationTemp = true;\n            itemsValidation = true;\n            break;\n          } else {\n            itemsValidation = false;\n            itemsValidationTemp = false;\n          }\n        }\n      }\n      for (let x in this.newTransaction.items)\n        if (this.newTransaction.items[x].quantity == 0) {\n          itemsValidation = false;\n          let tooltip = bootstrap.Tooltip.getInstance(\"#submitBTN\");\n          tooltip._config.title = \"No items should have a quantity with 0.\";\n          tooltip.update();\n          break;\n        }\n      if (!itemsValidationTemp) {\n        let tooltip = bootstrap.Tooltip.getInstance(\"#submitBTN\");\n        tooltip._config.title = \"Kindly add item/s on every boxes you've added.\";\n        tooltip.update();\n      }\n      if (\n        !this.newTransaction.company ||\n        !this.newTransaction.chainCode ||\n        !this.newTransaction.branchName ||\n        !this.newTransaction.transactionType\n      ) {\n        let tooltip = bootstrap.Tooltip.getInstance(\"#submitBTN\");\n        tooltip._config.title = \"Complete the form above to enable this button.\";\n        tooltip.update();\n      } else if (this.newTransaction.boxLabels.length <= 0) {\n        let tooltip = bootstrap.Tooltip.getInstance(\"#submitBTN\");\n        tooltip._config.title =\n          \"No box added. Kindly add box/es to be able to add item/s.\";\n        tooltip.update();\n      } else if (this.newTransaction.items.length <= 0) {\n        let tooltip = bootstrap.Tooltip.getInstance(\"#submitBTN\");\n        tooltip._config.title =\n          \"No items added. Kindly add item/s for this pull-out request.\";\n        tooltip.update();\n      }\n      if (\n        this.newTransaction.company &&\n        this.newTransaction.chainCode &&\n        this.newTransaction.branchName &&\n        this.newTransaction.transactionType &&\n        this.newTransaction.boxLabels.length > 0 &&\n        itemsValidation\n      ) {\n        this.isDisabledSubmit = false;\n        let tooltip = bootstrap.Tooltip.getInstance(\"#submitBTN\");\n        tooltip.disable();\n      } else this.isDisabledSubmit = true;\n    },\n    editingBoxLabel({ index, value, tempBL }) {\n      if (value) this.newTransaction.boxLabels[index].boxLabel = value;\n      else this.newTransaction.boxLabels[index].boxLabel = tempBL;\n    },\n    enableDropDowns() {\n      if (this.newTransaction.boxLabels.length == 0) {\n        this.isCompany = false;\n        this.isChainCode = false;\n        this.isBranchName = false;\n        this.isTransactionType = false;\n        this.isEditBLDisabled = true;\n        // console.log(this.newTransaction.boxLabels.length);\n      } else this.isEditBLDisabled = false;\n    },\n    showButtons() {\n      if (\n        this.newTransaction.company &&\n        this.newTransaction.chainCode &&\n        this.newTransaction.branchName &&\n        this.newTransaction.transactionType\n      ) {\n        this.isShowButton = true;\n        if (this.newTransaction.boxLabels.length == 0) this.isEditBLDisabled = true;\n        else this.isEditBLDisabled = false;\n      } else this.isShowButton = false;\n    },\n    fetchEdit() {\n      try {\n        const uri = window.location.href;\n        var transactionID = uri.split(\"?\")[1];\n        var id = transactionID.split(\"=\")[1].split(\"&\")[0];\n        // console.log(\"ID\", id);\n        // console.log(\"Company\", transactionID.split(\"=\")[2]);\n        var company = transactionID.split(\"=\")[2];\n        axiosClient\n          .get(\"/fetchEditDraftBranch\", {\n            params: {\n              company: company,\n              plID: id,\n            },\n          })\n          .then((response) => {\n            // console.log(\"Edit Branch:\", response.data, this.itemss);\n            this.newTransaction.company = response.data[0].company;\n            this.newTransaction.branchName = response.data[0].branchName;\n            this.newTransaction.chainCode = response.data[0].chainCode;\n            this.newTransaction.transactionType = response.data[0].transactionType;\n\n            if (\n              response.data[0].status == \"denied\" ||\n              response.data[0].status == \"endorsement\" ||\n              response.data[0].status == \"unprocessed\"\n            ) {\n              this.isDenied = false;\n              this.isCancel = true;\n            }\n\n            if (response.data[0].status == \"endorsement\") {\n              this.isApproved = true;\n              this.isSubmit = false;\n            }\n\n            axiosClient\n              .get(\"/fetchEditDraftItem\", {\n                params: {\n                  company: company,\n                  plID: id,\n                },\n              })\n              .then((response) => {\n                // console.log(\"Edit Item:\", response.data);\n                for (var x = 0; x < response.data.length; x++) {\n                  this.newTransaction.items.push(response.data[x]);\n                }\n\n                // const idMap = new Map();\n\n                // this.newTransaction.items.forEach((item) => {\n                //   if (!idMap.has(item.id)) {\n                //     console.log(\"Item ID:\", item.id);\n                //     // Unique ID\n                //     idMap.set(item.id, true);\n                //     this.newTransaction.boxLabels.push({\n                //       id: item.boxNumber,\n                //       boxNumber: item.boxNumber,\n                //       boxLabel: item.boxLabel,\n                //     });\n                //     this.newItemInputBox.push({\n                //       id: item.boxNumber,\n                //     });\n                //   }\n                // });\n\n                const filteredData = this.newTransaction.items.filter(\n                  (obj, index, self) => {\n                    const boxLabel = obj.boxLabel;\n                    return self.findIndex((o) => o.boxLabel === boxLabel) === index;\n                  }\n                );\n\n                const boxData = filteredData.map((obj) => {\n                  return {\n                    boxLabel: obj.boxLabel,\n                    boxNumber: obj.boxNumber,\n                  };\n                });\n\n                console.log(\"Filtered Box label:\", boxData);\n\n                boxData.forEach((item) => {\n                  console.log(\"Box Label:\", item.boxLabel);\n                  this.newTransaction.boxLabels.push({\n                    id: item.boxNumber,\n                    boxNumber: item.boxNumber,\n                    boxLabel: item.boxLabel,\n                  });\n                  this.newItemInputBox.push({\n                    id: item.boxNumber,\n                  });\n                  console.log(\"New Box Label:\", this.newTransaction.boxLabels);\n                });\n\n                // this.addCategoryBoxLabel();\n                // console.log(\"Box Labels\", filteredData);\n\n                // console.log(\"New Box Labels:\", this.newTransaction.boxLabels);\n                // console.log(\"New Box Labels:\", this.newTransaction.boxLabels.length);\n\n                // this.newTransaction.boxLabels.forEach((box) => {\n                //   var filteredItems = this.newTransaction.items.filter(\n                //     (item) => item.boxNumber === box.boxNumber\n                //   );\n                //   console.log(\"Loop\", filteredItems);\n                //   var uniqueCategory = [\n                //     ...new Set(filteredItems.map((item) => item.category)),\n                //   ];\n                //   let strCategory = \"\";\n                //   for (let i = 0; i < uniqueCategory.length; i++) {\n                //     if (i == 0) strCategory = \" [ \" + uniqueCategory[i];\n                //     else strCategory = strCategory + \", \" + uniqueCategory[i];\n                //     if (i == uniqueCategory.length - 1) strCategory = strCategory + \" ]\";\n                //   }\n                //   let tempIndex = box.boxLabel.indexOf(\"[\");\n                //   if (tempIndex > 0)\n                //     box.boxLabel = box.boxLabel.substr(0, tempIndex).trim();\n                //   box.boxLabel = box.boxLabel + strCategory;\n                // });\n\n                // console.log(\"Edit Labels:\", this.newTransaction.boxLabels);\n\n                // console.log(\n                //   \"this.newTransaction.transactionType:\",\n                //   this.newTransaction.transactionType\n                // );\n\n                if (this.newTransaction.company) {\n                  this.isCompany = false;\n                  this.isChainCode = false;\n                  this.fetchCompany();\n                  this.fetchChainCode();\n                }\n\n                if (this.newTransaction.chainCode) {\n                  this.isChainCode = false;\n                  this.isBranchName = false;\n                  this.fetchChainName();\n                  this.fetchChainCode();\n                }\n\n                if (this.newTransaction.branchName) {\n                  this.isBranchName = false;\n                  this.isTransactionType = false;\n                  this.fetchChainName();\n                }\n\n                if (this.newTransaction.transactionType) {\n                  // console.log(\"Yes\", this.isShowButton);\n                  this.isCompany = false;\n                  this.isChainCode = false;\n                  this.isBranchName = false;\n                  this.isTransactionType = false;\n                  // this.isShowButton = true;\n                  // console.log(\"Yes 2\", this.isShowButton);\n                }\n\n                if (this.newTransaction.items.length) {\n                  // console.log(\"Disable\", this.newTransaction.items.length);\n                  this.isCompany = true;\n                  this.isChainCode = true;\n                  this.isBranchName = true;\n                  this.isTransactionType = true;\n                  // this.isShowButton = true;\n                }\n              })\n              .catch((error) => {\n                // console.error(error);\n              });\n          })\n          .catch((error) => {\n            // console.error(error);\n          });\n      } catch {\n        // console.log(\"No Edit\");\n        //Fetching Promo Info\n        axiosClient\n          .get(\"/fetchPromoBranchInfo\", {\n            params: {\n              userID: sessionStorage.getItem(\"UserID\"),\n            },\n          })\n          .then((response) => {\n            // console.log(\"Promo Branch Info:\", response.data);\n            this.newTransaction.company = response.data[0].company;\n            this.newTransaction.chainCode = response.data[0].chainCode;\n            this.newTransaction.branchName = response.data[0].branchName;\n          })\n          .catch((error) => {\n            // console.error(error);\n          });\n      }\n    },\n    cancelTransaction() {\n      location.href = \"http://192.168.0.7:4040/#/pull-out/requests\";\n    },\n    updateData(updatedData) {\n      // this.newTransaction.boxLabels = updatedData;\n      // console.log(\"das\", updatedData);\n    },\n    openModal(data) {\n      data.boxLabels.forEach((box) => {\n        let tempIndex = box.boxLabel.indexOf(\"[\");\n        if (tempIndex > 0) box.boxLabel = box.boxLabel.substr(0, tempIndex).trim();\n      });\n      console.log(\"Edit: \", data);\n      this.transferredData = data;\n    },\n    closeModal() {\n      console.log(\"CLOSE\");\n      this.addCategoryBoxLabel();\n      this.transferredData = \"\";\n    },\n    showButton(itemId) {\n      this.hoveredRow = itemId;\n    },\n    hideButton(itemId) {\n      this.hoveredRow = null;\n    },\n    removeItem(code, boxNumber) {\n      this.validateSubmit();\n      // console.log(\"New DATAs\", code, boxNumber);\n      this.newTransaction.items = this.newTransaction.items.filter(\n        (item) => item.code !== code || item.boxNumber !== boxNumber\n      );\n\n      this.notifyVue(\"DeleteItem\", \"bottom\", \"right\");\n\n      // alert(\"Your data: \" + JSON.stringify(data));\n\n      // console.log(\"New DATA\", data);\n    },\n    fetchItems() {\n      if (this.newItemInput.length >= 4) {\n        if (\n          this.newTransaction.company == \"NBFI\" ||\n          this.newTransaction.company == \"CMC\" ||\n          this.newTransaction.company == \"ASC\"\n        ) {\n          axiosClient\n            .get(\"/fetchItemsNBFI\", {\n              params: {\n                ItemNo: this.newItemInput,\n              },\n            }) // Make a GET request to the specified URL\n            .then((response) => {\n              //console.log(\"Item Code Response: \", response.data);\n              this.itemCodeList = response.data; // Update the 'data' variable with the retrieved data\n\n              // // this.itemCodeArray = Object.keys(this.itemCodeList).map((ItemNo) => ({\n              // //   ItemNo: ItemNo,\n              // // }));\n              //     console.log(\"Success Array Item: \", this.itemCodeArray);\n              //    console.log(\"Success Item: \", response.data);\n              //this.validateItemCode();\n            })\n            .catch((error) => {\n              // console.error(error.reponse); // Handle any errors that may occur\n            });\n        } else {\n          axiosClient\n            .get(\"/fetchItems\", {\n              params: {\n                ItemNo: this.newItemInput,\n              },\n            }) // Make a GET request to the specified URL\n            .then((response) => {\n              //console.log(\"Item Code Response: \", response.data);\n              this.itemCodeList = response.data; // Update the 'data' variable with the retrieved data\n\n              // // this.itemCodeArray = Object.keys(this.itemCodeList).map((ItemNo) => ({\n              // //   ItemNo: ItemNo,\n              // // }));\n              //     console.log(\"Success Array Item: \", this.itemCodeArray);\n              //    console.log(\"Success Item: \", response.data);\n              //this.validateItemCode();\n            })\n            .catch((error) => {\n              // console.error(error.reponse); // Handle any errors that may occur\n            });\n        }\n      } else if (this.newItemInput.length == 0) this.itemCodeList = [];\n    },\n    compareItemCode() {\n      let value = this.newItemInput;\n      if (value.indexOf(\" - \") >= 0) {\n        let parts = value.split(\" - \");\n        this.newItemInput = parts[0];\n      }\n      // console.log(\"Length Item Code:\", this.newItemCode.length > 16);\n      if (this.newItemInput.length > 16) {\n        // this.showTooltip = true;\n        this.newItemInput = this.newItemInput.slice(0, 16);\n      } else {\n        // this.showTooltip = false;\n      }\n      axiosClient\n        .get(\"/compareItemCode\", {\n          params: {\n            companyType: this.newTransaction.company,\n            ItemNo: this.newItemInput,\n          },\n        })\n        .then((response) => {\n          //console.log(\"Success Item No:\", response.data);\n          //console.log(\"Success Item Description\", response.data[0].ItemDescription);\n          this.newItemCode = response.data[0].ItemNo;\n          this.newItemDescription = response.data[0].ItemDescription;\n          this.newStyleCode = response.data[0].StyleCode;\n          // console.log(\n          //   \"Convert to String Item Description\",\n          //   response.data[0].ItemDescription.toString()\n          // );\n          let brandCode = response.data[0].ItemNo.toString().substr(1, 2);\n\n          // console.log(\"Brand Code\", brandCode);\n\n          axiosClient\n            .get(\"/fetchBrands\", {\n              params: {\n                companyType: this.newTransaction.company,\n                brandCode: brandCode,\n              },\n            })\n            .then((response) => {\n              //console.log(\"Success\", response.data);\n              this.newBrand = response.data[0].brandNames;\n              // console.log(\"Box Data:\", this.boxes);\n              // console.log(\"Box Count:\", this.boxes.length);\n              // if (this.boxes.length == 1) {\n              //   this.newItemBoxType = this.boxes[0].boxType + \"-\" + this.boxes[0].id;\n              //   // console.log(\"TEst\", this.boxes[0].boxType);\n              // }\n              // this.$refs.Quantity.focus();\n            })\n            .catch((error) => {\n              //console.error(error);\n            });\n        })\n        .catch((error) => {\n          this.missItemCode = 0;\n          !this.newItemInput ? true : (this.isRightCode = true);\n          //console.log(\"Not Equal\");\n          //console.error(error);\n        });\n    },\n    handleQuantity(item) {\n      //console.log(\"Item Quantity\", item.quantity);\n      if (!item.quantity) {\n        //console.log(\"Empty\");\n        item.quantity = 0;\n      }\n      this.notifyVue(\"ItemQuantity\", \"bottom\", \"right\");\n    },\n    notifyVue(notify, verticalAlign, horizontalAlign) {\n      var notification = \"\";\n      let notifType = \"\";\n\n      if (notify === \"AddBoxLabel\") {\n        notification = NotifAddBoxLabel;\n        notifType = \"success\";\n      } else if (notify === \"AddItem\") {\n        notification = NotifAddItem;\n        notifType = \"success\";\n      } else if (notify === \"DeleteBoxLabel\") {\n        notification = NotifDeleteBoxLabel;\n        notifType = \"danger\";\n      } else if (notify === \"DeleteItem\") {\n        notification = NotifDeleteItem;\n        notifType = \"danger\";\n      } else if (notify === \"DraftSave\") {\n        notification = NotifDraftSave;\n        notifType = \"success\";\n      } else if (notify === \"ChangeBoxLabel\") {\n        notification = NotifItemChangeBoxLabel;\n        notifType = \"success\";\n      } else if (notify === \"ItemQuantity\") {\n        notification = NotifItemQuantity;\n        notifType = \"success\";\n      } else if (notify === \"RenameBoxLabel\") {\n        notification = NotifRenameBoxLabel;\n        notifType = \"success\";\n      } else {\n        notification = NotifSubmitTransaction;\n        notifType = \"success\";\n      }\n\n      this.$notify({\n        component: notification,\n        // icon: \"nc-icon nc-bell-55\",\n        horizontalAlign: horizontalAlign,\n        verticalAlign: verticalAlign,\n        type: notifType,\n        props: {\n          customValue: \"Success\",\n        },\n      });\n    },\n    fetchCompany() {\n      axiosClient\n        .get(\"/fetchCompany\")\n        .then((response) => {\n          //console.log(\"Company Response:\", response.data);\n          this.companyList = response.data;\n        })\n        .catch((error) => {\n          //console.error(error);\n        });\n    },\n    fetchChainCode() {\n      axiosClient\n        .get(\"/fetchChain\", {\n          params: {\n            company: this.newTransaction.company,\n          },\n        })\n        .then((response) => {\n          //console.log(\"Chain Code Response:\", response.data);\n          this.chainCodeList = response.data;\n        })\n        .catch((error) => {\n          //console.error(error);\n        });\n      // this.notifyVue(\"bottom\", \"right\");\n      this.isChainCode = false;\n    },\n    fetchChainName() {\n      axiosClient\n        .get(\"/fetchChainName\", {\n          params: {\n            chainCode: this.newTransaction.chainCode,\n          },\n        })\n        .then((response) => {\n          //console.log(\"Chain Name Response:\", response.data);\n          this.branchNameList = response.data;\n        })\n        .catch((error) => {\n          //console.error(error);\n        });\n      this.isBranchName = false;\n    },\n    addItem(boxNUMBER) {\n      this.isItem = false;\n      this.isAddItem = false;\n      this.showItemInput = boxNUMBER;\n      console.log(\"clicked nUMBER:\", this.showItemInput);\n    },\n    saveItem(boxNUMBER) {\n      let confirmSave = false;\n\n      this.isNewItem = !this.newItemInput ? true : false;\n      //console.log(\"item\", this.newItemInput);\n      //console.log(\"condition\", this.isNewItem);\n\n      if (this.isNewItem) {\n        this.isRightCode = false;\n        return 0;\n      }\n\n      //console.log(this.newTransaction.items.length);\n      //console.log(\"Items: \", this.newTransaction.items);\n\n      // let str = label.toLowerCase();\n      //console.log(\"Item No:\", this.newItemCode);\n      //console.log(\"Item Description:\", this.newItemDescription);\n      //console.log(\"Style Code:\", this.newStyleCode);\n      axiosClient\n        .get(\"/fetchSameItem\", {\n          params: {\n            company: this.newTransaction.company,\n            ItemCode: this.newItemCode,\n            ItemDescription: this.newItemDescription,\n            StyleCode: this.newStyleCode,\n          },\n        })\n        .then((response) => {\n          //console.log(\"Same Item:\", response.data);\n          for (var x = 0; x < response.data.length; x++) {\n            var flag = true;\n\n            for (var i = 0; i < this.newTransaction.items.length; i++) {\n              if (\n                this.newTransaction.items[i].code == response.data[x].ItemNo &&\n                this.newTransaction.items[i].boxNumber == boxNUMBER\n              ) {\n                this.newTransaction.items[i].quantity =\n                  parseInt(this.newTransaction.items[x].quantity) + 1;\n                flag = false;\n                break;\n              }\n            }\n            if (flag) {\n              let tempItem = {\n                code: response.data[x].ItemNo,\n                description: response.data[x].ItemDescription,\n                categorybrand: this.newBrand,\n                quantity: 0,\n                size: response.data[x].Size,\n                color: response.data[x].Color,\n                // boxLabel: label,\n                boxNumber: boxNUMBER,\n                category: response.data[x].Category,\n              };\n              this.newTransaction.items.push(tempItem);\n            }\n            this.isRightCode = false;\n            this.isItem = false;\n            this.isAddItem = true;\n            this.newItemInput = \"\";\n            this.showItemInput = \"\";\n            this.notifyVue(\"AddItem\", \"bottom\", \"right\");\n          }\n        })\n        .catch((error) => {\n          //console.error(error);\n        });\n      console.log(\"Confirm Save: \", confirmSave);\n\n      //console.log(\"Items: \", this.newTransaction.items);\n\n      // console.log(this.newListBoxLabel);\n    },\n    cancelItem() {\n      this.isRightCode = false;\n      this.isNewItem = false;\n      this.isItem = false;\n      this.isAddItem = true;\n      this.showItemInput = \"\";\n      this.newItemInput = \"\";\n    },\n    addBoxLabel() {\n      this.isBoxLabel = true;\n      this.isEditBLDisabled = true;\n    },\n    saveBoxLabel() {\n      this.isNewBoxLabel = !this.newBoxLabel ? true : false;\n\n      if (this.isNewBoxLabel) {\n        return 0;\n      }\n      this.isBoxLabel = false;\n      //console.log(this.newTransaction.boxLabels.length);\n      let tempBoxLabel = [];\n\n      if (this.newTransaction.boxLabels.length == 0) {\n        tempBoxLabel = {\n          id: this.newTransaction.boxLabels.length + 1,\n          boxNumber: this.newTransaction.boxLabels.length + 1,\n          boxLabel: this.newBoxLabel,\n        };\n      } else {\n        tempBoxLabel = {\n          id:\n            this.newTransaction.boxLabels[this.newTransaction.boxLabels.length - 1].id +\n            1,\n          boxNumber: this.newTransaction.boxLabels.length + 1,\n          boxLabel: this.newBoxLabel,\n        };\n      }\n\n      let tempItem = [];\n\n      if (this.newTransaction.boxLabels.length == 0) {\n        tempItem = {\n          id: this.newTransaction.boxLabels.length + 1,\n        };\n      } else {\n        tempItem = {\n          id:\n            this.newTransaction.boxLabels[this.newTransaction.boxLabels.length - 1].id +\n            1,\n        };\n      }\n\n      this.newTransaction.boxLabels.push(tempBoxLabel);\n      this.newItemInputBox.push(tempItem);\n      this.newBoxLabel = \"\";\n      // this.notifyVue(\"AddBoxLabel\", \"bottom\", \"right\");\n      // console.log(\"Console:\", this.newTransaction.boxLabels);\n      //Disable the above select buttons\n      this.isCompany = true;\n      this.isChainCode = true;\n      this.isBranchName = true;\n      this.isTransactionType = true;\n      this.notifyVue(\"AddBoxLabel\", \"bottom\", \"right\");\n      this.isEditBLDisabled = false;\n    },\n    cancelBoxLabel() {\n      this.isNewBoxLabel = false;\n      this.isBoxLabel = false;\n      this.newBoxLabel = \"\";\n      if (this.newTransaction.boxLabels.length == 0) this.isEditBLDisabled = true;\n      else this.isEditBLDisabled = false;\n    },\n    submit(confirmation) {\n      if (confirmation) {\n        try {\n          const uri = window.location.href;\n          var transactionID = uri.split(\"?\")[1];\n          var id = transactionID.split(\"=\")[1].split(\"&\")[0];\n\n          this.isValid.company = !this.newTransaction.company ? true : false;\n          this.isValid.chainCode = !this.newTransaction.chainCode ? true : false;\n          this.isValid.branchName = !this.newTransaction.branchName ? true : false;\n          this.isValid.transactionType = !this.newTransaction.transactionType\n            ? true\n            : false;\n          this.isValid.boxLabel = !this.newTransaction.boxLabels.length ? true : false;\n          this.isValid.item = !this.newTransaction.items.length ? true : false;\n\n          //console.log(\"Company: \", this.isValid.company);\n\n          //console.log(\"company\", this.newTransaction.company);\n          // alert(\"Your data: \" + JSON.stringify(this.newTransaction));\n\n          if (\n            sessionStorage.getItem(\"Position\") == \"Agent\" ||\n            sessionStorage.getItem(\"Position\") == \"Admin\"\n          ) {\n            var status = \"endorsement\";\n          } else if (sessionStorage.getItem(\"Position\") == \"Admin\") {\n            var status = \"approved\";\n          } else {\n            var status = \"unprocessed\";\n          }\n          axiosClient\n            .post(\"/updatePullOutBranchRequest\", {\n              id: id,\n              chainCode: this.newTransaction.chainCode,\n              companyType: this.newTransaction.company,\n              branchName: this.newTransaction.branchName,\n              transactionType: this.newTransaction.transactionType,\n              email: sessionStorage.getItem(\"Email\"),\n              status: status,\n            })\n            .then((response) => {\n              //console.log(\"Success Branch Save: \", response.data);\n              this.transferTransactionID = id;\n\n              for (var x = 0; x < this.newTransaction.items.length; x++) {\n                let labelBox = \"\";\n                for (let box of this.newTransaction.boxLabels) {\n                  if (box.id == this.newTransaction.items[x].boxNumber) {\n                    labelBox = box.boxLabel;\n                  }\n                }\n                axiosClient\n                  .post(\"/updatePullOutItemRequest\", {\n                    plID: id,\n                    companyType: this.newTransaction.company,\n                    brand: this.newTransaction.items[x].categorybrand,\n                    boxNumber: this.newTransaction.items[x].boxNumber,\n                    boxLabel: labelBox,\n                    itemCode: this.newTransaction.items[x].code,\n                    quantity: this.newTransaction.items[x].quantity,\n                    email: sessionStorage.getItem(\"Email\"),\n                    status: status,\n                  })\n                  .then((response) => {\n                    //console.log(\"Success Items Save: \", response.data);\n                    // window.location.href =\n                    //   \"http://192.168.0.7:4040/#/pull-out/requisition-form\";\n                  })\n                  .catch((error) => {\n                    //console.error(error);\n                  });\n              }\n              const transactionModal = new bootstrap.Modal(\"#transactionReceipt\");\n              transactionModal.show();\n            })\n            .catch((error) => {\n              //console.error(error);\n            });\n        } catch {\n          this.isValid.company = !this.newTransaction.company ? true : false;\n          this.isValid.chainCode = !this.newTransaction.chainCode ? true : false;\n          this.isValid.branchName = !this.newTransaction.branchName ? true : false;\n          this.isValid.transactionType = !this.newTransaction.transactionType\n            ? true\n            : false;\n          this.isValid.boxLabel = !this.newTransaction.boxLabels.length ? true : false;\n          this.isValid.item = !this.newTransaction.items.length ? true : false;\n\n          //console.log(\"Company: \", this.isValid.company);\n\n          //console.log(\"company\", this.newTransaction.company);\n          // alert(\"Your data: \" + JSON.stringify(this.newTransaction));\n          axiosClient\n            .post(\"/savePullOutBranchRequest\", {\n              chainCode: this.newTransaction.chainCode,\n              companyType: this.newTransaction.company,\n              branchName: this.newTransaction.branchName,\n              transactionType: this.newTransaction.transactionType,\n              email: sessionStorage.getItem(\"Email\"),\n              status: \"unprocessed\",\n            })\n            .then((response) => {\n              //console.log(\"Success Branch Save: \", response.data);\n              this.transferTransactionID = response.data.id;\n\n              for (var x = 0; x < this.newTransaction.items.length; x++) {\n                let labelBox = \"\";\n                for (let box of this.newTransaction.boxLabels) {\n                  if (box.id == this.newTransaction.items[x].boxNumber) {\n                    labelBox = box.boxLabel;\n                  }\n                }\n                axiosClient\n                  .post(\"/savePullOutItemRequest\", {\n                    plID: response.data.id,\n                    companyType: this.newTransaction.company,\n                    brand: this.newTransaction.items[x].categorybrand,\n                    boxNumber: this.newTransaction.items[x].boxNumber,\n                    boxLabel: labelBox,\n                    itemCode: this.newTransaction.items[x].code,\n                    quantity: this.newTransaction.items[x].quantity,\n                    email: sessionStorage.getItem(\"Email\"),\n                    status: \"unprocessed\",\n                  })\n                  .then((response) => {\n                    //console.log(\"Success Items Save: \", response.data);\n                  })\n                  .catch((error) => {\n                    //console.error(error);\n                  });\n              }\n              const transactionModal = new bootstrap.Modal(\"#transactionReceipt\");\n              transactionModal.show();\n            })\n            .catch((error) => {\n              //console.error(error);\n            });\n        }\n        setTimeout(this.handleFileUploadImage, 2000);\n      }\n    },\n    draft(confirmation) {\n      console.log(\"Confirmed\");\n      if (confirmation) {\n        console.log(\"Confirmed Data:\", confirmation);\n        try {\n          const uri = window.location.href;\n          var transactionID = uri.split(\"?\")[1];\n          var id = transactionID.split(\"=\")[1].split(\"&\")[0];\n\n          axiosClient\n            .post(\"/updatePullOutBranchRequest\", {\n              id: id,\n              chainCode: this.newTransaction.chainCode,\n              companyType: this.newTransaction.company,\n              branchName: this.newTransaction.branchName,\n              transactionType: this.newTransaction.transactionType,\n              status: \"draft\",\n              email: sessionStorage.getItem(\"Email\"),\n            })\n            .then((response) => {\n              console.log(\"Success Branch Save: \", response.data);\n              //console.log(\"Items Length:\", this.newTransaction.items.length);\n              for (var x = 0; x < this.newTransaction.items.length; x++) {\n                let labelBox = \"\";\n                for (let box of this.newTransaction.boxLabels) {\n                  if (box.id == this.newTransaction.items[x].boxNumber) {\n                    labelBox = box.boxLabel;\n                  }\n                }\n                axiosClient\n                  .post(\"/updatePullOutItemRequest\", {\n                    plID: id,\n                    companyType: this.newTransaction.company,\n                    brand: this.newTransaction.items[x].categorybrand,\n                    boxNumber: this.newTransaction.items[x].boxNumber,\n                    boxLabel: labelBox,\n                    itemCode: this.newTransaction.items[x].code,\n                    quantity: this.newTransaction.items[x].quantity,\n                    status: \"draft\",\n                    email: sessionStorage.getItem(\"Email\"),\n                  })\n                  .then((response) => {\n                    console.log(\"Success Items Save: \", response.data);\n                  })\n                  .catch((error) => {\n                    //console.error(error);\n                  });\n              }\n              const draftModal = new bootstrap.Modal(\"#draftModal\");\n              draftModal.show();\n            })\n            .catch((error) => {\n              //console.error(error);\n            });\n        } catch {\n          axiosClient\n            .post(\"/savePullOutBranchRequest\", {\n              chainCode: this.newTransaction.chainCode,\n              companyType: this.newTransaction.company,\n              branchName: this.newTransaction.branchName,\n              transactionType: this.newTransaction.transactionType,\n              status: \"draft\",\n              email: sessionStorage.getItem(\"Email\"),\n            })\n            .then((response) => {\n              //console.log(\"Success Branch Save: \", response.data);\n\n              for (var x = 0; x < this.newTransaction.items.length; x++) {\n                let labelBox = \"\";\n                for (let box of this.newTransaction.boxLabels) {\n                  if (box.id == this.newTransaction.items[x].boxNumber) {\n                    labelBox = box.boxLabel;\n                  }\n                }\n                axiosClient\n                  .post(\"/savePullOutItemRequest\", {\n                    plID: response.data.id,\n                    companyType: this.newTransaction.company,\n                    brand: this.newTransaction.items[x].categorybrand,\n                    boxNumber: this.newTransaction.items[x].boxNumber,\n                    boxLabel: labelBox,\n                    itemCode: this.newTransaction.items[x].code,\n                    quantity: this.newTransaction.items[x].quantity,\n                    status: \"draft\",\n                    email: sessionStorage.getItem(\"Email\"),\n                  })\n                  .then((response) => {\n                    //console.log(\"Success Items Save: \", response.data);\n                  })\n                  .catch((error) => {\n                    //console.error(error);\n                  });\n              }\n              const draftModal = new bootstrap.Modal(\"#draftModal\");\n              draftModal.show();\n            })\n            .catch((error) => {\n              //console.error(error);\n            });\n        }\n      }\n    },\n    editBoxLabel(code, quantity, boxNumber) {\n      console.log(\"Items\", code, quantity, boxNumber);\n      this.validateSubmit();\n      //console.log(\n      //   \"Item Code Edit:\",\n      //   code,\n      //   \" Quantity:\",\n      //   quantity,\n      //   \" Box Number\",\n      //   boxNumber\n      // );\n      //console.log(\" == : \", this.newTransaction.items);\n      var filteredItems = this.newTransaction.items.filter(\n        (item) => item.code === code && item.boxNumber === boxNumber\n      );\n\n      //console.log(\"Filtered Items: \", filteredItems);\n      var uniqueItems = [];\n      filteredItems.forEach((item) => {\n        var existingItem = uniqueItems.find(\n          (uniqueItem) => uniqueItem.code === item.code\n        );\n        if (existingItem) {\n          existingItem.quantity += item.quantity;\n        } else {\n          uniqueItems.push({ ...item });\n        }\n      });\n      // The uniqueItems array will contain unique items based on itemCode, with quantities added up.\n      //console.log(\"Unique Items: 1\", uniqueItems);\n      //console.log(\"Unique Items: Code\", uniqueItems[0].code);\n      //console.log(\"Unique Items: Box Number\", uniqueItems[0].boxNumber);\n\n      this.newTransaction.items = this.newTransaction.items.filter(\n        (item) =>\n          item.code !== uniqueItems[0].code || item.boxNumber !== uniqueItems[0].boxNumber\n      );\n      this.newTransaction.items.push(uniqueItems[0]);\n      this.notifyVue(\"ChangeBoxLabel\", \"bottom\", \"right\");\n    },\n  },\n};\n</script>\n<style>\n.el-select {\n  width: 100%;\n  background-color: white;\n  border: 20px;\n  border-color: blueviolet;\n}\n\n.btn-transparent {\n  background-color: transparent;\n  border: none;\n  color: #000000;\n}\n\n.btn-transparent:hover {\n  background-color: rgba(0, 0, 0, 0.1);\n  color: #ffffff;\n}\n\n.table-font-size {\n  font-size: 14px;\n}\n\n.table-input-box {\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n  padding: 14px;\n  border: 1px solid transparent;\n  transition: border-color 0.3s ease-in-out;\n  background-color: transparent;\n}\n\n.table-select-box {\n  /* border: 5px solid green !important; */\n  transition: border-color 0.3s ease-in-out;\n  /* background-color: yellow; */\n  border-radius: 0px !important;\n  background-color: transparent !important;\n}\n\n.table-select-box.el-select .el-input input {\n  border-radius: 0px !important;\n  border: 5px solid transparent !important;\n  background-color: transparent;\n}\n\ntd {\n  display: table-cell !important;\n  padding: 0px !important;\n  /* background-color: #111111 !important; */\n}\ntable {\n  border-collapse: collapse !important;\n}\n.bold-button {\n  font-weight: bold !important;\n}\n\n.input-datalist {\n  display: block !important;\n  width: 100% !important;\n  margin-bottom: 10px !important;\n  position: relative !important;\n  appearance: none !important;\n  font-weight: 400 !important;\n  background-clip: padding-box !important;\n  border: 1px solid #66615b !important;\n  border-radius: 5px !important;\n  padding: 9px !important;\n  outline: none;\n  /* border: 1pc solid gray; */\n}\n\n.table-delete-button {\n  background-color: transparent;\n  color: red;\n  border: none;\n  cursor: pointer;\n}\n\n.label-font {\n  color: red !important;\n}\n\n/* .table-delete:hover {\n  color: red !important;\n  cursor: pointer;\n} */\n\n.card-attachment {\n  background-color: #66615b;\n}\n\n.card-generator {\n  margin-top: 100px;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}