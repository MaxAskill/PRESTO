{"ast":null,"code":"import _Option2 from \"element-ui/lib/theme-chalk/option.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Option from \"element-ui/lib/option\";\nimport _Select2 from \"element-ui/lib/theme-chalk/select.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Select from \"element-ui/lib/select\";\nimport _TableColumn2 from \"element-ui/lib/theme-chalk/table-column.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _TableColumn from \"element-ui/lib/table-column\";\nimport _Table2 from \"element-ui/lib/theme-chalk/table.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Table from \"element-ui/lib/table\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport Vue from \"vue\";\nimport axiosClient from \"../../../../../../axios\";\nimport NotifRenameBoxLabel from \"../../../Components/Notification/NotifSuccessRenameBoxLabel.vue\";\nVue.use(_Table);\nVue.use(_TableColumn);\nVue.use(_Select);\nVue.use(_Option);\nexport default {\n  components: {\n    NotifRenameBoxLabel: NotifRenameBoxLabel\n  },\n  props: [\"transferredData\", \"newItemInputBox\"],\n  watch: {\n    transferredData: function transferredData(newValue) {\n      if (newValue === \"\") {\n        console.log(\"Mabuhayaaaaaaaaaaaaaaaaa\");\n        this.$emit(\"closeModal\");\n      }\n    }\n  },\n  computed: {},\n  data: function data() {\n    return {\n      tableColumns: [{\n        prop: \"id\",\n        label: \"Box Number\",\n        minWidth: 200\n      }, {\n        prop: \"boxLabel\",\n        label: \"Box Label\",\n        minWidth: 250\n      }]\n    };\n  },\n  methods: {\n    removeBoxLabel: function removeBoxLabel(deleteboxLabel) {\n      var _this = this;\n      var localData = this.transferredData.boxLabels.findIndex(function (tablerow) {\n        return tablerow.id === deleteboxLabel.id;\n      });\n      console.log(\"dasd\", localData);\n      console.log(\"before\", this.transferredData.boxLabels[localData].id);\n      this.transferredData.items = this.transferredData.items.filter(function (obj) {\n        return obj.boxNumber !== _this.transferredData.boxLabels[localData].id;\n      });\n      if (localData >= 0) {\n        this.transferredData.boxLabels.splice(localData, 1);\n        this.newItemInputBox.splice(localData, 1);\n        this.notifyVue(\"bottom\", \"right\");\n      }\n    },\n    handleBoxLabel: function handleBoxLabel(boxLabel) {\n      if (!boxLabel) console.log(\"Empty boxlabel\");else this.notifyVue(\"bottom\", \"right\");\n    },\n    notifyVue: function notifyVue(verticalAlign, horizontalAlign) {\n      this.$notify({\n        component: NotifRenameBoxLabel,\n        horizontalAlign: horizontalAlign,\n        verticalAlign: verticalAlign,\n        type: \"success\",\n        props: {\n          customValue: \"Success Add Box\"\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["Vue","axiosClient","NotifRenameBoxLabel","use","_Table","_TableColumn","_Select","_Option","components","props","watch","transferredData","newValue","console","log","$emit","computed","data","tableColumns","prop","label","minWidth","methods","removeBoxLabel","deleteboxLabel","_this","localData","boxLabels","findIndex","tablerow","id","items","filter","obj","boxNumber","splice","newItemInputBox","notifyVue","handleBoxLabel","boxLabel","verticalAlign","horizontalAlign","$notify","component","type","customValue"],"sources":["src/components/Dashboard/Views/PullOut/PullOutRequests/ModalPullOut/EditBoxLabelModal.vue"],"sourcesContent":["<template>\n  <div\n    class=\"modal fade\"\n    id=\"exampleModal\"\n    tabindex=\"-1\"\n    aria-labelledby=\"exampleModalLabel\"\n    aria-hidden=\"true\"\n  >\n    <div class=\"modal-dialog modal-dialog-centered modal-xl\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <h1 class=\"modal-title fs-5 text-weight-bold\" id=\"exampleModalLabel\">\n            LIST OF BOX LABEL {{ newItemInputBox }}\n          </h1>\n        </div>\n        <div class=\"modal-body\">\n          <div class=\"row\">\n            <table\n              class=\"table table-bordered table-hover table-responsive-sm table-font-size font-weight-normal\"\n            >\n              <thead>\n                <tr>\n                  <th scope=\"col\" class=\"nowrap\">Box Label</th>\n                  <!-- <th scope=\"col\" class=\"nowrap\">Category/Brand</th>\n                  <th scope=\"col\" class=\"nowrap\">Quantity</th>\n                  <th scope=\"col\" class=\"nowrap\">Box Label</th> -->\n                </tr>\n              </thead>\n              <tbody>\n                <tr v-for=\"boxLabel in transferredData.boxLabels\" :key=\"boxLabel.id\">\n                  <!-- <td class=\"cell px-3\">{{ item.description }}</td> -->\n                  <!-- <td class=\"cell px-3\">{{ item.categorybrand }}</td> -->\n                  <td class=\"input-container\">\n                    <input\n                      type=\"text\"\n                      @blur=\"handleBoxLabel(boxLabel.boxLabel)\"\n                      v-model=\"boxLabel.boxLabel\"\n                      class=\"table-input-box\"\n                    />\n                    <button\n                      class=\"table-delete-modal pull-left\"\n                      @click.prevent=\"removeBoxLabel(boxLabel)\"\n                    >\n                      <i class=\"nc-icon nc-simple-remove font-weight-bold\"></i>\n                    </button>\n                  </td>\n                  <!-- <td class=\"cell\">\n                    <el-select\n                      class=\"table-select-box\"\n                      size=\"large\"\n                      v-model=\"item.boxLabel\"\n                      @change=\"editBoxLabel(item.code, item.quantity, item.boxLabel)\"\n                    >\n                      <el-option\n                        v-for=\"boxLabel in newTransaction.boxLabels\"\n                        class=\"table-select-box\"\n                        :value=\"boxLabel.boxLabel\"\n                        :label=\"boxLabel.boxLabel\"\n                        :key=\"boxLabel.id\"\n                      >\n                      </el-option>\n                    </el-select>\n                  </td> -->\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n        <div class=\"modal-footer px-5\">\n          <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">\n            Close\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n  <!-- </div> -->\n</template>\n<script>\nimport Vue from \"vue\";\nimport { Table, TableColumn, Select, Option } from \"element-ui\";\nimport axiosClient from \"../../../../../../axios\";\n// import NotificationTemplate from \"../../../Components/Notification/NotifSuccessRenameBoxLabel.vue\";\nimport NotifRenameBoxLabel from \"../../../Components/Notification/NotifSuccessRenameBoxLabel.vue\";\n\nVue.use(Table);\nVue.use(TableColumn);\nVue.use(Select);\nVue.use(Option);\nexport default {\n  components: {\n    NotifRenameBoxLabel,\n  },\n  props: [\"transferredData\", \"newItemInputBox\"],\n  // mounted() {\n  //   $(\"#myModal\").modal(\"show\");\n  // },\n  // destroyed() {\n  //   $(\"#myModal\").modal(\"hide\");\n  // },\n  watch: {\n    transferredData(newValue) {\n      if (newValue === \"\") {\n        console.log(\"Mabuhayaaaaaaaaaaaaaaaaa\");\n        this.$emit(\"closeModal\");\n      }\n    },\n  },\n  computed: {\n    /***\n     * Searches through table data and returns a paginated array.\n     * Note that this should not be used for table with a lot of data as it might be slow!\n     * Do the search and the pagination on the server and display the data retrieved from server instead.\n     * @returns {computed.pagedData}\n     */\n  },\n  data() {\n    return {\n      tableColumns: [\n        {\n          prop: \"id\",\n          label: \"Box Number\",\n          minWidth: 200,\n        },\n        {\n          prop: \"boxLabel\",\n          label: \"Box Label\",\n          minWidth: 250,\n        },\n      ],\n    };\n  },\n  methods: {\n    removeBoxLabel(deleteboxLabel) {\n      let localData = this.transferredData.boxLabels.findIndex(\n        (tablerow) => tablerow.id === deleteboxLabel.id\n      );\n\n      console.log(\"dasd\", localData);\n      console.log(\"before\", this.transferredData.boxLabels[localData].id);\n\n      // Remove objects with the same ID from the original list\n      this.transferredData.items = this.transferredData.items.filter(\n        (obj) => obj.boxNumber !== this.transferredData.boxLabels[localData].id\n      );\n\n      if (localData >= 0) {\n        this.transferredData.boxLabels.splice(localData, 1);\n        this.newItemInputBox.splice(localData, 1);\n        this.notifyVue(\"bottom\", \"right\");\n      }\n\n      // console.log(\"after\", this.transferredData);\n      // this.$emit(\"closeModal\", this.transferredData);\n    },\n    handleBoxLabel(boxLabel) {\n      if (!boxLabel) console.log(\"Empty boxlabel\");\n      else this.notifyVue(\"bottom\", \"right\");\n    },\n    notifyVue(verticalAlign, horizontalAlign) {\n      // const color = Math.floor(Math.random() * 4 + 1);\n      this.$notify({\n        component: NotifRenameBoxLabel,\n        // icon: \"nc-icon nc-app\",\n        horizontalAlign: horizontalAlign,\n        verticalAlign: verticalAlign,\n        type: \"success\",\n        props: {\n          customValue: \"Success Add Box\",\n        },\n      });\n    },\n  },\n};\n</script>\n\n<style>\n.input-container {\n  position: relative;\n  display: inline-block;\n}\n\n.table-input-box {\n  padding-right: 40px; /* Add enough padding to make room for the button */\n}\n\n.table-delete-modal {\n  position: absolute;\n  top: 50%;\n  right: 5px;\n  transform: translateY(-50%);\n  background-color: transparent;\n  color: red;\n  border: none;\n  cursor: pointer;\n}\n</style>\n"],"mappings":";;;;;;;;;;;;;;;;AA+EA,OAAAA,GAAA;AAEA,OAAAC,WAAA;AAEA,OAAAC,mBAAA;AAEAF,GAAA,CAAAG,GAAA,CAAAC,MAAA;AACAJ,GAAA,CAAAG,GAAA,CAAAE,YAAA;AACAL,GAAA,CAAAG,GAAA,CAAAG,OAAA;AACAN,GAAA,CAAAG,GAAA,CAAAI,OAAA;AACA;EACAC,UAAA;IACAN,mBAAA,EAAAA;EACA;EACAO,KAAA;EAOAC,KAAA;IACAC,eAAA,WAAAA,gBAAAC,QAAA;MACA,IAAAA,QAAA;QACAC,OAAA,CAAAC,GAAA;QACA,KAAAC,KAAA;MACA;IACA;EACA;EACAC,QAAA,GAOA;EACAC,IAAA,WAAAA,KAAA;IACA;MACAC,YAAA,GACA;QACAC,IAAA;QACAC,KAAA;QACAC,QAAA;MACA,GACA;QACAF,IAAA;QACAC,KAAA;QACAC,QAAA;MACA;IAEA;EACA;EACAC,OAAA;IACAC,cAAA,WAAAA,eAAAC,cAAA;MAAA,IAAAC,KAAA;MACA,IAAAC,SAAA,QAAAf,eAAA,CAAAgB,SAAA,CAAAC,SAAA,CACA,UAAAC,QAAA;QAAA,OAAAA,QAAA,CAAAC,EAAA,KAAAN,cAAA,CAAAM,EAAA;MAAA,CACA;MAEAjB,OAAA,CAAAC,GAAA,SAAAY,SAAA;MACAb,OAAA,CAAAC,GAAA,gBAAAH,eAAA,CAAAgB,SAAA,CAAAD,SAAA,EAAAI,EAAA;MAGA,KAAAnB,eAAA,CAAAoB,KAAA,QAAApB,eAAA,CAAAoB,KAAA,CAAAC,MAAA,CACA,UAAAC,GAAA;QAAA,OAAAA,GAAA,CAAAC,SAAA,KAAAT,KAAA,CAAAd,eAAA,CAAAgB,SAAA,CAAAD,SAAA,EAAAI,EAAA;MAAA,CACA;MAEA,IAAAJ,SAAA;QACA,KAAAf,eAAA,CAAAgB,SAAA,CAAAQ,MAAA,CAAAT,SAAA;QACA,KAAAU,eAAA,CAAAD,MAAA,CAAAT,SAAA;QACA,KAAAW,SAAA;MACA;IAIA;IACAC,cAAA,WAAAA,eAAAC,QAAA;MACA,KAAAA,QAAA,EAAA1B,OAAA,CAAAC,GAAA,wBACA,KAAAuB,SAAA;IACA;IACAA,SAAA,WAAAA,UAAAG,aAAA,EAAAC,eAAA;MAEA,KAAAC,OAAA;QACAC,SAAA,EAAAzC,mBAAA;QAEAuC,eAAA,EAAAA,eAAA;QACAD,aAAA,EAAAA,aAAA;QACAI,IAAA;QACAnC,KAAA;UACAoC,WAAA;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}